
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uid: 'uid',
  password: 'password',
  fullName: 'fullName',
  role: 'role',
  batchType: 'batchType',
  subjects: 'subjects',
  roomNumber: 'roomNumber',
  avatar: 'avatar',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  grade: 'grade',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassStudentScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  studentId: 'studentId',
  joinedAt: 'joinedAt'
};

exports.Prisma.DoubtScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subject: 'subject',
  description: 'description',
  imageUrl: 'imageUrl',
  priority: 'priority',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  doubtId: 'doubtId',
  teacherId: 'teacherId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  notes: 'notes',
  meetingLink: 'meetingLink',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  classId: 'classId',
  authorId: 'authorId',
  duration: 'duration',
  totalMarks: 'totalMarks',
  passingMarks: 'passingMarks',
  instructions: 'instructions',
  status: 'status',
  scheduledAt: 'scheduledAt',
  endsAt: 'endsAt',
  allowReview: 'allowReview',
  shuffleQuestions: 'shuffleQuestions',
  showResults: 'showResults',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  testId: 'testId',
  order: 'order',
  timeLimit: 'timeLimit'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  sectionId: 'sectionId',
  type: 'type',
  text: 'text',
  imageUrl: 'imageUrl',
  options: 'options',
  correctAnswers: 'correctAnswers',
  explanation: 'explanation',
  marks: 'marks',
  negativeMarks: 'negativeMarks',
  difficulty: 'difficulty',
  order: 'order',
  tags: 'tags'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  studentId: 'studentId',
  answers: 'answers',
  score: 'score',
  totalMarks: 'totalMarks',
  percentage: 'percentage',
  timeTaken: 'timeTaken',
  isCompleted: 'isCompleted',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ClassScheduleScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  teacherId: 'teacherId',
  creatorId: 'creatorId',
  batchType: 'batchType',
  roomNumber: 'roomNumber',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  topic: 'topic',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecialEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  location: 'location',
  status: 'status',
  maxParticipants: 'maxParticipants',
  isRecurring: 'isRecurring',
  recurringPattern: 'recurringPattern',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventParticipantScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userUid: 'userUid',
  status: 'status',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  classScheduleId: 'classScheduleId',
  studentId: 'studentId',
  teacherId: 'teacherId',
  status: 'status',
  markedAt: 'markedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SampleQuestionScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  class: 'class',
  type: 'type',
  text: 'text',
  imageUrl: 'imageUrl',
  options: 'options',
  correctAnswers: 'correctAnswers',
  explanation: 'explanation',
  difficulty: 'difficulty',
  tags: 'tags',
  createdAt: 'createdAt'
};

exports.Prisma.HomeworkScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  subject: 'subject',
  teacherId: 'teacherId',
  batchType: 'batchType',
  imageUrl: 'imageUrl',
  dueDate: 'dueDate',
  totalMarks: 'totalMarks',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomeworkSubmissionScalarFieldEnum = {
  id: 'id',
  homeworkId: 'homeworkId',
  studentId: 'studentId',
  submissionType: 'submissionType',
  textContent: 'textContent',
  imageUrl: 'imageUrl',
  documentUrl: 'documentUrl',
  unableReason: 'unableReason',
  status: 'status',
  marksObtained: 'marksObtained',
  teacherRemarks: 'teacherRemarks',
  grade: 'grade',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  HEAD_TEACHER: 'HEAD_TEACHER'
};

exports.BatchType = exports.$Enums.BatchType = {
  IN_CLASS_7: 'IN_CLASS_7',
  IN_CLASS_8: 'IN_CLASS_8',
  IN_CLASS_9: 'IN_CLASS_9',
  IN_CLASS_10: 'IN_CLASS_10',
  NEET_11: 'NEET_11',
  NEET_12: 'NEET_12',
  PCM_11: 'PCM_11',
  PCM_12: 'PCM_12'
};

exports.DoubtStatus = exports.$Enums.DoubtStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CANCELLED: 'CANCELLED'
};

exports.TestStatus = exports.$Enums.TestStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MCQ: 'MCQ',
  SHORT_ANSWER: 'SHORT_ANSWER',
  INTEGER: 'INTEGER'
};

exports.EventType = exports.$Enums.EventType = {
  PTM: 'PTM',
  DOUBT_CLASS: 'DOUBT_CLASS',
  SPECIAL_CLASS: 'SPECIAL_CLASS',
  WORKSHOP: 'WORKSHOP',
  EXAM: 'EXAM',
  ANNOUNCEMENT: 'ANNOUNCEMENT'
};

exports.HomeworkStatus = exports.$Enums.HomeworkStatus = {
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED: 'SUBMITTED',
  REVIEWED: 'REVIEWED',
  OVERDUE: 'OVERDUE'
};

exports.SubmissionType = exports.$Enums.SubmissionType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  UNABLE_TO_COMPLETE: 'UNABLE_TO_COMPLETE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Class: 'Class',
  ClassStudent: 'ClassStudent',
  Doubt: 'Doubt',
  Appointment: 'Appointment',
  Test: 'Test',
  Section: 'Section',
  Question: 'Question',
  Submission: 'Submission',
  Notification: 'Notification',
  ClassSchedule: 'ClassSchedule',
  Batch: 'Batch',
  SpecialEvent: 'SpecialEvent',
  EventParticipant: 'EventParticipant',
  Attendance: 'Attendance',
  SampleQuestion: 'SampleQuestion',
  Homework: 'Homework',
  HomeworkSubmission: 'HomeworkSubmission'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\harsh\\Projects\\edu-test-platform\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\harsh\\Projects\\edu-test-platform\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  STUDENT\n  TEACHER\n  HEAD_TEACHER\n}\n\nenum BatchType {\n  IN_CLASS_7\n  IN_CLASS_8\n  IN_CLASS_9\n  IN_CLASS_10\n  NEET_11\n  NEET_12\n  PCM_11\n  PCM_12\n}\n\nenum DoubtStatus {\n  PENDING\n  IN_PROGRESS\n  RESOLVED\n  CANCELLED\n}\n\nenum TestStatus {\n  DRAFT\n  PUBLISHED\n  SCHEDULED\n  ACTIVE\n  COMPLETED\n  ARCHIVED\n}\n\nmodel User {\n  id          String     @id @default(cuid())\n  uid         String     @unique // Unique ID for login (replaces email)\n  password    String\n  fullName    String\n  role        Role\n  batchType   BatchType?\n  subjects    String? // For teachers - subjects they teach (JSON string)\n  roomNumber  String? // For teachers\n  avatar      String?\n  phone       String?\n  address     String?\n  dateOfBirth DateTime?\n  isActive    Boolean    @default(true)\n  lastLoginAt DateTime?\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n\n  // Relations\n  doubts              Doubt[]\n  appointments        Appointment[]        @relation(\"AppointmentTeacher\")\n  testsCreated        Test[]               @relation(\"TestAuthor\")\n  submissions         Submission[]\n  classes             ClassStudent[]\n  notifications       Notification[]\n  scheduledClasses    ClassSchedule[]      @relation(\"ClassTeacher\")\n  createdClasses      ClassSchedule[]      @relation(\"ClassCreator\")\n  studentAttendance   Attendance[]         @relation(\"StudentAttendance\")\n  teacherAttendance   Attendance[]         @relation(\"TeacherAttendance\")\n  eventParticipations EventParticipant[]\n  batchesTeaching     Batch[]              @relation(\"TeacherBatches\")\n  homeworkAssigned    Homework[]           @relation(\"HomeworkTeacher\")\n  homeworkSubmissions HomeworkSubmission[]\n}\n\nmodel Class {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  subject     String\n  grade       String\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  students ClassStudent[]\n  tests    Test[]\n}\n\nmodel ClassStudent {\n  id        String   @id @default(cuid())\n  class     Class    @relation(fields: [classId], references: [id])\n  classId   String\n  student   User     @relation(fields: [studentId], references: [id])\n  studentId String\n  joinedAt  DateTime @default(now())\n\n  @@unique([classId, studentId])\n}\n\nmodel Doubt {\n  id          String      @id @default(cuid())\n  student     User        @relation(fields: [studentId], references: [id])\n  studentId   String\n  subject     String\n  description String\n  imageUrl    String?\n  priority    String      @default(\"MEDIUM\") // LOW, MEDIUM, HIGH\n  status      DoubtStatus @default(PENDING)\n  createdAt   DateTime    @default(now())\n  updatedAt   DateTime    @updatedAt\n\n  // Relations\n  appointment Appointment?\n}\n\nmodel Appointment {\n  id          String   @id @default(cuid())\n  doubt       Doubt    @relation(fields: [doubtId], references: [id])\n  doubtId     String   @unique\n  teacher     User     @relation(\"AppointmentTeacher\", fields: [teacherId], references: [id])\n  teacherId   String\n  scheduledAt DateTime\n  duration    Int      @default(30) // minutes\n  notes       String?\n  meetingLink String?\n  status      String   @default(\"SCHEDULED\") // SCHEDULED, COMPLETED, CANCELLED\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n\nmodel Test {\n  id               String     @id @default(cuid())\n  title            String\n  description      String?\n  class            Class?     @relation(fields: [classId], references: [id])\n  classId          String?\n  author           User       @relation(\"TestAuthor\", fields: [authorId], references: [id])\n  authorId         String\n  duration         Int        @default(180) // minutes\n  totalMarks       Int        @default(0)\n  passingMarks     Int        @default(0)\n  instructions     String?\n  status           TestStatus @default(DRAFT)\n  scheduledAt      DateTime?\n  endsAt           DateTime?\n  allowReview      Boolean    @default(true)\n  shuffleQuestions Boolean    @default(false)\n  showResults      Boolean    @default(true)\n  createdAt        DateTime   @default(now())\n  updatedAt        DateTime   @updatedAt\n\n  // Relations\n  sections    Section[]\n  submissions Submission[]\n}\n\nmodel Section {\n  id          String     @id @default(cuid())\n  title       String\n  description String?\n  test        Test       @relation(fields: [testId], references: [id], onDelete: Cascade)\n  testId      String\n  order       Int\n  timeLimit   Int? // section-specific time limit in minutes\n  questions   Question[]\n}\n\nenum QuestionType {\n  MCQ\n  SHORT_ANSWER\n  INTEGER\n}\n\nmodel Question {\n  id             String       @id @default(cuid())\n  section        Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)\n  sectionId      String\n  type           QuestionType\n  text           String\n  imageUrl       String?\n  options        String // JSON string for array of options\n  correctAnswers String // JSON string for array of correct answers\n  explanation    String?\n  marks          Int\n  negativeMarks  Int          @default(0)\n  difficulty     String       @default(\"MEDIUM\") // EASY, MEDIUM, HARD\n  order          Int\n  tags           String // JSON string for array of tags\n}\n\nmodel Submission {\n  id          String    @id @default(cuid())\n  test        Test      @relation(fields: [testId], references: [id])\n  testId      String\n  student     User      @relation(fields: [studentId], references: [id])\n  studentId   String\n  answers     Json // { questionId: answer, ... }\n  score       Int       @default(0)\n  totalMarks  Int       @default(0)\n  percentage  Float     @default(0)\n  timeTaken   Int       @default(0) // minutes\n  isCompleted Boolean   @default(false)\n  startedAt   DateTime  @default(now())\n  submittedAt DateTime?\n  createdAt   DateTime  @default(now())\n\n  @@unique([testId, studentId])\n}\n\nmodel Notification {\n  id        String   @id @default(cuid())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    String\n  title     String\n  message   String\n  type      String // INFO, SUCCESS, WARNING, ERROR\n  isRead    Boolean  @default(false)\n  actionUrl String?\n  createdAt DateTime @default(now())\n}\n\nmodel ClassSchedule {\n  id          String    @id @default(cuid())\n  subject     String\n  teacher     User      @relation(\"ClassTeacher\", fields: [teacherId], references: [id])\n  teacherId   String\n  creator     User      @relation(\"ClassCreator\", fields: [creatorId], references: [id])\n  creatorId   String\n  batchType   BatchType\n  roomNumber  String\n  date        DateTime\n  startTime   String // \"09:00\"\n  endTime     String // \"10:30\"\n  topic       String?\n  description String?\n  isActive    Boolean   @default(true)\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n\n  // Relations\n  attendance Attendance[]\n}\n\nenum EventType {\n  PTM\n  DOUBT_CLASS\n  SPECIAL_CLASS\n  WORKSHOP\n  EXAM\n  ANNOUNCEMENT\n}\n\nenum HomeworkStatus {\n  ASSIGNED\n  IN_PROGRESS\n  SUBMITTED\n  REVIEWED\n  OVERDUE\n}\n\nenum SubmissionType {\n  TEXT\n  IMAGE\n  DOCUMENT\n  UNABLE_TO_COMPLETE\n}\n\nmodel Batch {\n  id        String    @id @default(cuid())\n  type      BatchType @unique\n  name      String\n  isActive  Boolean   @default(true)\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  // Relations\n  events           SpecialEvent[]\n  teachersAssigned User[]         @relation(\"TeacherBatches\")\n}\n\nmodel SpecialEvent {\n  id               String    @id @default(cuid())\n  title            String\n  description      String?\n  type             EventType\n  scheduledAt      DateTime\n  duration         Int       @default(60) // minutes\n  location         String?\n  status           String    @default(\"SCHEDULED\") // SCHEDULED, ONGOING, COMPLETED, CANCELLED\n  maxParticipants  Int?\n  isRecurring      Boolean   @default(false)\n  recurringPattern String?\n  createdAt        DateTime  @default(now())\n  updatedAt        DateTime  @updatedAt\n\n  // Relations\n  batches      Batch[]\n  participants EventParticipant[]\n}\n\nmodel EventParticipant {\n  id          String       @id @default(cuid())\n  event       SpecialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)\n  eventId     String\n  user        User         @relation(fields: [userUid], references: [uid])\n  userUid     String\n  status      String       @default(\"INVITED\") // INVITED, ATTENDING, NOT_ATTENDING, MAYBE\n  respondedAt DateTime?\n  createdAt   DateTime     @default(now())\n\n  @@unique([eventId, userUid])\n}\n\nmodel Attendance {\n  id              String        @id @default(cuid())\n  classSchedule   ClassSchedule @relation(fields: [classScheduleId], references: [id])\n  classScheduleId String\n  student         User          @relation(\"StudentAttendance\", fields: [studentId], references: [id])\n  studentId       String\n  teacher         User          @relation(\"TeacherAttendance\", fields: [teacherId], references: [id])\n  teacherId       String\n  status          String // PRESENT, ABSENT, LATE, EXCUSED\n  markedAt        DateTime      @default(now())\n  notes           String?\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n\n  @@unique([classScheduleId, studentId])\n}\n\nmodel SampleQuestion {\n  id             String       @id @default(cuid())\n  subject        String\n  class          String // \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\n  type           QuestionType\n  text           String\n  imageUrl       String?\n  options        String // JSON string\n  correctAnswers String // JSON string\n  explanation    String?\n  difficulty     String       @default(\"MEDIUM\")\n  tags           String // JSON string\n  createdAt      DateTime     @default(now())\n}\n\nmodel Homework {\n  id           String         @id @default(cuid())\n  title        String\n  description  String\n  instructions String?\n  subject      String\n  teacher      User           @relation(\"HomeworkTeacher\", fields: [teacherId], references: [id])\n  teacherId    String\n  batchType    BatchType\n  imageUrl     String? // Optional homework image/document\n  dueDate      DateTime\n  totalMarks   Int            @default(10)\n  status       HomeworkStatus @default(ASSIGNED)\n  isActive     Boolean        @default(true)\n  createdAt    DateTime       @default(now())\n  updatedAt    DateTime       @updatedAt\n\n  // Relations\n  submissions HomeworkSubmission[]\n}\n\nmodel HomeworkSubmission {\n  id             String         @id @default(cuid())\n  homework       Homework       @relation(fields: [homeworkId], references: [id], onDelete: Cascade)\n  homeworkId     String\n  student        User           @relation(fields: [studentId], references: [id])\n  studentId      String\n  submissionType SubmissionType\n  textContent    String? // For text submissions\n  imageUrl       String? // For image submissions\n  documentUrl    String? // For document submissions\n  unableReason   String? // When student can't complete homework\n  status         HomeworkStatus @default(SUBMITTED)\n  marksObtained  Int?\n  teacherRemarks String?\n  grade          String? // A+, A, B+, B, C+, C, D, F\n  submittedAt    DateTime       @default(now())\n  reviewedAt     DateTime?\n  createdAt      DateTime       @default(now())\n  updatedAt      DateTime       @updatedAt\n\n  @@unique([homeworkId, studentId])\n}\n",
  "inlineSchemaHash": "4e946af14d8a5c3a6b45e5dcf3868b3eea272f45d4e538ca13d8ccd96d17b0b4",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"batchType\",\"kind\":\"enum\",\"type\":\"BatchType\"},{\"name\":\"subjects\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"doubts\",\"kind\":\"object\",\"type\":\"Doubt\",\"relationName\":\"DoubtToUser\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentTeacher\"},{\"name\":\"testsCreated\",\"kind\":\"object\",\"type\":\"Test\",\"relationName\":\"TestAuthor\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"classes\",\"kind\":\"object\",\"type\":\"ClassStudent\",\"relationName\":\"ClassStudentToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"scheduledClasses\",\"kind\":\"object\",\"type\":\"ClassSchedule\",\"relationName\":\"ClassTeacher\"},{\"name\":\"createdClasses\",\"kind\":\"object\",\"type\":\"ClassSchedule\",\"relationName\":\"ClassCreator\"},{\"name\":\"studentAttendance\",\"kind\":\"object\",\"type\":\"Attendance\",\"relationName\":\"StudentAttendance\"},{\"name\":\"teacherAttendance\",\"kind\":\"object\",\"type\":\"Attendance\",\"relationName\":\"TeacherAttendance\"},{\"name\":\"eventParticipations\",\"kind\":\"object\",\"type\":\"EventParticipant\",\"relationName\":\"EventParticipantToUser\"},{\"name\":\"batchesTeaching\",\"kind\":\"object\",\"type\":\"Batch\",\"relationName\":\"TeacherBatches\"},{\"name\":\"homeworkAssigned\",\"kind\":\"object\",\"type\":\"Homework\",\"relationName\":\"HomeworkTeacher\"},{\"name\":\"homeworkSubmissions\",\"kind\":\"object\",\"type\":\"HomeworkSubmission\",\"relationName\":\"HomeworkSubmissionToUser\"}],\"dbName\":null},\"Class\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"students\",\"kind\":\"object\",\"type\":\"ClassStudent\",\"relationName\":\"ClassToClassStudent\"},{\"name\":\"tests\",\"kind\":\"object\",\"type\":\"Test\",\"relationName\":\"ClassToTest\"}],\"dbName\":null},\"ClassStudent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToClassStudent\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClassStudentToUser\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Doubt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DoubtToUser\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"DoubtStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToDoubt\"}],\"dbName\":null},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doubt\",\"kind\":\"object\",\"type\":\"Doubt\",\"relationName\":\"AppointmentToDoubt\"},{\"name\":\"doubtId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AppointmentTeacher\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meetingLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Test\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToTest\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TestAuthor\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"passingMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TestStatus\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endsAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"allowReview\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"shuffleQuestions\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"showResults\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sections\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToTest\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToTest\"}],\"dbName\":null},\"Section\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"test\",\"kind\":\"object\",\"type\":\"Test\",\"relationName\":\"SectionToTest\"},{\"name\":\"testId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToSection\"}],\"dbName\":null},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"QuestionToSection\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"QuestionType\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correctAnswers\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"marks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"negativeMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"test\",\"kind\":\"object\",\"type\":\"Test\",\"relationName\":\"SubmissionToTest\"},{\"name\":\"testId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"percentage\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timeTaken\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"actionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ClassSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClassTeacher\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClassCreator\"},{\"name\":\"creatorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batchType\",\"kind\":\"enum\",\"type\":\"BatchType\"},{\"name\":\"roomNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topic\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attendance\",\"kind\":\"object\",\"type\":\"Attendance\",\"relationName\":\"AttendanceToClassSchedule\"}],\"dbName\":null},\"Batch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"BatchType\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"SpecialEvent\",\"relationName\":\"BatchToSpecialEvent\"},{\"name\":\"teachersAssigned\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherBatches\"}],\"dbName\":null},\"SpecialEvent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"EventType\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxParticipants\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isRecurring\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recurringPattern\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"batches\",\"kind\":\"object\",\"type\":\"Batch\",\"relationName\":\"BatchToSpecialEvent\"},{\"name\":\"participants\",\"kind\":\"object\",\"type\":\"EventParticipant\",\"relationName\":\"EventParticipantToSpecialEvent\"}],\"dbName\":null},\"EventParticipant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"SpecialEvent\",\"relationName\":\"EventParticipantToSpecialEvent\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EventParticipantToUser\"},{\"name\":\"userUid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"respondedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Attendance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classSchedule\",\"kind\":\"object\",\"type\":\"ClassSchedule\",\"relationName\":\"AttendanceToClassSchedule\"},{\"name\":\"classScheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentAttendance\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherAttendance\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"markedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SampleQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"QuestionType\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"correctAnswers\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Homework\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"HomeworkTeacher\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batchType\",\"kind\":\"enum\",\"type\":\"BatchType\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalMarks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"HomeworkStatus\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"HomeworkSubmission\",\"relationName\":\"HomeworkToHomeworkSubmission\"}],\"dbName\":null},\"HomeworkSubmission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"homework\",\"kind\":\"object\",\"type\":\"Homework\",\"relationName\":\"HomeworkToHomeworkSubmission\"},{\"name\":\"homeworkId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"HomeworkSubmissionToUser\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submissionType\",\"kind\":\"enum\",\"type\":\"SubmissionType\"},{\"name\":\"textContent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unableReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"HomeworkStatus\"},{\"name\":\"marksObtained\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"teacherRemarks\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"grade\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"reviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

