
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model ClassStudent
 * 
 */
export type ClassStudent = $Result.DefaultSelection<Prisma.$ClassStudentPayload>
/**
 * Model Doubt
 * 
 */
export type Doubt = $Result.DefaultSelection<Prisma.$DoubtPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Test
 * 
 */
export type Test = $Result.DefaultSelection<Prisma.$TestPayload>
/**
 * Model Section
 * 
 */
export type Section = $Result.DefaultSelection<Prisma.$SectionPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ClassSchedule
 * 
 */
export type ClassSchedule = $Result.DefaultSelection<Prisma.$ClassSchedulePayload>
/**
 * Model Batch
 * 
 */
export type Batch = $Result.DefaultSelection<Prisma.$BatchPayload>
/**
 * Model SpecialEvent
 * 
 */
export type SpecialEvent = $Result.DefaultSelection<Prisma.$SpecialEventPayload>
/**
 * Model EventParticipant
 * 
 */
export type EventParticipant = $Result.DefaultSelection<Prisma.$EventParticipantPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>
/**
 * Model SampleQuestion
 * 
 */
export type SampleQuestion = $Result.DefaultSelection<Prisma.$SampleQuestionPayload>
/**
 * Model Homework
 * 
 */
export type Homework = $Result.DefaultSelection<Prisma.$HomeworkPayload>
/**
 * Model HomeworkSubmission
 * 
 */
export type HomeworkSubmission = $Result.DefaultSelection<Prisma.$HomeworkSubmissionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  HEAD_TEACHER: 'HEAD_TEACHER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const BatchType: {
  IN_CLASS_7: 'IN_CLASS_7',
  IN_CLASS_8: 'IN_CLASS_8',
  IN_CLASS_9: 'IN_CLASS_9',
  IN_CLASS_10: 'IN_CLASS_10',
  NEET_11: 'NEET_11',
  NEET_12: 'NEET_12',
  PCM_11: 'PCM_11',
  PCM_12: 'PCM_12'
};

export type BatchType = (typeof BatchType)[keyof typeof BatchType]


export const DoubtStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CANCELLED: 'CANCELLED'
};

export type DoubtStatus = (typeof DoubtStatus)[keyof typeof DoubtStatus]


export const TestStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

export type TestStatus = (typeof TestStatus)[keyof typeof TestStatus]


export const QuestionType: {
  MCQ: 'MCQ',
  SHORT_ANSWER: 'SHORT_ANSWER',
  INTEGER: 'INTEGER'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]


export const EventType: {
  PTM: 'PTM',
  DOUBT_CLASS: 'DOUBT_CLASS',
  SPECIAL_CLASS: 'SPECIAL_CLASS',
  WORKSHOP: 'WORKSHOP',
  EXAM: 'EXAM',
  ANNOUNCEMENT: 'ANNOUNCEMENT'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const HomeworkStatus: {
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED: 'SUBMITTED',
  REVIEWED: 'REVIEWED',
  OVERDUE: 'OVERDUE'
};

export type HomeworkStatus = (typeof HomeworkStatus)[keyof typeof HomeworkStatus]


export const SubmissionType: {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  UNABLE_TO_COMPLETE: 'UNABLE_TO_COMPLETE'
};

export type SubmissionType = (typeof SubmissionType)[keyof typeof SubmissionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type BatchType = $Enums.BatchType

export const BatchType: typeof $Enums.BatchType

export type DoubtStatus = $Enums.DoubtStatus

export const DoubtStatus: typeof $Enums.DoubtStatus

export type TestStatus = $Enums.TestStatus

export const TestStatus: typeof $Enums.TestStatus

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type HomeworkStatus = $Enums.HomeworkStatus

export const HomeworkStatus: typeof $Enums.HomeworkStatus

export type SubmissionType = $Enums.SubmissionType

export const SubmissionType: typeof $Enums.SubmissionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classStudent`: Exposes CRUD operations for the **ClassStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassStudents
    * const classStudents = await prisma.classStudent.findMany()
    * ```
    */
  get classStudent(): Prisma.ClassStudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doubt`: Exposes CRUD operations for the **Doubt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doubts
    * const doubts = await prisma.doubt.findMany()
    * ```
    */
  get doubt(): Prisma.DoubtDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.test`: Exposes CRUD operations for the **Test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.TestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.section`: Exposes CRUD operations for the **Section** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.section.findMany()
    * ```
    */
  get section(): Prisma.SectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classSchedule`: Exposes CRUD operations for the **ClassSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassSchedules
    * const classSchedules = await prisma.classSchedule.findMany()
    * ```
    */
  get classSchedule(): Prisma.ClassScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.batch`: Exposes CRUD operations for the **Batch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Batches
    * const batches = await prisma.batch.findMany()
    * ```
    */
  get batch(): Prisma.BatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.specialEvent`: Exposes CRUD operations for the **SpecialEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpecialEvents
    * const specialEvents = await prisma.specialEvent.findMany()
    * ```
    */
  get specialEvent(): Prisma.SpecialEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventParticipant`: Exposes CRUD operations for the **EventParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventParticipants
    * const eventParticipants = await prisma.eventParticipant.findMany()
    * ```
    */
  get eventParticipant(): Prisma.EventParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sampleQuestion`: Exposes CRUD operations for the **SampleQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SampleQuestions
    * const sampleQuestions = await prisma.sampleQuestion.findMany()
    * ```
    */
  get sampleQuestion(): Prisma.SampleQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.homework`: Exposes CRUD operations for the **Homework** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Homework
    * const homework = await prisma.homework.findMany()
    * ```
    */
  get homework(): Prisma.HomeworkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.homeworkSubmission`: Exposes CRUD operations for the **HomeworkSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HomeworkSubmissions
    * const homeworkSubmissions = await prisma.homeworkSubmission.findMany()
    * ```
    */
  get homeworkSubmission(): Prisma.HomeworkSubmissionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Class: 'Class',
    ClassStudent: 'ClassStudent',
    Doubt: 'Doubt',
    Appointment: 'Appointment',
    Test: 'Test',
    Section: 'Section',
    Question: 'Question',
    Submission: 'Submission',
    Notification: 'Notification',
    ClassSchedule: 'ClassSchedule',
    Batch: 'Batch',
    SpecialEvent: 'SpecialEvent',
    EventParticipant: 'EventParticipant',
    Attendance: 'Attendance',
    SampleQuestion: 'SampleQuestion',
    Homework: 'Homework',
    HomeworkSubmission: 'HomeworkSubmission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "class" | "classStudent" | "doubt" | "appointment" | "test" | "section" | "question" | "submission" | "notification" | "classSchedule" | "batch" | "specialEvent" | "eventParticipant" | "attendance" | "sampleQuestion" | "homework" | "homeworkSubmission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      ClassStudent: {
        payload: Prisma.$ClassStudentPayload<ExtArgs>
        fields: Prisma.ClassStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          findFirst: {
            args: Prisma.ClassStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          findMany: {
            args: Prisma.ClassStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>[]
          }
          create: {
            args: Prisma.ClassStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          createMany: {
            args: Prisma.ClassStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassStudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>[]
          }
          delete: {
            args: Prisma.ClassStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          update: {
            args: Prisma.ClassStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          deleteMany: {
            args: Prisma.ClassStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassStudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>[]
          }
          upsert: {
            args: Prisma.ClassStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassStudentPayload>
          }
          aggregate: {
            args: Prisma.ClassStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassStudent>
          }
          groupBy: {
            args: Prisma.ClassStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassStudentCountArgs<ExtArgs>
            result: $Utils.Optional<ClassStudentCountAggregateOutputType> | number
          }
        }
      }
      Doubt: {
        payload: Prisma.$DoubtPayload<ExtArgs>
        fields: Prisma.DoubtFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoubtFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoubtFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          findFirst: {
            args: Prisma.DoubtFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoubtFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          findMany: {
            args: Prisma.DoubtFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>[]
          }
          create: {
            args: Prisma.DoubtCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          createMany: {
            args: Prisma.DoubtCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoubtCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>[]
          }
          delete: {
            args: Prisma.DoubtDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          update: {
            args: Prisma.DoubtUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          deleteMany: {
            args: Prisma.DoubtDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoubtUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoubtUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>[]
          }
          upsert: {
            args: Prisma.DoubtUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoubtPayload>
          }
          aggregate: {
            args: Prisma.DoubtAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoubt>
          }
          groupBy: {
            args: Prisma.DoubtGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoubtGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoubtCountArgs<ExtArgs>
            result: $Utils.Optional<DoubtCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Test: {
        payload: Prisma.$TestPayload<ExtArgs>
        fields: Prisma.TestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findFirst: {
            args: Prisma.TestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findMany: {
            args: Prisma.TestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          create: {
            args: Prisma.TestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          createMany: {
            args: Prisma.TestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          delete: {
            args: Prisma.TestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          update: {
            args: Prisma.TestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          deleteMany: {
            args: Prisma.TestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          upsert: {
            args: Prisma.TestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          aggregate: {
            args: Prisma.TestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTest>
          }
          groupBy: {
            args: Prisma.TestGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCountArgs<ExtArgs>
            result: $Utils.Optional<TestCountAggregateOutputType> | number
          }
        }
      }
      Section: {
        payload: Prisma.$SectionPayload<ExtArgs>
        fields: Prisma.SectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findFirst: {
            args: Prisma.SectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          findMany: {
            args: Prisma.SectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          create: {
            args: Prisma.SectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          createMany: {
            args: Prisma.SectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          delete: {
            args: Prisma.SectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          update: {
            args: Prisma.SectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          deleteMany: {
            args: Prisma.SectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>[]
          }
          upsert: {
            args: Prisma.SectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SectionPayload>
          }
          aggregate: {
            args: Prisma.SectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSection>
          }
          groupBy: {
            args: Prisma.SectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SectionCountArgs<ExtArgs>
            result: $Utils.Optional<SectionCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ClassSchedule: {
        payload: Prisma.$ClassSchedulePayload<ExtArgs>
        fields: Prisma.ClassScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          findFirst: {
            args: Prisma.ClassScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          findMany: {
            args: Prisma.ClassScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>[]
          }
          create: {
            args: Prisma.ClassScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          createMany: {
            args: Prisma.ClassScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>[]
          }
          delete: {
            args: Prisma.ClassScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          update: {
            args: Prisma.ClassScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          deleteMany: {
            args: Prisma.ClassScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>[]
          }
          upsert: {
            args: Prisma.ClassScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSchedulePayload>
          }
          aggregate: {
            args: Prisma.ClassScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassSchedule>
          }
          groupBy: {
            args: Prisma.ClassScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ClassScheduleCountAggregateOutputType> | number
          }
        }
      }
      Batch: {
        payload: Prisma.$BatchPayload<ExtArgs>
        fields: Prisma.BatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          findFirst: {
            args: Prisma.BatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          findMany: {
            args: Prisma.BatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>[]
          }
          create: {
            args: Prisma.BatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          createMany: {
            args: Prisma.BatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>[]
          }
          delete: {
            args: Prisma.BatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          update: {
            args: Prisma.BatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          deleteMany: {
            args: Prisma.BatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>[]
          }
          upsert: {
            args: Prisma.BatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BatchPayload>
          }
          aggregate: {
            args: Prisma.BatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBatch>
          }
          groupBy: {
            args: Prisma.BatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BatchCountArgs<ExtArgs>
            result: $Utils.Optional<BatchCountAggregateOutputType> | number
          }
        }
      }
      SpecialEvent: {
        payload: Prisma.$SpecialEventPayload<ExtArgs>
        fields: Prisma.SpecialEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecialEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecialEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          findFirst: {
            args: Prisma.SpecialEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecialEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          findMany: {
            args: Prisma.SpecialEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>[]
          }
          create: {
            args: Prisma.SpecialEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          createMany: {
            args: Prisma.SpecialEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SpecialEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>[]
          }
          delete: {
            args: Prisma.SpecialEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          update: {
            args: Prisma.SpecialEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          deleteMany: {
            args: Prisma.SpecialEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SpecialEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SpecialEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>[]
          }
          upsert: {
            args: Prisma.SpecialEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SpecialEventPayload>
          }
          aggregate: {
            args: Prisma.SpecialEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSpecialEvent>
          }
          groupBy: {
            args: Prisma.SpecialEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<SpecialEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecialEventCountArgs<ExtArgs>
            result: $Utils.Optional<SpecialEventCountAggregateOutputType> | number
          }
        }
      }
      EventParticipant: {
        payload: Prisma.$EventParticipantPayload<ExtArgs>
        fields: Prisma.EventParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          findFirst: {
            args: Prisma.EventParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          findMany: {
            args: Prisma.EventParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>[]
          }
          create: {
            args: Prisma.EventParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          createMany: {
            args: Prisma.EventParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>[]
          }
          delete: {
            args: Prisma.EventParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          update: {
            args: Prisma.EventParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          deleteMany: {
            args: Prisma.EventParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>[]
          }
          upsert: {
            args: Prisma.EventParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventParticipantPayload>
          }
          aggregate: {
            args: Prisma.EventParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventParticipant>
          }
          groupBy: {
            args: Prisma.EventParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<EventParticipantCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      SampleQuestion: {
        payload: Prisma.$SampleQuestionPayload<ExtArgs>
        fields: Prisma.SampleQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          findFirst: {
            args: Prisma.SampleQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          findMany: {
            args: Prisma.SampleQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>[]
          }
          create: {
            args: Prisma.SampleQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          createMany: {
            args: Prisma.SampleQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>[]
          }
          delete: {
            args: Prisma.SampleQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          update: {
            args: Prisma.SampleQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          deleteMany: {
            args: Prisma.SampleQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SampleQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>[]
          }
          upsert: {
            args: Prisma.SampleQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleQuestionPayload>
          }
          aggregate: {
            args: Prisma.SampleQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSampleQuestion>
          }
          groupBy: {
            args: Prisma.SampleQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<SampleQuestionCountAggregateOutputType> | number
          }
        }
      }
      Homework: {
        payload: Prisma.$HomeworkPayload<ExtArgs>
        fields: Prisma.HomeworkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeworkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeworkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          findFirst: {
            args: Prisma.HomeworkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeworkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          findMany: {
            args: Prisma.HomeworkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          create: {
            args: Prisma.HomeworkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          createMany: {
            args: Prisma.HomeworkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HomeworkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          delete: {
            args: Prisma.HomeworkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          update: {
            args: Prisma.HomeworkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          deleteMany: {
            args: Prisma.HomeworkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HomeworkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HomeworkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>[]
          }
          upsert: {
            args: Prisma.HomeworkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkPayload>
          }
          aggregate: {
            args: Prisma.HomeworkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHomework>
          }
          groupBy: {
            args: Prisma.HomeworkGroupByArgs<ExtArgs>
            result: $Utils.Optional<HomeworkGroupByOutputType>[]
          }
          count: {
            args: Prisma.HomeworkCountArgs<ExtArgs>
            result: $Utils.Optional<HomeworkCountAggregateOutputType> | number
          }
        }
      }
      HomeworkSubmission: {
        payload: Prisma.$HomeworkSubmissionPayload<ExtArgs>
        fields: Prisma.HomeworkSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeworkSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeworkSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          findFirst: {
            args: Prisma.HomeworkSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeworkSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          findMany: {
            args: Prisma.HomeworkSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>[]
          }
          create: {
            args: Prisma.HomeworkSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          createMany: {
            args: Prisma.HomeworkSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HomeworkSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>[]
          }
          delete: {
            args: Prisma.HomeworkSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          update: {
            args: Prisma.HomeworkSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.HomeworkSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HomeworkSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HomeworkSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.HomeworkSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkSubmissionPayload>
          }
          aggregate: {
            args: Prisma.HomeworkSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHomeworkSubmission>
          }
          groupBy: {
            args: Prisma.HomeworkSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<HomeworkSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.HomeworkSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<HomeworkSubmissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    class?: ClassOmit
    classStudent?: ClassStudentOmit
    doubt?: DoubtOmit
    appointment?: AppointmentOmit
    test?: TestOmit
    section?: SectionOmit
    question?: QuestionOmit
    submission?: SubmissionOmit
    notification?: NotificationOmit
    classSchedule?: ClassScheduleOmit
    batch?: BatchOmit
    specialEvent?: SpecialEventOmit
    eventParticipant?: EventParticipantOmit
    attendance?: AttendanceOmit
    sampleQuestion?: SampleQuestionOmit
    homework?: HomeworkOmit
    homeworkSubmission?: HomeworkSubmissionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    doubts: number
    appointments: number
    testsCreated: number
    submissions: number
    classes: number
    notifications: number
    scheduledClasses: number
    createdClasses: number
    studentAttendance: number
    teacherAttendance: number
    eventParticipations: number
    batchesTeaching: number
    homeworkAssigned: number
    homeworkSubmissions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doubts?: boolean | UserCountOutputTypeCountDoubtsArgs
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    testsCreated?: boolean | UserCountOutputTypeCountTestsCreatedArgs
    submissions?: boolean | UserCountOutputTypeCountSubmissionsArgs
    classes?: boolean | UserCountOutputTypeCountClassesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    scheduledClasses?: boolean | UserCountOutputTypeCountScheduledClassesArgs
    createdClasses?: boolean | UserCountOutputTypeCountCreatedClassesArgs
    studentAttendance?: boolean | UserCountOutputTypeCountStudentAttendanceArgs
    teacherAttendance?: boolean | UserCountOutputTypeCountTeacherAttendanceArgs
    eventParticipations?: boolean | UserCountOutputTypeCountEventParticipationsArgs
    batchesTeaching?: boolean | UserCountOutputTypeCountBatchesTeachingArgs
    homeworkAssigned?: boolean | UserCountOutputTypeCountHomeworkAssignedArgs
    homeworkSubmissions?: boolean | UserCountOutputTypeCountHomeworkSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDoubtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoubtWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTestsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScheduledClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeacherAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBatchesTeachingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHomeworkAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHomeworkSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkSubmissionWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    students: number
    tests: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
    tests?: boolean | ClassCountOutputTypeCountTestsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
  }


  /**
   * Count Type TestCountOutputType
   */

  export type TestCountOutputType = {
    sections: number
    submissions: number
  }

  export type TestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | TestCountOutputTypeCountSectionsArgs
    submissions?: boolean | TestCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCountOutputType
     */
    select?: TestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }


  /**
   * Count Type SectionCountOutputType
   */

  export type SectionCountOutputType = {
    questions: number
  }

  export type SectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SectionCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionCountOutputType
     */
    select?: SectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionCountOutputType without action
   */
  export type SectionCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type ClassScheduleCountOutputType
   */

  export type ClassScheduleCountOutputType = {
    attendance: number
  }

  export type ClassScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | ClassScheduleCountOutputTypeCountAttendanceArgs
  }

  // Custom InputTypes
  /**
   * ClassScheduleCountOutputType without action
   */
  export type ClassScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassScheduleCountOutputType
     */
    select?: ClassScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassScheduleCountOutputType without action
   */
  export type ClassScheduleCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }


  /**
   * Count Type BatchCountOutputType
   */

  export type BatchCountOutputType = {
    events: number
    teachersAssigned: number
  }

  export type BatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | BatchCountOutputTypeCountEventsArgs
    teachersAssigned?: boolean | BatchCountOutputTypeCountTeachersAssignedArgs
  }

  // Custom InputTypes
  /**
   * BatchCountOutputType without action
   */
  export type BatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatchCountOutputType
     */
    select?: BatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BatchCountOutputType without action
   */
  export type BatchCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialEventWhereInput
  }

  /**
   * BatchCountOutputType without action
   */
  export type BatchCountOutputTypeCountTeachersAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type SpecialEventCountOutputType
   */

  export type SpecialEventCountOutputType = {
    batches: number
    participants: number
  }

  export type SpecialEventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | SpecialEventCountOutputTypeCountBatchesArgs
    participants?: boolean | SpecialEventCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * SpecialEventCountOutputType without action
   */
  export type SpecialEventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEventCountOutputType
     */
    select?: SpecialEventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SpecialEventCountOutputType without action
   */
  export type SpecialEventCountOutputTypeCountBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
  }

  /**
   * SpecialEventCountOutputType without action
   */
  export type SpecialEventCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipantWhereInput
  }


  /**
   * Count Type HomeworkCountOutputType
   */

  export type HomeworkCountOutputType = {
    submissions: number
  }

  export type HomeworkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | HomeworkCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * HomeworkCountOutputType without action
   */
  export type HomeworkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCountOutputType
     */
    select?: HomeworkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HomeworkCountOutputType without action
   */
  export type HomeworkCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkSubmissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    uid: string | null
    password: string | null
    fullName: string | null
    role: $Enums.Role | null
    batchType: $Enums.BatchType | null
    subjects: string | null
    roomNumber: string | null
    avatar: string | null
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    password: string | null
    fullName: string | null
    role: $Enums.Role | null
    batchType: $Enums.BatchType | null
    subjects: string | null
    roomNumber: string | null
    avatar: string | null
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    isActive: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    uid: number
    password: number
    fullName: number
    role: number
    batchType: number
    subjects: number
    roomNumber: number
    avatar: number
    phone: number
    address: number
    dateOfBirth: number
    isActive: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    uid?: true
    password?: true
    fullName?: true
    role?: true
    batchType?: true
    subjects?: true
    roomNumber?: true
    avatar?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    uid?: true
    password?: true
    fullName?: true
    role?: true
    batchType?: true
    subjects?: true
    roomNumber?: true
    avatar?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    uid?: true
    password?: true
    fullName?: true
    role?: true
    batchType?: true
    subjects?: true
    roomNumber?: true
    avatar?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    isActive?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType: $Enums.BatchType | null
    subjects: string | null
    roomNumber: string | null
    avatar: string | null
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    isActive: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    batchType?: boolean
    subjects?: boolean
    roomNumber?: boolean
    avatar?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doubts?: boolean | User$doubtsArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    testsCreated?: boolean | User$testsCreatedArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    classes?: boolean | User$classesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    scheduledClasses?: boolean | User$scheduledClassesArgs<ExtArgs>
    createdClasses?: boolean | User$createdClassesArgs<ExtArgs>
    studentAttendance?: boolean | User$studentAttendanceArgs<ExtArgs>
    teacherAttendance?: boolean | User$teacherAttendanceArgs<ExtArgs>
    eventParticipations?: boolean | User$eventParticipationsArgs<ExtArgs>
    batchesTeaching?: boolean | User$batchesTeachingArgs<ExtArgs>
    homeworkAssigned?: boolean | User$homeworkAssignedArgs<ExtArgs>
    homeworkSubmissions?: boolean | User$homeworkSubmissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    batchType?: boolean
    subjects?: boolean
    roomNumber?: boolean
    avatar?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uid?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    batchType?: boolean
    subjects?: boolean
    roomNumber?: boolean
    avatar?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    uid?: boolean
    password?: boolean
    fullName?: boolean
    role?: boolean
    batchType?: boolean
    subjects?: boolean
    roomNumber?: boolean
    avatar?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "uid" | "password" | "fullName" | "role" | "batchType" | "subjects" | "roomNumber" | "avatar" | "phone" | "address" | "dateOfBirth" | "isActive" | "lastLoginAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doubts?: boolean | User$doubtsArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    testsCreated?: boolean | User$testsCreatedArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    classes?: boolean | User$classesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    scheduledClasses?: boolean | User$scheduledClassesArgs<ExtArgs>
    createdClasses?: boolean | User$createdClassesArgs<ExtArgs>
    studentAttendance?: boolean | User$studentAttendanceArgs<ExtArgs>
    teacherAttendance?: boolean | User$teacherAttendanceArgs<ExtArgs>
    eventParticipations?: boolean | User$eventParticipationsArgs<ExtArgs>
    batchesTeaching?: boolean | User$batchesTeachingArgs<ExtArgs>
    homeworkAssigned?: boolean | User$homeworkAssignedArgs<ExtArgs>
    homeworkSubmissions?: boolean | User$homeworkSubmissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      doubts: Prisma.$DoubtPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      testsCreated: Prisma.$TestPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      classes: Prisma.$ClassStudentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      scheduledClasses: Prisma.$ClassSchedulePayload<ExtArgs>[]
      createdClasses: Prisma.$ClassSchedulePayload<ExtArgs>[]
      studentAttendance: Prisma.$AttendancePayload<ExtArgs>[]
      teacherAttendance: Prisma.$AttendancePayload<ExtArgs>[]
      eventParticipations: Prisma.$EventParticipantPayload<ExtArgs>[]
      batchesTeaching: Prisma.$BatchPayload<ExtArgs>[]
      homeworkAssigned: Prisma.$HomeworkPayload<ExtArgs>[]
      homeworkSubmissions: Prisma.$HomeworkSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uid: string
      password: string
      fullName: string
      role: $Enums.Role
      batchType: $Enums.BatchType | null
      subjects: string | null
      roomNumber: string | null
      avatar: string | null
      phone: string | null
      address: string | null
      dateOfBirth: Date | null
      isActive: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doubts<T extends User$doubtsArgs<ExtArgs> = {}>(args?: Subset<T, User$doubtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testsCreated<T extends User$testsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$testsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends User$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends User$classesArgs<ExtArgs> = {}>(args?: Subset<T, User$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scheduledClasses<T extends User$scheduledClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$scheduledClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdClasses<T extends User$createdClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentAttendance<T extends User$studentAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$studentAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacherAttendance<T extends User$teacherAttendanceArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherAttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eventParticipations<T extends User$eventParticipationsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventParticipationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    batchesTeaching<T extends User$batchesTeachingArgs<ExtArgs> = {}>(args?: Subset<T, User$batchesTeachingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    homeworkAssigned<T extends User$homeworkAssignedArgs<ExtArgs> = {}>(args?: Subset<T, User$homeworkAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    homeworkSubmissions<T extends User$homeworkSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$homeworkSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly uid: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly batchType: FieldRef<"User", 'BatchType'>
    readonly subjects: FieldRef<"User", 'String'>
    readonly roomNumber: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.doubts
   */
  export type User$doubtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    where?: DoubtWhereInput
    orderBy?: DoubtOrderByWithRelationInput | DoubtOrderByWithRelationInput[]
    cursor?: DoubtWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoubtScalarFieldEnum | DoubtScalarFieldEnum[]
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.testsCreated
   */
  export type User$testsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    where?: TestWhereInput
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    cursor?: TestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * User.submissions
   */
  export type User$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * User.classes
   */
  export type User$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    cursor?: ClassStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.scheduledClasses
   */
  export type User$scheduledClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    where?: ClassScheduleWhereInput
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    cursor?: ClassScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScheduleScalarFieldEnum | ClassScheduleScalarFieldEnum[]
  }

  /**
   * User.createdClasses
   */
  export type User$createdClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    where?: ClassScheduleWhereInput
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    cursor?: ClassScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScheduleScalarFieldEnum | ClassScheduleScalarFieldEnum[]
  }

  /**
   * User.studentAttendance
   */
  export type User$studentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User.teacherAttendance
   */
  export type User$teacherAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * User.eventParticipations
   */
  export type User$eventParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    where?: EventParticipantWhereInput
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    cursor?: EventParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventParticipantScalarFieldEnum | EventParticipantScalarFieldEnum[]
  }

  /**
   * User.batchesTeaching
   */
  export type User$batchesTeachingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    where?: BatchWhereInput
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    cursor?: BatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }

  /**
   * User.homeworkAssigned
   */
  export type User$homeworkAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    where?: HomeworkWhereInput
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    cursor?: HomeworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * User.homeworkSubmissions
   */
  export type User$homeworkSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    where?: HomeworkSubmissionWhereInput
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    cursor?: HomeworkSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkSubmissionScalarFieldEnum | HomeworkSubmissionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subject: string | null
    grade: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    subject: string | null
    grade: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    description: number
    subject: number
    grade: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    grade?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    grade?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    subject?: true
    grade?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    name: string
    description: string | null
    subject: string
    grade: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    grade?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    students?: boolean | Class$studentsArgs<ExtArgs>
    tests?: boolean | Class$testsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    grade?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    grade?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    subject?: boolean
    grade?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "subject" | "grade" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Class$studentsArgs<ExtArgs>
    tests?: boolean | Class$testsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      students: Prisma.$ClassStudentPayload<ExtArgs>[]
      tests: Prisma.$TestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      subject: string
      grade: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tests<T extends Class$testsArgs<ExtArgs> = {}>(args?: Subset<T, Class$testsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly description: FieldRef<"Class", 'String'>
    readonly subject: FieldRef<"Class", 'String'>
    readonly grade: FieldRef<"Class", 'String'>
    readonly isActive: FieldRef<"Class", 'Boolean'>
    readonly createdAt: FieldRef<"Class", 'DateTime'>
    readonly updatedAt: FieldRef<"Class", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    cursor?: ClassStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * Class.tests
   */
  export type Class$testsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    where?: TestWhereInput
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    cursor?: TestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model ClassStudent
   */

  export type AggregateClassStudent = {
    _count: ClassStudentCountAggregateOutputType | null
    _min: ClassStudentMinAggregateOutputType | null
    _max: ClassStudentMaxAggregateOutputType | null
  }

  export type ClassStudentMinAggregateOutputType = {
    id: string | null
    classId: string | null
    studentId: string | null
    joinedAt: Date | null
  }

  export type ClassStudentMaxAggregateOutputType = {
    id: string | null
    classId: string | null
    studentId: string | null
    joinedAt: Date | null
  }

  export type ClassStudentCountAggregateOutputType = {
    id: number
    classId: number
    studentId: number
    joinedAt: number
    _all: number
  }


  export type ClassStudentMinAggregateInputType = {
    id?: true
    classId?: true
    studentId?: true
    joinedAt?: true
  }

  export type ClassStudentMaxAggregateInputType = {
    id?: true
    classId?: true
    studentId?: true
    joinedAt?: true
  }

  export type ClassStudentCountAggregateInputType = {
    id?: true
    classId?: true
    studentId?: true
    joinedAt?: true
    _all?: true
  }

  export type ClassStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassStudent to aggregate.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassStudents
    **/
    _count?: true | ClassStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassStudentMaxAggregateInputType
  }

  export type GetClassStudentAggregateType<T extends ClassStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateClassStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassStudent[P]>
      : GetScalarType<T[P], AggregateClassStudent[P]>
  }




  export type ClassStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassStudentWhereInput
    orderBy?: ClassStudentOrderByWithAggregationInput | ClassStudentOrderByWithAggregationInput[]
    by: ClassStudentScalarFieldEnum[] | ClassStudentScalarFieldEnum
    having?: ClassStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassStudentCountAggregateInputType | true
    _min?: ClassStudentMinAggregateInputType
    _max?: ClassStudentMaxAggregateInputType
  }

  export type ClassStudentGroupByOutputType = {
    id: string
    classId: string
    studentId: string
    joinedAt: Date
    _count: ClassStudentCountAggregateOutputType | null
    _min: ClassStudentMinAggregateOutputType | null
    _max: ClassStudentMaxAggregateOutputType | null
  }

  type GetClassStudentGroupByPayload<T extends ClassStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassStudentGroupByOutputType[P]>
            : GetScalarType<T[P], ClassStudentGroupByOutputType[P]>
        }
      >
    >


  export type ClassStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    studentId?: boolean
    joinedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classStudent"]>

  export type ClassStudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    studentId?: boolean
    joinedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classStudent"]>

  export type ClassStudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    studentId?: boolean
    joinedAt?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classStudent"]>

  export type ClassStudentSelectScalar = {
    id?: boolean
    classId?: boolean
    studentId?: boolean
    joinedAt?: boolean
  }

  export type ClassStudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId" | "studentId" | "joinedAt", ExtArgs["result"]["classStudent"]>
  export type ClassStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ClassStudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ClassStudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClassStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassStudent"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classId: string
      studentId: string
      joinedAt: Date
    }, ExtArgs["result"]["classStudent"]>
    composites: {}
  }

  type ClassStudentGetPayload<S extends boolean | null | undefined | ClassStudentDefaultArgs> = $Result.GetResult<Prisma.$ClassStudentPayload, S>

  type ClassStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassStudentCountAggregateInputType | true
    }

  export interface ClassStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassStudent'], meta: { name: 'ClassStudent' } }
    /**
     * Find zero or one ClassStudent that matches the filter.
     * @param {ClassStudentFindUniqueArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassStudentFindUniqueArgs>(args: SelectSubset<T, ClassStudentFindUniqueArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassStudent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassStudentFindUniqueOrThrowArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindFirstArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassStudentFindFirstArgs>(args?: SelectSubset<T, ClassStudentFindFirstArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindFirstOrThrowArgs} args - Arguments to find a ClassStudent
     * @example
     * // Get one ClassStudent
     * const classStudent = await prisma.classStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassStudents
     * const classStudents = await prisma.classStudent.findMany()
     * 
     * // Get first 10 ClassStudents
     * const classStudents = await prisma.classStudent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classStudentWithIdOnly = await prisma.classStudent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassStudentFindManyArgs>(args?: SelectSubset<T, ClassStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassStudent.
     * @param {ClassStudentCreateArgs} args - Arguments to create a ClassStudent.
     * @example
     * // Create one ClassStudent
     * const ClassStudent = await prisma.classStudent.create({
     *   data: {
     *     // ... data to create a ClassStudent
     *   }
     * })
     * 
     */
    create<T extends ClassStudentCreateArgs>(args: SelectSubset<T, ClassStudentCreateArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassStudents.
     * @param {ClassStudentCreateManyArgs} args - Arguments to create many ClassStudents.
     * @example
     * // Create many ClassStudents
     * const classStudent = await prisma.classStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassStudentCreateManyArgs>(args?: SelectSubset<T, ClassStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassStudents and returns the data saved in the database.
     * @param {ClassStudentCreateManyAndReturnArgs} args - Arguments to create many ClassStudents.
     * @example
     * // Create many ClassStudents
     * const classStudent = await prisma.classStudent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassStudents and only return the `id`
     * const classStudentWithIdOnly = await prisma.classStudent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassStudentCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassStudent.
     * @param {ClassStudentDeleteArgs} args - Arguments to delete one ClassStudent.
     * @example
     * // Delete one ClassStudent
     * const ClassStudent = await prisma.classStudent.delete({
     *   where: {
     *     // ... filter to delete one ClassStudent
     *   }
     * })
     * 
     */
    delete<T extends ClassStudentDeleteArgs>(args: SelectSubset<T, ClassStudentDeleteArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassStudent.
     * @param {ClassStudentUpdateArgs} args - Arguments to update one ClassStudent.
     * @example
     * // Update one ClassStudent
     * const classStudent = await prisma.classStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassStudentUpdateArgs>(args: SelectSubset<T, ClassStudentUpdateArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassStudents.
     * @param {ClassStudentDeleteManyArgs} args - Arguments to filter ClassStudents to delete.
     * @example
     * // Delete a few ClassStudents
     * const { count } = await prisma.classStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassStudentDeleteManyArgs>(args?: SelectSubset<T, ClassStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassStudents
     * const classStudent = await prisma.classStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassStudentUpdateManyArgs>(args: SelectSubset<T, ClassStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassStudents and returns the data updated in the database.
     * @param {ClassStudentUpdateManyAndReturnArgs} args - Arguments to update many ClassStudents.
     * @example
     * // Update many ClassStudents
     * const classStudent = await prisma.classStudent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassStudents and only return the `id`
     * const classStudentWithIdOnly = await prisma.classStudent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassStudentUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassStudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassStudent.
     * @param {ClassStudentUpsertArgs} args - Arguments to update or create a ClassStudent.
     * @example
     * // Update or create a ClassStudent
     * const classStudent = await prisma.classStudent.upsert({
     *   create: {
     *     // ... data to create a ClassStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassStudent we want to update
     *   }
     * })
     */
    upsert<T extends ClassStudentUpsertArgs>(args: SelectSubset<T, ClassStudentUpsertArgs<ExtArgs>>): Prisma__ClassStudentClient<$Result.GetResult<Prisma.$ClassStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentCountArgs} args - Arguments to filter ClassStudents to count.
     * @example
     * // Count the number of ClassStudents
     * const count = await prisma.classStudent.count({
     *   where: {
     *     // ... the filter for the ClassStudents we want to count
     *   }
     * })
    **/
    count<T extends ClassStudentCountArgs>(
      args?: Subset<T, ClassStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassStudentAggregateArgs>(args: Subset<T, ClassStudentAggregateArgs>): Prisma.PrismaPromise<GetClassStudentAggregateType<T>>

    /**
     * Group by ClassStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassStudentGroupByArgs['orderBy'] }
        : { orderBy?: ClassStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassStudent model
   */
  readonly fields: ClassStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassStudent model
   */
  interface ClassStudentFieldRefs {
    readonly id: FieldRef<"ClassStudent", 'String'>
    readonly classId: FieldRef<"ClassStudent", 'String'>
    readonly studentId: FieldRef<"ClassStudent", 'String'>
    readonly joinedAt: FieldRef<"ClassStudent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassStudent findUnique
   */
  export type ClassStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent findUniqueOrThrow
   */
  export type ClassStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent findFirst
   */
  export type ClassStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassStudents.
     */
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent findFirstOrThrow
   */
  export type ClassStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudent to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassStudents.
     */
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent findMany
   */
  export type ClassStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter, which ClassStudents to fetch.
     */
    where?: ClassStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassStudents to fetch.
     */
    orderBy?: ClassStudentOrderByWithRelationInput | ClassStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassStudents.
     */
    cursor?: ClassStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassStudents.
     */
    skip?: number
    distinct?: ClassStudentScalarFieldEnum | ClassStudentScalarFieldEnum[]
  }

  /**
   * ClassStudent create
   */
  export type ClassStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassStudent.
     */
    data: XOR<ClassStudentCreateInput, ClassStudentUncheckedCreateInput>
  }

  /**
   * ClassStudent createMany
   */
  export type ClassStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassStudents.
     */
    data: ClassStudentCreateManyInput | ClassStudentCreateManyInput[]
  }

  /**
   * ClassStudent createManyAndReturn
   */
  export type ClassStudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * The data used to create many ClassStudents.
     */
    data: ClassStudentCreateManyInput | ClassStudentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassStudent update
   */
  export type ClassStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassStudent.
     */
    data: XOR<ClassStudentUpdateInput, ClassStudentUncheckedUpdateInput>
    /**
     * Choose, which ClassStudent to update.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent updateMany
   */
  export type ClassStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassStudents.
     */
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyInput>
    /**
     * Filter which ClassStudents to update
     */
    where?: ClassStudentWhereInput
    /**
     * Limit how many ClassStudents to update.
     */
    limit?: number
  }

  /**
   * ClassStudent updateManyAndReturn
   */
  export type ClassStudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * The data used to update ClassStudents.
     */
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyInput>
    /**
     * Filter which ClassStudents to update
     */
    where?: ClassStudentWhereInput
    /**
     * Limit how many ClassStudents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassStudent upsert
   */
  export type ClassStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassStudent to update in case it exists.
     */
    where: ClassStudentWhereUniqueInput
    /**
     * In case the ClassStudent found by the `where` argument doesn't exist, create a new ClassStudent with this data.
     */
    create: XOR<ClassStudentCreateInput, ClassStudentUncheckedCreateInput>
    /**
     * In case the ClassStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassStudentUpdateInput, ClassStudentUncheckedUpdateInput>
  }

  /**
   * ClassStudent delete
   */
  export type ClassStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
    /**
     * Filter which ClassStudent to delete.
     */
    where: ClassStudentWhereUniqueInput
  }

  /**
   * ClassStudent deleteMany
   */
  export type ClassStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassStudents to delete
     */
    where?: ClassStudentWhereInput
    /**
     * Limit how many ClassStudents to delete.
     */
    limit?: number
  }

  /**
   * ClassStudent without action
   */
  export type ClassStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassStudent
     */
    select?: ClassStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassStudent
     */
    omit?: ClassStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassStudentInclude<ExtArgs> | null
  }


  /**
   * Model Doubt
   */

  export type AggregateDoubt = {
    _count: DoubtCountAggregateOutputType | null
    _min: DoubtMinAggregateOutputType | null
    _max: DoubtMaxAggregateOutputType | null
  }

  export type DoubtMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    subject: string | null
    description: string | null
    imageUrl: string | null
    priority: string | null
    status: $Enums.DoubtStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoubtMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    subject: string | null
    description: string | null
    imageUrl: string | null
    priority: string | null
    status: $Enums.DoubtStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoubtCountAggregateOutputType = {
    id: number
    studentId: number
    subject: number
    description: number
    imageUrl: number
    priority: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoubtMinAggregateInputType = {
    id?: true
    studentId?: true
    subject?: true
    description?: true
    imageUrl?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoubtMaxAggregateInputType = {
    id?: true
    studentId?: true
    subject?: true
    description?: true
    imageUrl?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoubtCountAggregateInputType = {
    id?: true
    studentId?: true
    subject?: true
    description?: true
    imageUrl?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoubtAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doubt to aggregate.
     */
    where?: DoubtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doubts to fetch.
     */
    orderBy?: DoubtOrderByWithRelationInput | DoubtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoubtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doubts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doubts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doubts
    **/
    _count?: true | DoubtCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoubtMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoubtMaxAggregateInputType
  }

  export type GetDoubtAggregateType<T extends DoubtAggregateArgs> = {
        [P in keyof T & keyof AggregateDoubt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoubt[P]>
      : GetScalarType<T[P], AggregateDoubt[P]>
  }




  export type DoubtGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoubtWhereInput
    orderBy?: DoubtOrderByWithAggregationInput | DoubtOrderByWithAggregationInput[]
    by: DoubtScalarFieldEnum[] | DoubtScalarFieldEnum
    having?: DoubtScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoubtCountAggregateInputType | true
    _min?: DoubtMinAggregateInputType
    _max?: DoubtMaxAggregateInputType
  }

  export type DoubtGroupByOutputType = {
    id: string
    studentId: string
    subject: string
    description: string
    imageUrl: string | null
    priority: string
    status: $Enums.DoubtStatus
    createdAt: Date
    updatedAt: Date
    _count: DoubtCountAggregateOutputType | null
    _min: DoubtMinAggregateOutputType | null
    _max: DoubtMaxAggregateOutputType | null
  }

  type GetDoubtGroupByPayload<T extends DoubtGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoubtGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoubtGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoubtGroupByOutputType[P]>
            : GetScalarType<T[P], DoubtGroupByOutputType[P]>
        }
      >
    >


  export type DoubtSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    subject?: boolean
    description?: boolean
    imageUrl?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | Doubt$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["doubt"]>

  export type DoubtSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    subject?: boolean
    description?: boolean
    imageUrl?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doubt"]>

  export type DoubtSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    subject?: boolean
    description?: boolean
    imageUrl?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doubt"]>

  export type DoubtSelectScalar = {
    id?: boolean
    studentId?: boolean
    subject?: boolean
    description?: boolean
    imageUrl?: boolean
    priority?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoubtOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "subject" | "description" | "imageUrl" | "priority" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["doubt"]>
  export type DoubtInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    appointment?: boolean | Doubt$appointmentArgs<ExtArgs>
  }
  export type DoubtIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DoubtIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DoubtPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doubt"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      subject: string
      description: string
      imageUrl: string | null
      priority: string
      status: $Enums.DoubtStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doubt"]>
    composites: {}
  }

  type DoubtGetPayload<S extends boolean | null | undefined | DoubtDefaultArgs> = $Result.GetResult<Prisma.$DoubtPayload, S>

  type DoubtCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoubtFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoubtCountAggregateInputType | true
    }

  export interface DoubtDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doubt'], meta: { name: 'Doubt' } }
    /**
     * Find zero or one Doubt that matches the filter.
     * @param {DoubtFindUniqueArgs} args - Arguments to find a Doubt
     * @example
     * // Get one Doubt
     * const doubt = await prisma.doubt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoubtFindUniqueArgs>(args: SelectSubset<T, DoubtFindUniqueArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Doubt that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoubtFindUniqueOrThrowArgs} args - Arguments to find a Doubt
     * @example
     * // Get one Doubt
     * const doubt = await prisma.doubt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoubtFindUniqueOrThrowArgs>(args: SelectSubset<T, DoubtFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doubt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtFindFirstArgs} args - Arguments to find a Doubt
     * @example
     * // Get one Doubt
     * const doubt = await prisma.doubt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoubtFindFirstArgs>(args?: SelectSubset<T, DoubtFindFirstArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doubt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtFindFirstOrThrowArgs} args - Arguments to find a Doubt
     * @example
     * // Get one Doubt
     * const doubt = await prisma.doubt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoubtFindFirstOrThrowArgs>(args?: SelectSubset<T, DoubtFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doubts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doubts
     * const doubts = await prisma.doubt.findMany()
     * 
     * // Get first 10 Doubts
     * const doubts = await prisma.doubt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doubtWithIdOnly = await prisma.doubt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoubtFindManyArgs>(args?: SelectSubset<T, DoubtFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Doubt.
     * @param {DoubtCreateArgs} args - Arguments to create a Doubt.
     * @example
     * // Create one Doubt
     * const Doubt = await prisma.doubt.create({
     *   data: {
     *     // ... data to create a Doubt
     *   }
     * })
     * 
     */
    create<T extends DoubtCreateArgs>(args: SelectSubset<T, DoubtCreateArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doubts.
     * @param {DoubtCreateManyArgs} args - Arguments to create many Doubts.
     * @example
     * // Create many Doubts
     * const doubt = await prisma.doubt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoubtCreateManyArgs>(args?: SelectSubset<T, DoubtCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doubts and returns the data saved in the database.
     * @param {DoubtCreateManyAndReturnArgs} args - Arguments to create many Doubts.
     * @example
     * // Create many Doubts
     * const doubt = await prisma.doubt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doubts and only return the `id`
     * const doubtWithIdOnly = await prisma.doubt.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoubtCreateManyAndReturnArgs>(args?: SelectSubset<T, DoubtCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Doubt.
     * @param {DoubtDeleteArgs} args - Arguments to delete one Doubt.
     * @example
     * // Delete one Doubt
     * const Doubt = await prisma.doubt.delete({
     *   where: {
     *     // ... filter to delete one Doubt
     *   }
     * })
     * 
     */
    delete<T extends DoubtDeleteArgs>(args: SelectSubset<T, DoubtDeleteArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Doubt.
     * @param {DoubtUpdateArgs} args - Arguments to update one Doubt.
     * @example
     * // Update one Doubt
     * const doubt = await prisma.doubt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoubtUpdateArgs>(args: SelectSubset<T, DoubtUpdateArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doubts.
     * @param {DoubtDeleteManyArgs} args - Arguments to filter Doubts to delete.
     * @example
     * // Delete a few Doubts
     * const { count } = await prisma.doubt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoubtDeleteManyArgs>(args?: SelectSubset<T, DoubtDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doubts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doubts
     * const doubt = await prisma.doubt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoubtUpdateManyArgs>(args: SelectSubset<T, DoubtUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doubts and returns the data updated in the database.
     * @param {DoubtUpdateManyAndReturnArgs} args - Arguments to update many Doubts.
     * @example
     * // Update many Doubts
     * const doubt = await prisma.doubt.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Doubts and only return the `id`
     * const doubtWithIdOnly = await prisma.doubt.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoubtUpdateManyAndReturnArgs>(args: SelectSubset<T, DoubtUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Doubt.
     * @param {DoubtUpsertArgs} args - Arguments to update or create a Doubt.
     * @example
     * // Update or create a Doubt
     * const doubt = await prisma.doubt.upsert({
     *   create: {
     *     // ... data to create a Doubt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doubt we want to update
     *   }
     * })
     */
    upsert<T extends DoubtUpsertArgs>(args: SelectSubset<T, DoubtUpsertArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doubts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtCountArgs} args - Arguments to filter Doubts to count.
     * @example
     * // Count the number of Doubts
     * const count = await prisma.doubt.count({
     *   where: {
     *     // ... the filter for the Doubts we want to count
     *   }
     * })
    **/
    count<T extends DoubtCountArgs>(
      args?: Subset<T, DoubtCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoubtCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doubt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoubtAggregateArgs>(args: Subset<T, DoubtAggregateArgs>): Prisma.PrismaPromise<GetDoubtAggregateType<T>>

    /**
     * Group by Doubt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubtGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoubtGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoubtGroupByArgs['orderBy'] }
        : { orderBy?: DoubtGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoubtGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoubtGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doubt model
   */
  readonly fields: DoubtFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doubt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoubtClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    appointment<T extends Doubt$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Doubt$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doubt model
   */
  interface DoubtFieldRefs {
    readonly id: FieldRef<"Doubt", 'String'>
    readonly studentId: FieldRef<"Doubt", 'String'>
    readonly subject: FieldRef<"Doubt", 'String'>
    readonly description: FieldRef<"Doubt", 'String'>
    readonly imageUrl: FieldRef<"Doubt", 'String'>
    readonly priority: FieldRef<"Doubt", 'String'>
    readonly status: FieldRef<"Doubt", 'DoubtStatus'>
    readonly createdAt: FieldRef<"Doubt", 'DateTime'>
    readonly updatedAt: FieldRef<"Doubt", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Doubt findUnique
   */
  export type DoubtFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter, which Doubt to fetch.
     */
    where: DoubtWhereUniqueInput
  }

  /**
   * Doubt findUniqueOrThrow
   */
  export type DoubtFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter, which Doubt to fetch.
     */
    where: DoubtWhereUniqueInput
  }

  /**
   * Doubt findFirst
   */
  export type DoubtFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter, which Doubt to fetch.
     */
    where?: DoubtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doubts to fetch.
     */
    orderBy?: DoubtOrderByWithRelationInput | DoubtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doubts.
     */
    cursor?: DoubtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doubts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doubts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doubts.
     */
    distinct?: DoubtScalarFieldEnum | DoubtScalarFieldEnum[]
  }

  /**
   * Doubt findFirstOrThrow
   */
  export type DoubtFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter, which Doubt to fetch.
     */
    where?: DoubtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doubts to fetch.
     */
    orderBy?: DoubtOrderByWithRelationInput | DoubtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doubts.
     */
    cursor?: DoubtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doubts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doubts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doubts.
     */
    distinct?: DoubtScalarFieldEnum | DoubtScalarFieldEnum[]
  }

  /**
   * Doubt findMany
   */
  export type DoubtFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter, which Doubts to fetch.
     */
    where?: DoubtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doubts to fetch.
     */
    orderBy?: DoubtOrderByWithRelationInput | DoubtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doubts.
     */
    cursor?: DoubtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doubts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doubts.
     */
    skip?: number
    distinct?: DoubtScalarFieldEnum | DoubtScalarFieldEnum[]
  }

  /**
   * Doubt create
   */
  export type DoubtCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * The data needed to create a Doubt.
     */
    data: XOR<DoubtCreateInput, DoubtUncheckedCreateInput>
  }

  /**
   * Doubt createMany
   */
  export type DoubtCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doubts.
     */
    data: DoubtCreateManyInput | DoubtCreateManyInput[]
  }

  /**
   * Doubt createManyAndReturn
   */
  export type DoubtCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * The data used to create many Doubts.
     */
    data: DoubtCreateManyInput | DoubtCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doubt update
   */
  export type DoubtUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * The data needed to update a Doubt.
     */
    data: XOR<DoubtUpdateInput, DoubtUncheckedUpdateInput>
    /**
     * Choose, which Doubt to update.
     */
    where: DoubtWhereUniqueInput
  }

  /**
   * Doubt updateMany
   */
  export type DoubtUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doubts.
     */
    data: XOR<DoubtUpdateManyMutationInput, DoubtUncheckedUpdateManyInput>
    /**
     * Filter which Doubts to update
     */
    where?: DoubtWhereInput
    /**
     * Limit how many Doubts to update.
     */
    limit?: number
  }

  /**
   * Doubt updateManyAndReturn
   */
  export type DoubtUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * The data used to update Doubts.
     */
    data: XOR<DoubtUpdateManyMutationInput, DoubtUncheckedUpdateManyInput>
    /**
     * Filter which Doubts to update
     */
    where?: DoubtWhereInput
    /**
     * Limit how many Doubts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Doubt upsert
   */
  export type DoubtUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * The filter to search for the Doubt to update in case it exists.
     */
    where: DoubtWhereUniqueInput
    /**
     * In case the Doubt found by the `where` argument doesn't exist, create a new Doubt with this data.
     */
    create: XOR<DoubtCreateInput, DoubtUncheckedCreateInput>
    /**
     * In case the Doubt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoubtUpdateInput, DoubtUncheckedUpdateInput>
  }

  /**
   * Doubt delete
   */
  export type DoubtDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
    /**
     * Filter which Doubt to delete.
     */
    where: DoubtWhereUniqueInput
  }

  /**
   * Doubt deleteMany
   */
  export type DoubtDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doubts to delete
     */
    where?: DoubtWhereInput
    /**
     * Limit how many Doubts to delete.
     */
    limit?: number
  }

  /**
   * Doubt.appointment
   */
  export type Doubt$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * Doubt without action
   */
  export type DoubtDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doubt
     */
    select?: DoubtSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doubt
     */
    omit?: DoubtOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoubtInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    duration: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    duration: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    doubtId: string | null
    teacherId: string | null
    scheduledAt: Date | null
    duration: number | null
    notes: string | null
    meetingLink: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    doubtId: string | null
    teacherId: string | null
    scheduledAt: Date | null
    duration: number | null
    notes: string | null
    meetingLink: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    doubtId: number
    teacherId: number
    scheduledAt: number
    duration: number
    notes: number
    meetingLink: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    duration?: true
  }

  export type AppointmentSumAggregateInputType = {
    duration?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    doubtId?: true
    teacherId?: true
    scheduledAt?: true
    duration?: true
    notes?: true
    meetingLink?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    doubtId?: true
    teacherId?: true
    scheduledAt?: true
    duration?: true
    notes?: true
    meetingLink?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    doubtId?: true
    teacherId?: true
    scheduledAt?: true
    duration?: true
    notes?: true
    meetingLink?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    doubtId: string
    teacherId: string
    scheduledAt: Date
    duration: number
    notes: string | null
    meetingLink: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doubtId?: boolean
    teacherId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    notes?: boolean
    meetingLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doubtId?: boolean
    teacherId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    notes?: boolean
    meetingLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doubtId?: boolean
    teacherId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    notes?: boolean
    meetingLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    doubtId?: boolean
    teacherId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    notes?: boolean
    meetingLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doubtId" | "teacherId" | "scheduledAt" | "duration" | "notes" | "meetingLink" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doubt?: boolean | DoubtDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      doubt: Prisma.$DoubtPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doubtId: string
      teacherId: string
      scheduledAt: Date
      duration: number
      notes: string | null
      meetingLink: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doubt<T extends DoubtDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoubtDefaultArgs<ExtArgs>>): Prisma__DoubtClient<$Result.GetResult<Prisma.$DoubtPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly doubtId: FieldRef<"Appointment", 'String'>
    readonly teacherId: FieldRef<"Appointment", 'String'>
    readonly scheduledAt: FieldRef<"Appointment", 'DateTime'>
    readonly duration: FieldRef<"Appointment", 'Int'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly meetingLink: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Test
   */

  export type AggregateTest = {
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    duration: number | null
    totalMarks: number | null
    passingMarks: number | null
  }

  export type TestSumAggregateOutputType = {
    duration: number | null
    totalMarks: number | null
    passingMarks: number | null
  }

  export type TestMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    classId: string | null
    authorId: string | null
    duration: number | null
    totalMarks: number | null
    passingMarks: number | null
    instructions: string | null
    status: $Enums.TestStatus | null
    scheduledAt: Date | null
    endsAt: Date | null
    allowReview: boolean | null
    shuffleQuestions: boolean | null
    showResults: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    classId: string | null
    authorId: string | null
    duration: number | null
    totalMarks: number | null
    passingMarks: number | null
    instructions: string | null
    status: $Enums.TestStatus | null
    scheduledAt: Date | null
    endsAt: Date | null
    allowReview: boolean | null
    shuffleQuestions: boolean | null
    showResults: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCountAggregateOutputType = {
    id: number
    title: number
    description: number
    classId: number
    authorId: number
    duration: number
    totalMarks: number
    passingMarks: number
    instructions: number
    status: number
    scheduledAt: number
    endsAt: number
    allowReview: number
    shuffleQuestions: number
    showResults: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    duration?: true
    totalMarks?: true
    passingMarks?: true
  }

  export type TestSumAggregateInputType = {
    duration?: true
    totalMarks?: true
    passingMarks?: true
  }

  export type TestMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
    authorId?: true
    duration?: true
    totalMarks?: true
    passingMarks?: true
    instructions?: true
    status?: true
    scheduledAt?: true
    endsAt?: true
    allowReview?: true
    shuffleQuestions?: true
    showResults?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
    authorId?: true
    duration?: true
    totalMarks?: true
    passingMarks?: true
    instructions?: true
    status?: true
    scheduledAt?: true
    endsAt?: true
    allowReview?: true
    shuffleQuestions?: true
    showResults?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    classId?: true
    authorId?: true
    duration?: true
    totalMarks?: true
    passingMarks?: true
    instructions?: true
    status?: true
    scheduledAt?: true
    endsAt?: true
    allowReview?: true
    shuffleQuestions?: true
    showResults?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Test to aggregate.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends TestAggregateArgs> = {
        [P in keyof T & keyof AggregateTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest[P]>
      : GetScalarType<T[P], AggregateTest[P]>
  }




  export type TestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
    orderBy?: TestOrderByWithAggregationInput | TestOrderByWithAggregationInput[]
    by: TestScalarFieldEnum[] | TestScalarFieldEnum
    having?: TestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCountAggregateInputType | true
    _avg?: TestAvgAggregateInputType
    _sum?: TestSumAggregateInputType
    _min?: TestMinAggregateInputType
    _max?: TestMaxAggregateInputType
  }

  export type TestGroupByOutputType = {
    id: string
    title: string
    description: string | null
    classId: string | null
    authorId: string
    duration: number
    totalMarks: number
    passingMarks: number
    instructions: string | null
    status: $Enums.TestStatus
    scheduledAt: Date | null
    endsAt: Date | null
    allowReview: boolean
    shuffleQuestions: boolean
    showResults: boolean
    createdAt: Date
    updatedAt: Date
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  type GetTestGroupByPayload<T extends TestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestGroupByOutputType[P]>
            : GetScalarType<T[P], TestGroupByOutputType[P]>
        }
      >
    >


  export type TestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    authorId?: boolean
    duration?: boolean
    totalMarks?: boolean
    passingMarks?: boolean
    instructions?: boolean
    status?: boolean
    scheduledAt?: boolean
    endsAt?: boolean
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    sections?: boolean | Test$sectionsArgs<ExtArgs>
    submissions?: boolean | Test$submissionsArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    authorId?: boolean
    duration?: boolean
    totalMarks?: boolean
    passingMarks?: boolean
    instructions?: boolean
    status?: boolean
    scheduledAt?: boolean
    endsAt?: boolean
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    authorId?: boolean
    duration?: boolean
    totalMarks?: boolean
    passingMarks?: boolean
    instructions?: boolean
    status?: boolean
    scheduledAt?: boolean
    endsAt?: boolean
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    classId?: boolean
    authorId?: boolean
    duration?: boolean
    totalMarks?: boolean
    passingMarks?: boolean
    instructions?: boolean
    status?: boolean
    scheduledAt?: boolean
    endsAt?: boolean
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "classId" | "authorId" | "duration" | "totalMarks" | "passingMarks" | "instructions" | "status" | "scheduledAt" | "endsAt" | "allowReview" | "shuffleQuestions" | "showResults" | "createdAt" | "updatedAt", ExtArgs["result"]["test"]>
  export type TestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
    sections?: boolean | Test$sectionsArgs<ExtArgs>
    submissions?: boolean | Test$submissionsArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Test$classArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Test"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs> | null
      author: Prisma.$UserPayload<ExtArgs>
      sections: Prisma.$SectionPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      classId: string | null
      authorId: string
      duration: number
      totalMarks: number
      passingMarks: number
      instructions: string | null
      status: $Enums.TestStatus
      scheduledAt: Date | null
      endsAt: Date | null
      allowReview: boolean
      shuffleQuestions: boolean
      showResults: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["test"]>
    composites: {}
  }

  type TestGetPayload<S extends boolean | null | undefined | TestDefaultArgs> = $Result.GetResult<Prisma.$TestPayload, S>

  type TestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestCountAggregateInputType | true
    }

  export interface TestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Test'], meta: { name: 'Test' } }
    /**
     * Find zero or one Test that matches the filter.
     * @param {TestFindUniqueArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestFindUniqueArgs>(args: SelectSubset<T, TestFindUniqueArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Test that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestFindUniqueOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestFindUniqueOrThrowArgs>(args: SelectSubset<T, TestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestFindFirstArgs>(args?: SelectSubset<T, TestFindFirstArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestFindFirstOrThrowArgs>(args?: SelectSubset<T, TestFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestFindManyArgs>(args?: SelectSubset<T, TestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Test.
     * @param {TestCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
     */
    create<T extends TestCreateArgs>(args: SelectSubset<T, TestCreateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tests.
     * @param {TestCreateManyArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCreateManyArgs>(args?: SelectSubset<T, TestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tests and returns the data saved in the database.
     * @param {TestCreateManyAndReturnArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Test.
     * @param {TestDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
     */
    delete<T extends TestDeleteArgs>(args: SelectSubset<T, TestDeleteArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Test.
     * @param {TestUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestUpdateArgs>(args: SelectSubset<T, TestUpdateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tests.
     * @param {TestDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestDeleteManyArgs>(args?: SelectSubset<T, TestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestUpdateManyArgs>(args: SelectSubset<T, TestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests and returns the data updated in the database.
     * @param {TestUpdateManyAndReturnArgs} args - Arguments to update many Tests.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestUpdateManyAndReturnArgs>(args: SelectSubset<T, TestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Test.
     * @param {TestUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
     */
    upsert<T extends TestUpsertArgs>(args: SelectSubset<T, TestUpsertArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.test.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestCountArgs>(
      args?: Subset<T, TestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestAggregateArgs>(args: Subset<T, TestAggregateArgs>): Prisma.PrismaPromise<GetTestAggregateType<T>>

    /**
     * Group by Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestGroupByArgs['orderBy'] }
        : { orderBy?: TestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Test model
   */
  readonly fields: TestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends Test$classArgs<ExtArgs> = {}>(args?: Subset<T, Test$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sections<T extends Test$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Test$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Test$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Test$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Test model
   */
  interface TestFieldRefs {
    readonly id: FieldRef<"Test", 'String'>
    readonly title: FieldRef<"Test", 'String'>
    readonly description: FieldRef<"Test", 'String'>
    readonly classId: FieldRef<"Test", 'String'>
    readonly authorId: FieldRef<"Test", 'String'>
    readonly duration: FieldRef<"Test", 'Int'>
    readonly totalMarks: FieldRef<"Test", 'Int'>
    readonly passingMarks: FieldRef<"Test", 'Int'>
    readonly instructions: FieldRef<"Test", 'String'>
    readonly status: FieldRef<"Test", 'TestStatus'>
    readonly scheduledAt: FieldRef<"Test", 'DateTime'>
    readonly endsAt: FieldRef<"Test", 'DateTime'>
    readonly allowReview: FieldRef<"Test", 'Boolean'>
    readonly shuffleQuestions: FieldRef<"Test", 'Boolean'>
    readonly showResults: FieldRef<"Test", 'Boolean'>
    readonly createdAt: FieldRef<"Test", 'DateTime'>
    readonly updatedAt: FieldRef<"Test", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Test findUnique
   */
  export type TestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findUniqueOrThrow
   */
  export type TestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findFirst
   */
  export type TestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findFirstOrThrow
   */
  export type TestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findMany
   */
  export type TestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Tests to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test create
   */
  export type TestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to create a Test.
     */
    data: XOR<TestCreateInput, TestUncheckedCreateInput>
  }

  /**
   * Test createMany
   */
  export type TestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
  }

  /**
   * Test createManyAndReturn
   */
  export type TestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Test update
   */
  export type TestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to update a Test.
     */
    data: XOR<TestUpdateInput, TestUncheckedUpdateInput>
    /**
     * Choose, which Test to update.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test updateMany
   */
  export type TestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
  }

  /**
   * Test updateManyAndReturn
   */
  export type TestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Test upsert
   */
  export type TestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The filter to search for the Test to update in case it exists.
     */
    where: TestWhereUniqueInput
    /**
     * In case the Test found by the `where` argument doesn't exist, create a new Test with this data.
     */
    create: XOR<TestCreateInput, TestUncheckedCreateInput>
    /**
     * In case the Test was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestUpdateInput, TestUncheckedUpdateInput>
  }

  /**
   * Test delete
   */
  export type TestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter which Test to delete.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test deleteMany
   */
  export type TestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tests to delete
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to delete.
     */
    limit?: number
  }

  /**
   * Test.class
   */
  export type Test$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Test.sections
   */
  export type Test$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    cursor?: SectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Test.submissions
   */
  export type Test$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Test without action
   */
  export type TestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
  }


  /**
   * Model Section
   */

  export type AggregateSection = {
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  export type SectionAvgAggregateOutputType = {
    order: number | null
    timeLimit: number | null
  }

  export type SectionSumAggregateOutputType = {
    order: number | null
    timeLimit: number | null
  }

  export type SectionMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    testId: string | null
    order: number | null
    timeLimit: number | null
  }

  export type SectionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    testId: string | null
    order: number | null
    timeLimit: number | null
  }

  export type SectionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    testId: number
    order: number
    timeLimit: number
    _all: number
  }


  export type SectionAvgAggregateInputType = {
    order?: true
    timeLimit?: true
  }

  export type SectionSumAggregateInputType = {
    order?: true
    timeLimit?: true
  }

  export type SectionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    testId?: true
    order?: true
    timeLimit?: true
  }

  export type SectionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    testId?: true
    order?: true
    timeLimit?: true
  }

  export type SectionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    testId?: true
    order?: true
    timeLimit?: true
    _all?: true
  }

  export type SectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Section to aggregate.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sections
    **/
    _count?: true | SectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionMaxAggregateInputType
  }

  export type GetSectionAggregateType<T extends SectionAggregateArgs> = {
        [P in keyof T & keyof AggregateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSection[P]>
      : GetScalarType<T[P], AggregateSection[P]>
  }




  export type SectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SectionWhereInput
    orderBy?: SectionOrderByWithAggregationInput | SectionOrderByWithAggregationInput[]
    by: SectionScalarFieldEnum[] | SectionScalarFieldEnum
    having?: SectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionCountAggregateInputType | true
    _avg?: SectionAvgAggregateInputType
    _sum?: SectionSumAggregateInputType
    _min?: SectionMinAggregateInputType
    _max?: SectionMaxAggregateInputType
  }

  export type SectionGroupByOutputType = {
    id: string
    title: string
    description: string | null
    testId: string
    order: number
    timeLimit: number | null
    _count: SectionCountAggregateOutputType | null
    _avg: SectionAvgAggregateOutputType | null
    _sum: SectionSumAggregateOutputType | null
    _min: SectionMinAggregateOutputType | null
    _max: SectionMaxAggregateOutputType | null
  }

  type GetSectionGroupByPayload<T extends SectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionGroupByOutputType[P]>
            : GetScalarType<T[P], SectionGroupByOutputType[P]>
        }
      >
    >


  export type SectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    testId?: boolean
    order?: boolean
    timeLimit?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    questions?: boolean | Section$questionsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    testId?: boolean
    order?: boolean
    timeLimit?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    testId?: boolean
    order?: boolean
    timeLimit?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["section"]>

  export type SectionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    testId?: boolean
    order?: boolean
    timeLimit?: boolean
  }

  export type SectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "testId" | "order" | "timeLimit", ExtArgs["result"]["section"]>
  export type SectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    questions?: boolean | Section$questionsArgs<ExtArgs>
    _count?: boolean | SectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
  }
  export type SectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
  }

  export type $SectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Section"
    objects: {
      test: Prisma.$TestPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      testId: string
      order: number
      timeLimit: number | null
    }, ExtArgs["result"]["section"]>
    composites: {}
  }

  type SectionGetPayload<S extends boolean | null | undefined | SectionDefaultArgs> = $Result.GetResult<Prisma.$SectionPayload, S>

  type SectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SectionCountAggregateInputType | true
    }

  export interface SectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Section'], meta: { name: 'Section' } }
    /**
     * Find zero or one Section that matches the filter.
     * @param {SectionFindUniqueArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SectionFindUniqueArgs>(args: SelectSubset<T, SectionFindUniqueArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Section that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SectionFindUniqueOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SectionFindUniqueOrThrowArgs>(args: SelectSubset<T, SectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SectionFindFirstArgs>(args?: SelectSubset<T, SectionFindFirstArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Section that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindFirstOrThrowArgs} args - Arguments to find a Section
     * @example
     * // Get one Section
     * const section = await prisma.section.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SectionFindFirstOrThrowArgs>(args?: SelectSubset<T, SectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.section.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.section.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionWithIdOnly = await prisma.section.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SectionFindManyArgs>(args?: SelectSubset<T, SectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Section.
     * @param {SectionCreateArgs} args - Arguments to create a Section.
     * @example
     * // Create one Section
     * const Section = await prisma.section.create({
     *   data: {
     *     // ... data to create a Section
     *   }
     * })
     * 
     */
    create<T extends SectionCreateArgs>(args: SelectSubset<T, SectionCreateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sections.
     * @param {SectionCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SectionCreateManyArgs>(args?: SelectSubset<T, SectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sections and returns the data saved in the database.
     * @param {SectionCreateManyAndReturnArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const section = await prisma.section.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SectionCreateManyAndReturnArgs>(args?: SelectSubset<T, SectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Section.
     * @param {SectionDeleteArgs} args - Arguments to delete one Section.
     * @example
     * // Delete one Section
     * const Section = await prisma.section.delete({
     *   where: {
     *     // ... filter to delete one Section
     *   }
     * })
     * 
     */
    delete<T extends SectionDeleteArgs>(args: SelectSubset<T, SectionDeleteArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Section.
     * @param {SectionUpdateArgs} args - Arguments to update one Section.
     * @example
     * // Update one Section
     * const section = await prisma.section.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SectionUpdateArgs>(args: SelectSubset<T, SectionUpdateArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sections.
     * @param {SectionDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.section.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SectionDeleteManyArgs>(args?: SelectSubset<T, SectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SectionUpdateManyArgs>(args: SelectSubset<T, SectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections and returns the data updated in the database.
     * @param {SectionUpdateManyAndReturnArgs} args - Arguments to update many Sections.
     * @example
     * // Update many Sections
     * const section = await prisma.section.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sections and only return the `id`
     * const sectionWithIdOnly = await prisma.section.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SectionUpdateManyAndReturnArgs>(args: SelectSubset<T, SectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Section.
     * @param {SectionUpsertArgs} args - Arguments to update or create a Section.
     * @example
     * // Update or create a Section
     * const section = await prisma.section.upsert({
     *   create: {
     *     // ... data to create a Section
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Section we want to update
     *   }
     * })
     */
    upsert<T extends SectionUpsertArgs>(args: SelectSubset<T, SectionUpsertArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.section.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends SectionCountArgs>(
      args?: Subset<T, SectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionAggregateArgs>(args: Subset<T, SectionAggregateArgs>): Prisma.PrismaPromise<GetSectionAggregateType<T>>

    /**
     * Group by Section.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SectionGroupByArgs['orderBy'] }
        : { orderBy?: SectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Section model
   */
  readonly fields: SectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Section.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends TestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestDefaultArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends Section$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Section$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Section model
   */
  interface SectionFieldRefs {
    readonly id: FieldRef<"Section", 'String'>
    readonly title: FieldRef<"Section", 'String'>
    readonly description: FieldRef<"Section", 'String'>
    readonly testId: FieldRef<"Section", 'String'>
    readonly order: FieldRef<"Section", 'Int'>
    readonly timeLimit: FieldRef<"Section", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Section findUnique
   */
  export type SectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findUniqueOrThrow
   */
  export type SectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section findFirst
   */
  export type SectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findFirstOrThrow
   */
  export type SectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Section to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sections.
     */
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section findMany
   */
  export type SectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter, which Sections to fetch.
     */
    where?: SectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sections to fetch.
     */
    orderBy?: SectionOrderByWithRelationInput | SectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sections.
     */
    cursor?: SectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sections.
     */
    skip?: number
    distinct?: SectionScalarFieldEnum | SectionScalarFieldEnum[]
  }

  /**
   * Section create
   */
  export type SectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Section.
     */
    data: XOR<SectionCreateInput, SectionUncheckedCreateInput>
  }

  /**
   * Section createMany
   */
  export type SectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
  }

  /**
   * Section createManyAndReturn
   */
  export type SectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to create many Sections.
     */
    data: SectionCreateManyInput | SectionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section update
   */
  export type SectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Section.
     */
    data: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
    /**
     * Choose, which Section to update.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section updateMany
   */
  export type SectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
  }

  /**
   * Section updateManyAndReturn
   */
  export type SectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * The data used to update Sections.
     */
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyInput>
    /**
     * Filter which Sections to update
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Section upsert
   */
  export type SectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Section to update in case it exists.
     */
    where: SectionWhereUniqueInput
    /**
     * In case the Section found by the `where` argument doesn't exist, create a new Section with this data.
     */
    create: XOR<SectionCreateInput, SectionUncheckedCreateInput>
    /**
     * In case the Section was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SectionUpdateInput, SectionUncheckedUpdateInput>
  }

  /**
   * Section delete
   */
  export type SectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
    /**
     * Filter which Section to delete.
     */
    where: SectionWhereUniqueInput
  }

  /**
   * Section deleteMany
   */
  export type SectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sections to delete
     */
    where?: SectionWhereInput
    /**
     * Limit how many Sections to delete.
     */
    limit?: number
  }

  /**
   * Section.questions
   */
  export type Section$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Section without action
   */
  export type SectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Section
     */
    select?: SectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Section
     */
    omit?: SectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SectionInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    marks: number | null
    negativeMarks: number | null
    order: number | null
  }

  export type QuestionSumAggregateOutputType = {
    marks: number | null
    negativeMarks: number | null
    order: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    sectionId: string | null
    type: $Enums.QuestionType | null
    text: string | null
    imageUrl: string | null
    options: string | null
    correctAnswers: string | null
    explanation: string | null
    marks: number | null
    negativeMarks: number | null
    difficulty: string | null
    order: number | null
    tags: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    sectionId: string | null
    type: $Enums.QuestionType | null
    text: string | null
    imageUrl: string | null
    options: string | null
    correctAnswers: string | null
    explanation: string | null
    marks: number | null
    negativeMarks: number | null
    difficulty: string | null
    order: number | null
    tags: string | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    sectionId: number
    type: number
    text: number
    imageUrl: number
    options: number
    correctAnswers: number
    explanation: number
    marks: number
    negativeMarks: number
    difficulty: number
    order: number
    tags: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    marks?: true
    negativeMarks?: true
    order?: true
  }

  export type QuestionSumAggregateInputType = {
    marks?: true
    negativeMarks?: true
    order?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    sectionId?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    marks?: true
    negativeMarks?: true
    difficulty?: true
    order?: true
    tags?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    sectionId?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    marks?: true
    negativeMarks?: true
    difficulty?: true
    order?: true
    tags?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    sectionId?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    marks?: true
    negativeMarks?: true
    difficulty?: true
    order?: true
    tags?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    sectionId: string
    type: $Enums.QuestionType
    text: string
    imageUrl: string | null
    options: string
    correctAnswers: string
    explanation: string | null
    marks: number
    negativeMarks: number
    difficulty: string
    order: number
    tags: string
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    marks?: boolean
    negativeMarks?: boolean
    difficulty?: boolean
    order?: boolean
    tags?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    marks?: boolean
    negativeMarks?: boolean
    difficulty?: boolean
    order?: boolean
    tags?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sectionId?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    marks?: boolean
    negativeMarks?: boolean
    difficulty?: boolean
    order?: boolean
    tags?: boolean
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    sectionId?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    marks?: boolean
    negativeMarks?: boolean
    difficulty?: boolean
    order?: boolean
    tags?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sectionId" | "type" | "text" | "imageUrl" | "options" | "correctAnswers" | "explanation" | "marks" | "negativeMarks" | "difficulty" | "order" | "tags", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    section?: boolean | SectionDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      section: Prisma.$SectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sectionId: string
      type: $Enums.QuestionType
      text: string
      imageUrl: string | null
      options: string
      correctAnswers: string
      explanation: string | null
      marks: number
      negativeMarks: number
      difficulty: string
      order: number
      tags: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    section<T extends SectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SectionDefaultArgs<ExtArgs>>): Prisma__SectionClient<$Result.GetResult<Prisma.$SectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly sectionId: FieldRef<"Question", 'String'>
    readonly type: FieldRef<"Question", 'QuestionType'>
    readonly text: FieldRef<"Question", 'String'>
    readonly imageUrl: FieldRef<"Question", 'String'>
    readonly options: FieldRef<"Question", 'String'>
    readonly correctAnswers: FieldRef<"Question", 'String'>
    readonly explanation: FieldRef<"Question", 'String'>
    readonly marks: FieldRef<"Question", 'Int'>
    readonly negativeMarks: FieldRef<"Question", 'Int'>
    readonly difficulty: FieldRef<"Question", 'String'>
    readonly order: FieldRef<"Question", 'Int'>
    readonly tags: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    score: number | null
    totalMarks: number | null
    percentage: number | null
    timeTaken: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    score: number | null
    totalMarks: number | null
    percentage: number | null
    timeTaken: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    testId: string | null
    studentId: string | null
    score: number | null
    totalMarks: number | null
    percentage: number | null
    timeTaken: number | null
    isCompleted: boolean | null
    startedAt: Date | null
    submittedAt: Date | null
    createdAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    testId: string | null
    studentId: string | null
    score: number | null
    totalMarks: number | null
    percentage: number | null
    timeTaken: number | null
    isCompleted: boolean | null
    startedAt: Date | null
    submittedAt: Date | null
    createdAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    testId: number
    studentId: number
    answers: number
    score: number
    totalMarks: number
    percentage: number
    timeTaken: number
    isCompleted: number
    startedAt: number
    submittedAt: number
    createdAt: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    score?: true
    totalMarks?: true
    percentage?: true
    timeTaken?: true
  }

  export type SubmissionSumAggregateInputType = {
    score?: true
    totalMarks?: true
    percentage?: true
    timeTaken?: true
  }

  export type SubmissionMinAggregateInputType = {
    id?: true
    testId?: true
    studentId?: true
    score?: true
    totalMarks?: true
    percentage?: true
    timeTaken?: true
    isCompleted?: true
    startedAt?: true
    submittedAt?: true
    createdAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    testId?: true
    studentId?: true
    score?: true
    totalMarks?: true
    percentage?: true
    timeTaken?: true
    isCompleted?: true
    startedAt?: true
    submittedAt?: true
    createdAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    testId?: true
    studentId?: true
    answers?: true
    score?: true
    totalMarks?: true
    percentage?: true
    timeTaken?: true
    isCompleted?: true
    startedAt?: true
    submittedAt?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    testId: string
    studentId: string
    answers: JsonValue
    score: number
    totalMarks: number
    percentage: number
    timeTaken: number
    isCompleted: boolean
    startedAt: Date
    submittedAt: Date | null
    createdAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    studentId?: boolean
    answers?: boolean
    score?: boolean
    totalMarks?: boolean
    percentage?: boolean
    timeTaken?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    studentId?: boolean
    answers?: boolean
    score?: boolean
    totalMarks?: boolean
    percentage?: boolean
    timeTaken?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testId?: boolean
    studentId?: boolean
    answers?: boolean
    score?: boolean
    totalMarks?: boolean
    percentage?: boolean
    timeTaken?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    testId?: boolean
    studentId?: boolean
    answers?: boolean
    score?: boolean
    totalMarks?: boolean
    percentage?: boolean
    timeTaken?: boolean
    isCompleted?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "testId" | "studentId" | "answers" | "score" | "totalMarks" | "percentage" | "timeTaken" | "isCompleted" | "startedAt" | "submittedAt" | "createdAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      test: Prisma.$TestPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      testId: string
      studentId: string
      answers: Prisma.JsonValue
      score: number
      totalMarks: number
      percentage: number
      timeTaken: number
      isCompleted: boolean
      startedAt: Date
      submittedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends TestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestDefaultArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly testId: FieldRef<"Submission", 'String'>
    readonly studentId: FieldRef<"Submission", 'String'>
    readonly answers: FieldRef<"Submission", 'Json'>
    readonly score: FieldRef<"Submission", 'Int'>
    readonly totalMarks: FieldRef<"Submission", 'Int'>
    readonly percentage: FieldRef<"Submission", 'Float'>
    readonly timeTaken: FieldRef<"Submission", 'Int'>
    readonly isCompleted: FieldRef<"Submission", 'Boolean'>
    readonly startedAt: FieldRef<"Submission", 'DateTime'>
    readonly submittedAt: FieldRef<"Submission", 'DateTime'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: string | null
    isRead: boolean | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    isRead: number
    actionUrl: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    isRead?: true
    actionUrl?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    type: string
    isRead: boolean
    actionUrl: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    actionUrl?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "message" | "type" | "isRead" | "actionUrl" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      type: string
      isRead: boolean
      actionUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ClassSchedule
   */

  export type AggregateClassSchedule = {
    _count: ClassScheduleCountAggregateOutputType | null
    _min: ClassScheduleMinAggregateOutputType | null
    _max: ClassScheduleMaxAggregateOutputType | null
  }

  export type ClassScheduleMinAggregateOutputType = {
    id: string | null
    subject: string | null
    teacherId: string | null
    creatorId: string | null
    batchType: $Enums.BatchType | null
    roomNumber: string | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    topic: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassScheduleMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    teacherId: string | null
    creatorId: string | null
    batchType: $Enums.BatchType | null
    roomNumber: string | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    topic: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassScheduleCountAggregateOutputType = {
    id: number
    subject: number
    teacherId: number
    creatorId: number
    batchType: number
    roomNumber: number
    date: number
    startTime: number
    endTime: number
    topic: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassScheduleMinAggregateInputType = {
    id?: true
    subject?: true
    teacherId?: true
    creatorId?: true
    batchType?: true
    roomNumber?: true
    date?: true
    startTime?: true
    endTime?: true
    topic?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassScheduleMaxAggregateInputType = {
    id?: true
    subject?: true
    teacherId?: true
    creatorId?: true
    batchType?: true
    roomNumber?: true
    date?: true
    startTime?: true
    endTime?: true
    topic?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassScheduleCountAggregateInputType = {
    id?: true
    subject?: true
    teacherId?: true
    creatorId?: true
    batchType?: true
    roomNumber?: true
    date?: true
    startTime?: true
    endTime?: true
    topic?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSchedule to aggregate.
     */
    where?: ClassScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSchedules to fetch.
     */
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassSchedules
    **/
    _count?: true | ClassScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassScheduleMaxAggregateInputType
  }

  export type GetClassScheduleAggregateType<T extends ClassScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateClassSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassSchedule[P]>
      : GetScalarType<T[P], AggregateClassSchedule[P]>
  }




  export type ClassScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassScheduleWhereInput
    orderBy?: ClassScheduleOrderByWithAggregationInput | ClassScheduleOrderByWithAggregationInput[]
    by: ClassScheduleScalarFieldEnum[] | ClassScheduleScalarFieldEnum
    having?: ClassScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassScheduleCountAggregateInputType | true
    _min?: ClassScheduleMinAggregateInputType
    _max?: ClassScheduleMaxAggregateInputType
  }

  export type ClassScheduleGroupByOutputType = {
    id: string
    subject: string
    teacherId: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date
    startTime: string
    endTime: string
    topic: string | null
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ClassScheduleCountAggregateOutputType | null
    _min: ClassScheduleMinAggregateOutputType | null
    _max: ClassScheduleMaxAggregateOutputType | null
  }

  type GetClassScheduleGroupByPayload<T extends ClassScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ClassScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ClassScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    teacherId?: boolean
    creatorId?: boolean
    batchType?: boolean
    roomNumber?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    topic?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    attendance?: boolean | ClassSchedule$attendanceArgs<ExtArgs>
    _count?: boolean | ClassScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSchedule"]>

  export type ClassScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    teacherId?: boolean
    creatorId?: boolean
    batchType?: boolean
    roomNumber?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    topic?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSchedule"]>

  export type ClassScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    teacherId?: boolean
    creatorId?: boolean
    batchType?: boolean
    roomNumber?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    topic?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSchedule"]>

  export type ClassScheduleSelectScalar = {
    id?: boolean
    subject?: boolean
    teacherId?: boolean
    creatorId?: boolean
    batchType?: boolean
    roomNumber?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    topic?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "teacherId" | "creatorId" | "batchType" | "roomNumber" | "date" | "startTime" | "endTime" | "topic" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["classSchedule"]>
  export type ClassScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    attendance?: boolean | ClassSchedule$attendanceArgs<ExtArgs>
    _count?: boolean | ClassScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ClassScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClassSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassSchedule"
    objects: {
      teacher: Prisma.$UserPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      attendance: Prisma.$AttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      teacherId: string
      creatorId: string
      batchType: $Enums.BatchType
      roomNumber: string
      date: Date
      startTime: string
      endTime: string
      topic: string | null
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["classSchedule"]>
    composites: {}
  }

  type ClassScheduleGetPayload<S extends boolean | null | undefined | ClassScheduleDefaultArgs> = $Result.GetResult<Prisma.$ClassSchedulePayload, S>

  type ClassScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassScheduleCountAggregateInputType | true
    }

  export interface ClassScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassSchedule'], meta: { name: 'ClassSchedule' } }
    /**
     * Find zero or one ClassSchedule that matches the filter.
     * @param {ClassScheduleFindUniqueArgs} args - Arguments to find a ClassSchedule
     * @example
     * // Get one ClassSchedule
     * const classSchedule = await prisma.classSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassScheduleFindUniqueArgs>(args: SelectSubset<T, ClassScheduleFindUniqueArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassScheduleFindUniqueOrThrowArgs} args - Arguments to find a ClassSchedule
     * @example
     * // Get one ClassSchedule
     * const classSchedule = await prisma.classSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleFindFirstArgs} args - Arguments to find a ClassSchedule
     * @example
     * // Get one ClassSchedule
     * const classSchedule = await prisma.classSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassScheduleFindFirstArgs>(args?: SelectSubset<T, ClassScheduleFindFirstArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleFindFirstOrThrowArgs} args - Arguments to find a ClassSchedule
     * @example
     * // Get one ClassSchedule
     * const classSchedule = await prisma.classSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassSchedules
     * const classSchedules = await prisma.classSchedule.findMany()
     * 
     * // Get first 10 ClassSchedules
     * const classSchedules = await prisma.classSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classScheduleWithIdOnly = await prisma.classSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassScheduleFindManyArgs>(args?: SelectSubset<T, ClassScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassSchedule.
     * @param {ClassScheduleCreateArgs} args - Arguments to create a ClassSchedule.
     * @example
     * // Create one ClassSchedule
     * const ClassSchedule = await prisma.classSchedule.create({
     *   data: {
     *     // ... data to create a ClassSchedule
     *   }
     * })
     * 
     */
    create<T extends ClassScheduleCreateArgs>(args: SelectSubset<T, ClassScheduleCreateArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassSchedules.
     * @param {ClassScheduleCreateManyArgs} args - Arguments to create many ClassSchedules.
     * @example
     * // Create many ClassSchedules
     * const classSchedule = await prisma.classSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassScheduleCreateManyArgs>(args?: SelectSubset<T, ClassScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassSchedules and returns the data saved in the database.
     * @param {ClassScheduleCreateManyAndReturnArgs} args - Arguments to create many ClassSchedules.
     * @example
     * // Create many ClassSchedules
     * const classSchedule = await prisma.classSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassSchedules and only return the `id`
     * const classScheduleWithIdOnly = await prisma.classSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassSchedule.
     * @param {ClassScheduleDeleteArgs} args - Arguments to delete one ClassSchedule.
     * @example
     * // Delete one ClassSchedule
     * const ClassSchedule = await prisma.classSchedule.delete({
     *   where: {
     *     // ... filter to delete one ClassSchedule
     *   }
     * })
     * 
     */
    delete<T extends ClassScheduleDeleteArgs>(args: SelectSubset<T, ClassScheduleDeleteArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassSchedule.
     * @param {ClassScheduleUpdateArgs} args - Arguments to update one ClassSchedule.
     * @example
     * // Update one ClassSchedule
     * const classSchedule = await prisma.classSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassScheduleUpdateArgs>(args: SelectSubset<T, ClassScheduleUpdateArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassSchedules.
     * @param {ClassScheduleDeleteManyArgs} args - Arguments to filter ClassSchedules to delete.
     * @example
     * // Delete a few ClassSchedules
     * const { count } = await prisma.classSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassScheduleDeleteManyArgs>(args?: SelectSubset<T, ClassScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassSchedules
     * const classSchedule = await prisma.classSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassScheduleUpdateManyArgs>(args: SelectSubset<T, ClassScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassSchedules and returns the data updated in the database.
     * @param {ClassScheduleUpdateManyAndReturnArgs} args - Arguments to update many ClassSchedules.
     * @example
     * // Update many ClassSchedules
     * const classSchedule = await prisma.classSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassSchedules and only return the `id`
     * const classScheduleWithIdOnly = await prisma.classSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassSchedule.
     * @param {ClassScheduleUpsertArgs} args - Arguments to update or create a ClassSchedule.
     * @example
     * // Update or create a ClassSchedule
     * const classSchedule = await prisma.classSchedule.upsert({
     *   create: {
     *     // ... data to create a ClassSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassSchedule we want to update
     *   }
     * })
     */
    upsert<T extends ClassScheduleUpsertArgs>(args: SelectSubset<T, ClassScheduleUpsertArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleCountArgs} args - Arguments to filter ClassSchedules to count.
     * @example
     * // Count the number of ClassSchedules
     * const count = await prisma.classSchedule.count({
     *   where: {
     *     // ... the filter for the ClassSchedules we want to count
     *   }
     * })
    **/
    count<T extends ClassScheduleCountArgs>(
      args?: Subset<T, ClassScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassScheduleAggregateArgs>(args: Subset<T, ClassScheduleAggregateArgs>): Prisma.PrismaPromise<GetClassScheduleAggregateType<T>>

    /**
     * Group by ClassSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ClassScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassSchedule model
   */
  readonly fields: ClassScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendance<T extends ClassSchedule$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, ClassSchedule$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassSchedule model
   */
  interface ClassScheduleFieldRefs {
    readonly id: FieldRef<"ClassSchedule", 'String'>
    readonly subject: FieldRef<"ClassSchedule", 'String'>
    readonly teacherId: FieldRef<"ClassSchedule", 'String'>
    readonly creatorId: FieldRef<"ClassSchedule", 'String'>
    readonly batchType: FieldRef<"ClassSchedule", 'BatchType'>
    readonly roomNumber: FieldRef<"ClassSchedule", 'String'>
    readonly date: FieldRef<"ClassSchedule", 'DateTime'>
    readonly startTime: FieldRef<"ClassSchedule", 'String'>
    readonly endTime: FieldRef<"ClassSchedule", 'String'>
    readonly topic: FieldRef<"ClassSchedule", 'String'>
    readonly description: FieldRef<"ClassSchedule", 'String'>
    readonly isActive: FieldRef<"ClassSchedule", 'Boolean'>
    readonly createdAt: FieldRef<"ClassSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"ClassSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassSchedule findUnique
   */
  export type ClassScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClassSchedule to fetch.
     */
    where: ClassScheduleWhereUniqueInput
  }

  /**
   * ClassSchedule findUniqueOrThrow
   */
  export type ClassScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClassSchedule to fetch.
     */
    where: ClassScheduleWhereUniqueInput
  }

  /**
   * ClassSchedule findFirst
   */
  export type ClassScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClassSchedule to fetch.
     */
    where?: ClassScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSchedules to fetch.
     */
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSchedules.
     */
    cursor?: ClassScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSchedules.
     */
    distinct?: ClassScheduleScalarFieldEnum | ClassScheduleScalarFieldEnum[]
  }

  /**
   * ClassSchedule findFirstOrThrow
   */
  export type ClassScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClassSchedule to fetch.
     */
    where?: ClassScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSchedules to fetch.
     */
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSchedules.
     */
    cursor?: ClassScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSchedules.
     */
    distinct?: ClassScheduleScalarFieldEnum | ClassScheduleScalarFieldEnum[]
  }

  /**
   * ClassSchedule findMany
   */
  export type ClassScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter, which ClassSchedules to fetch.
     */
    where?: ClassScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSchedules to fetch.
     */
    orderBy?: ClassScheduleOrderByWithRelationInput | ClassScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassSchedules.
     */
    cursor?: ClassScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSchedules.
     */
    skip?: number
    distinct?: ClassScheduleScalarFieldEnum | ClassScheduleScalarFieldEnum[]
  }

  /**
   * ClassSchedule create
   */
  export type ClassScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassSchedule.
     */
    data: XOR<ClassScheduleCreateInput, ClassScheduleUncheckedCreateInput>
  }

  /**
   * ClassSchedule createMany
   */
  export type ClassScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassSchedules.
     */
    data: ClassScheduleCreateManyInput | ClassScheduleCreateManyInput[]
  }

  /**
   * ClassSchedule createManyAndReturn
   */
  export type ClassScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many ClassSchedules.
     */
    data: ClassScheduleCreateManyInput | ClassScheduleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassSchedule update
   */
  export type ClassScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassSchedule.
     */
    data: XOR<ClassScheduleUpdateInput, ClassScheduleUncheckedUpdateInput>
    /**
     * Choose, which ClassSchedule to update.
     */
    where: ClassScheduleWhereUniqueInput
  }

  /**
   * ClassSchedule updateMany
   */
  export type ClassScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassSchedules.
     */
    data: XOR<ClassScheduleUpdateManyMutationInput, ClassScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ClassSchedules to update
     */
    where?: ClassScheduleWhereInput
    /**
     * Limit how many ClassSchedules to update.
     */
    limit?: number
  }

  /**
   * ClassSchedule updateManyAndReturn
   */
  export type ClassScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * The data used to update ClassSchedules.
     */
    data: XOR<ClassScheduleUpdateManyMutationInput, ClassScheduleUncheckedUpdateManyInput>
    /**
     * Filter which ClassSchedules to update
     */
    where?: ClassScheduleWhereInput
    /**
     * Limit how many ClassSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassSchedule upsert
   */
  export type ClassScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassSchedule to update in case it exists.
     */
    where: ClassScheduleWhereUniqueInput
    /**
     * In case the ClassSchedule found by the `where` argument doesn't exist, create a new ClassSchedule with this data.
     */
    create: XOR<ClassScheduleCreateInput, ClassScheduleUncheckedCreateInput>
    /**
     * In case the ClassSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassScheduleUpdateInput, ClassScheduleUncheckedUpdateInput>
  }

  /**
   * ClassSchedule delete
   */
  export type ClassScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
    /**
     * Filter which ClassSchedule to delete.
     */
    where: ClassScheduleWhereUniqueInput
  }

  /**
   * ClassSchedule deleteMany
   */
  export type ClassScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSchedules to delete
     */
    where?: ClassScheduleWhereInput
    /**
     * Limit how many ClassSchedules to delete.
     */
    limit?: number
  }

  /**
   * ClassSchedule.attendance
   */
  export type ClassSchedule$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * ClassSchedule without action
   */
  export type ClassScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSchedule
     */
    select?: ClassScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassSchedule
     */
    omit?: ClassScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Batch
   */

  export type AggregateBatch = {
    _count: BatchCountAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  export type BatchMinAggregateOutputType = {
    id: string | null
    type: $Enums.BatchType | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BatchMaxAggregateOutputType = {
    id: string | null
    type: $Enums.BatchType | null
    name: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BatchCountAggregateOutputType = {
    id: number
    type: number
    name: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BatchMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BatchMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BatchCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batch to aggregate.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Batches
    **/
    _count?: true | BatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatchMaxAggregateInputType
  }

  export type GetBatchAggregateType<T extends BatchAggregateArgs> = {
        [P in keyof T & keyof AggregateBatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatch[P]>
      : GetScalarType<T[P], AggregateBatch[P]>
  }




  export type BatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
    orderBy?: BatchOrderByWithAggregationInput | BatchOrderByWithAggregationInput[]
    by: BatchScalarFieldEnum[] | BatchScalarFieldEnum
    having?: BatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatchCountAggregateInputType | true
    _min?: BatchMinAggregateInputType
    _max?: BatchMaxAggregateInputType
  }

  export type BatchGroupByOutputType = {
    id: string
    type: $Enums.BatchType
    name: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BatchCountAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  type GetBatchGroupByPayload<T extends BatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatchGroupByOutputType[P]>
            : GetScalarType<T[P], BatchGroupByOutputType[P]>
        }
      >
    >


  export type BatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | Batch$eventsArgs<ExtArgs>
    teachersAssigned?: boolean | Batch$teachersAssignedArgs<ExtArgs>
    _count?: boolean | BatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["batch"]>

  export type BatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["batch"]>

  export type BatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["batch"]>

  export type BatchSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "name" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["batch"]>
  export type BatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Batch$eventsArgs<ExtArgs>
    teachersAssigned?: boolean | Batch$teachersAssignedArgs<ExtArgs>
    _count?: boolean | BatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type BatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Batch"
    objects: {
      events: Prisma.$SpecialEventPayload<ExtArgs>[]
      teachersAssigned: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.BatchType
      name: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["batch"]>
    composites: {}
  }

  type BatchGetPayload<S extends boolean | null | undefined | BatchDefaultArgs> = $Result.GetResult<Prisma.$BatchPayload, S>

  type BatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BatchCountAggregateInputType | true
    }

  export interface BatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Batch'], meta: { name: 'Batch' } }
    /**
     * Find zero or one Batch that matches the filter.
     * @param {BatchFindUniqueArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BatchFindUniqueArgs>(args: SelectSubset<T, BatchFindUniqueArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Batch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BatchFindUniqueOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BatchFindUniqueOrThrowArgs>(args: SelectSubset<T, BatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Batch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BatchFindFirstArgs>(args?: SelectSubset<T, BatchFindFirstArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Batch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BatchFindFirstOrThrowArgs>(args?: SelectSubset<T, BatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Batches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Batches
     * const batches = await prisma.batch.findMany()
     * 
     * // Get first 10 Batches
     * const batches = await prisma.batch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const batchWithIdOnly = await prisma.batch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BatchFindManyArgs>(args?: SelectSubset<T, BatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Batch.
     * @param {BatchCreateArgs} args - Arguments to create a Batch.
     * @example
     * // Create one Batch
     * const Batch = await prisma.batch.create({
     *   data: {
     *     // ... data to create a Batch
     *   }
     * })
     * 
     */
    create<T extends BatchCreateArgs>(args: SelectSubset<T, BatchCreateArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Batches.
     * @param {BatchCreateManyArgs} args - Arguments to create many Batches.
     * @example
     * // Create many Batches
     * const batch = await prisma.batch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BatchCreateManyArgs>(args?: SelectSubset<T, BatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Batches and returns the data saved in the database.
     * @param {BatchCreateManyAndReturnArgs} args - Arguments to create many Batches.
     * @example
     * // Create many Batches
     * const batch = await prisma.batch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Batches and only return the `id`
     * const batchWithIdOnly = await prisma.batch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BatchCreateManyAndReturnArgs>(args?: SelectSubset<T, BatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Batch.
     * @param {BatchDeleteArgs} args - Arguments to delete one Batch.
     * @example
     * // Delete one Batch
     * const Batch = await prisma.batch.delete({
     *   where: {
     *     // ... filter to delete one Batch
     *   }
     * })
     * 
     */
    delete<T extends BatchDeleteArgs>(args: SelectSubset<T, BatchDeleteArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Batch.
     * @param {BatchUpdateArgs} args - Arguments to update one Batch.
     * @example
     * // Update one Batch
     * const batch = await prisma.batch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BatchUpdateArgs>(args: SelectSubset<T, BatchUpdateArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Batches.
     * @param {BatchDeleteManyArgs} args - Arguments to filter Batches to delete.
     * @example
     * // Delete a few Batches
     * const { count } = await prisma.batch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BatchDeleteManyArgs>(args?: SelectSubset<T, BatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Batches
     * const batch = await prisma.batch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BatchUpdateManyArgs>(args: SelectSubset<T, BatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches and returns the data updated in the database.
     * @param {BatchUpdateManyAndReturnArgs} args - Arguments to update many Batches.
     * @example
     * // Update many Batches
     * const batch = await prisma.batch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Batches and only return the `id`
     * const batchWithIdOnly = await prisma.batch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BatchUpdateManyAndReturnArgs>(args: SelectSubset<T, BatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Batch.
     * @param {BatchUpsertArgs} args - Arguments to update or create a Batch.
     * @example
     * // Update or create a Batch
     * const batch = await prisma.batch.upsert({
     *   create: {
     *     // ... data to create a Batch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Batch we want to update
     *   }
     * })
     */
    upsert<T extends BatchUpsertArgs>(args: SelectSubset<T, BatchUpsertArgs<ExtArgs>>): Prisma__BatchClient<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchCountArgs} args - Arguments to filter Batches to count.
     * @example
     * // Count the number of Batches
     * const count = await prisma.batch.count({
     *   where: {
     *     // ... the filter for the Batches we want to count
     *   }
     * })
    **/
    count<T extends BatchCountArgs>(
      args?: Subset<T, BatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatchAggregateArgs>(args: Subset<T, BatchAggregateArgs>): Prisma.PrismaPromise<GetBatchAggregateType<T>>

    /**
     * Group by Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BatchGroupByArgs['orderBy'] }
        : { orderBy?: BatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Batch model
   */
  readonly fields: BatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Batch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Batch$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Batch$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachersAssigned<T extends Batch$teachersAssignedArgs<ExtArgs> = {}>(args?: Subset<T, Batch$teachersAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Batch model
   */
  interface BatchFieldRefs {
    readonly id: FieldRef<"Batch", 'String'>
    readonly type: FieldRef<"Batch", 'BatchType'>
    readonly name: FieldRef<"Batch", 'String'>
    readonly isActive: FieldRef<"Batch", 'Boolean'>
    readonly createdAt: FieldRef<"Batch", 'DateTime'>
    readonly updatedAt: FieldRef<"Batch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Batch findUnique
   */
  export type BatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }

  /**
   * Batch findUniqueOrThrow
   */
  export type BatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }

  /**
   * Batch findFirst
   */
  export type BatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }

  /**
   * Batch findFirstOrThrow
   */
  export type BatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }

  /**
   * Batch findMany
   */
  export type BatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batches to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }

  /**
   * Batch create
   */
  export type BatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Batch.
     */
    data: XOR<BatchCreateInput, BatchUncheckedCreateInput>
  }

  /**
   * Batch createMany
   */
  export type BatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Batches.
     */
    data: BatchCreateManyInput | BatchCreateManyInput[]
  }

  /**
   * Batch createManyAndReturn
   */
  export type BatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * The data used to create many Batches.
     */
    data: BatchCreateManyInput | BatchCreateManyInput[]
  }

  /**
   * Batch update
   */
  export type BatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Batch.
     */
    data: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
    /**
     * Choose, which Batch to update.
     */
    where: BatchWhereUniqueInput
  }

  /**
   * Batch updateMany
   */
  export type BatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Batches.
     */
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyInput>
    /**
     * Filter which Batches to update
     */
    where?: BatchWhereInput
    /**
     * Limit how many Batches to update.
     */
    limit?: number
  }

  /**
   * Batch updateManyAndReturn
   */
  export type BatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * The data used to update Batches.
     */
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyInput>
    /**
     * Filter which Batches to update
     */
    where?: BatchWhereInput
    /**
     * Limit how many Batches to update.
     */
    limit?: number
  }

  /**
   * Batch upsert
   */
  export type BatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Batch to update in case it exists.
     */
    where: BatchWhereUniqueInput
    /**
     * In case the Batch found by the `where` argument doesn't exist, create a new Batch with this data.
     */
    create: XOR<BatchCreateInput, BatchUncheckedCreateInput>
    /**
     * In case the Batch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
  }

  /**
   * Batch delete
   */
  export type BatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter which Batch to delete.
     */
    where: BatchWhereUniqueInput
  }

  /**
   * Batch deleteMany
   */
  export type BatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batches to delete
     */
    where?: BatchWhereInput
    /**
     * Limit how many Batches to delete.
     */
    limit?: number
  }

  /**
   * Batch.events
   */
  export type Batch$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    where?: SpecialEventWhereInput
    orderBy?: SpecialEventOrderByWithRelationInput | SpecialEventOrderByWithRelationInput[]
    cursor?: SpecialEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpecialEventScalarFieldEnum | SpecialEventScalarFieldEnum[]
  }

  /**
   * Batch.teachersAssigned
   */
  export type Batch$teachersAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Batch without action
   */
  export type BatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
  }


  /**
   * Model SpecialEvent
   */

  export type AggregateSpecialEvent = {
    _count: SpecialEventCountAggregateOutputType | null
    _avg: SpecialEventAvgAggregateOutputType | null
    _sum: SpecialEventSumAggregateOutputType | null
    _min: SpecialEventMinAggregateOutputType | null
    _max: SpecialEventMaxAggregateOutputType | null
  }

  export type SpecialEventAvgAggregateOutputType = {
    duration: number | null
    maxParticipants: number | null
  }

  export type SpecialEventSumAggregateOutputType = {
    duration: number | null
    maxParticipants: number | null
  }

  export type SpecialEventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.EventType | null
    scheduledAt: Date | null
    duration: number | null
    location: string | null
    status: string | null
    maxParticipants: number | null
    isRecurring: boolean | null
    recurringPattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpecialEventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.EventType | null
    scheduledAt: Date | null
    duration: number | null
    location: string | null
    status: string | null
    maxParticipants: number | null
    isRecurring: boolean | null
    recurringPattern: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SpecialEventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    scheduledAt: number
    duration: number
    location: number
    status: number
    maxParticipants: number
    isRecurring: number
    recurringPattern: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SpecialEventAvgAggregateInputType = {
    duration?: true
    maxParticipants?: true
  }

  export type SpecialEventSumAggregateInputType = {
    duration?: true
    maxParticipants?: true
  }

  export type SpecialEventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    scheduledAt?: true
    duration?: true
    location?: true
    status?: true
    maxParticipants?: true
    isRecurring?: true
    recurringPattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpecialEventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    scheduledAt?: true
    duration?: true
    location?: true
    status?: true
    maxParticipants?: true
    isRecurring?: true
    recurringPattern?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SpecialEventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    scheduledAt?: true
    duration?: true
    location?: true
    status?: true
    maxParticipants?: true
    isRecurring?: true
    recurringPattern?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SpecialEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecialEvent to aggregate.
     */
    where?: SpecialEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialEvents to fetch.
     */
    orderBy?: SpecialEventOrderByWithRelationInput | SpecialEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecialEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpecialEvents
    **/
    _count?: true | SpecialEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpecialEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpecialEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialEventMaxAggregateInputType
  }

  export type GetSpecialEventAggregateType<T extends SpecialEventAggregateArgs> = {
        [P in keyof T & keyof AggregateSpecialEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpecialEvent[P]>
      : GetScalarType<T[P], AggregateSpecialEvent[P]>
  }




  export type SpecialEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpecialEventWhereInput
    orderBy?: SpecialEventOrderByWithAggregationInput | SpecialEventOrderByWithAggregationInput[]
    by: SpecialEventScalarFieldEnum[] | SpecialEventScalarFieldEnum
    having?: SpecialEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialEventCountAggregateInputType | true
    _avg?: SpecialEventAvgAggregateInputType
    _sum?: SpecialEventSumAggregateInputType
    _min?: SpecialEventMinAggregateInputType
    _max?: SpecialEventMaxAggregateInputType
  }

  export type SpecialEventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    type: $Enums.EventType
    scheduledAt: Date
    duration: number
    location: string | null
    status: string
    maxParticipants: number | null
    isRecurring: boolean
    recurringPattern: string | null
    createdAt: Date
    updatedAt: Date
    _count: SpecialEventCountAggregateOutputType | null
    _avg: SpecialEventAvgAggregateOutputType | null
    _sum: SpecialEventSumAggregateOutputType | null
    _min: SpecialEventMinAggregateOutputType | null
    _max: SpecialEventMaxAggregateOutputType | null
  }

  type GetSpecialEventGroupByPayload<T extends SpecialEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecialEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialEventGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialEventGroupByOutputType[P]>
        }
      >
    >


  export type SpecialEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    status?: boolean
    maxParticipants?: boolean
    isRecurring?: boolean
    recurringPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    batches?: boolean | SpecialEvent$batchesArgs<ExtArgs>
    participants?: boolean | SpecialEvent$participantsArgs<ExtArgs>
    _count?: boolean | SpecialEventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["specialEvent"]>

  export type SpecialEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    status?: boolean
    maxParticipants?: boolean
    isRecurring?: boolean
    recurringPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["specialEvent"]>

  export type SpecialEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    status?: boolean
    maxParticipants?: boolean
    isRecurring?: boolean
    recurringPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["specialEvent"]>

  export type SpecialEventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    status?: boolean
    maxParticipants?: boolean
    isRecurring?: boolean
    recurringPattern?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SpecialEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "type" | "scheduledAt" | "duration" | "location" | "status" | "maxParticipants" | "isRecurring" | "recurringPattern" | "createdAt" | "updatedAt", ExtArgs["result"]["specialEvent"]>
  export type SpecialEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | SpecialEvent$batchesArgs<ExtArgs>
    participants?: boolean | SpecialEvent$participantsArgs<ExtArgs>
    _count?: boolean | SpecialEventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SpecialEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SpecialEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SpecialEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpecialEvent"
    objects: {
      batches: Prisma.$BatchPayload<ExtArgs>[]
      participants: Prisma.$EventParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      type: $Enums.EventType
      scheduledAt: Date
      duration: number
      location: string | null
      status: string
      maxParticipants: number | null
      isRecurring: boolean
      recurringPattern: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["specialEvent"]>
    composites: {}
  }

  type SpecialEventGetPayload<S extends boolean | null | undefined | SpecialEventDefaultArgs> = $Result.GetResult<Prisma.$SpecialEventPayload, S>

  type SpecialEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SpecialEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SpecialEventCountAggregateInputType | true
    }

  export interface SpecialEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpecialEvent'], meta: { name: 'SpecialEvent' } }
    /**
     * Find zero or one SpecialEvent that matches the filter.
     * @param {SpecialEventFindUniqueArgs} args - Arguments to find a SpecialEvent
     * @example
     * // Get one SpecialEvent
     * const specialEvent = await prisma.specialEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SpecialEventFindUniqueArgs>(args: SelectSubset<T, SpecialEventFindUniqueArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SpecialEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SpecialEventFindUniqueOrThrowArgs} args - Arguments to find a SpecialEvent
     * @example
     * // Get one SpecialEvent
     * const specialEvent = await prisma.specialEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SpecialEventFindUniqueOrThrowArgs>(args: SelectSubset<T, SpecialEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpecialEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventFindFirstArgs} args - Arguments to find a SpecialEvent
     * @example
     * // Get one SpecialEvent
     * const specialEvent = await prisma.specialEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SpecialEventFindFirstArgs>(args?: SelectSubset<T, SpecialEventFindFirstArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SpecialEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventFindFirstOrThrowArgs} args - Arguments to find a SpecialEvent
     * @example
     * // Get one SpecialEvent
     * const specialEvent = await prisma.specialEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SpecialEventFindFirstOrThrowArgs>(args?: SelectSubset<T, SpecialEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SpecialEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpecialEvents
     * const specialEvents = await prisma.specialEvent.findMany()
     * 
     * // Get first 10 SpecialEvents
     * const specialEvents = await prisma.specialEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specialEventWithIdOnly = await prisma.specialEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SpecialEventFindManyArgs>(args?: SelectSubset<T, SpecialEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SpecialEvent.
     * @param {SpecialEventCreateArgs} args - Arguments to create a SpecialEvent.
     * @example
     * // Create one SpecialEvent
     * const SpecialEvent = await prisma.specialEvent.create({
     *   data: {
     *     // ... data to create a SpecialEvent
     *   }
     * })
     * 
     */
    create<T extends SpecialEventCreateArgs>(args: SelectSubset<T, SpecialEventCreateArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SpecialEvents.
     * @param {SpecialEventCreateManyArgs} args - Arguments to create many SpecialEvents.
     * @example
     * // Create many SpecialEvents
     * const specialEvent = await prisma.specialEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SpecialEventCreateManyArgs>(args?: SelectSubset<T, SpecialEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SpecialEvents and returns the data saved in the database.
     * @param {SpecialEventCreateManyAndReturnArgs} args - Arguments to create many SpecialEvents.
     * @example
     * // Create many SpecialEvents
     * const specialEvent = await prisma.specialEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SpecialEvents and only return the `id`
     * const specialEventWithIdOnly = await prisma.specialEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SpecialEventCreateManyAndReturnArgs>(args?: SelectSubset<T, SpecialEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SpecialEvent.
     * @param {SpecialEventDeleteArgs} args - Arguments to delete one SpecialEvent.
     * @example
     * // Delete one SpecialEvent
     * const SpecialEvent = await prisma.specialEvent.delete({
     *   where: {
     *     // ... filter to delete one SpecialEvent
     *   }
     * })
     * 
     */
    delete<T extends SpecialEventDeleteArgs>(args: SelectSubset<T, SpecialEventDeleteArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SpecialEvent.
     * @param {SpecialEventUpdateArgs} args - Arguments to update one SpecialEvent.
     * @example
     * // Update one SpecialEvent
     * const specialEvent = await prisma.specialEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SpecialEventUpdateArgs>(args: SelectSubset<T, SpecialEventUpdateArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SpecialEvents.
     * @param {SpecialEventDeleteManyArgs} args - Arguments to filter SpecialEvents to delete.
     * @example
     * // Delete a few SpecialEvents
     * const { count } = await prisma.specialEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SpecialEventDeleteManyArgs>(args?: SelectSubset<T, SpecialEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpecialEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpecialEvents
     * const specialEvent = await prisma.specialEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SpecialEventUpdateManyArgs>(args: SelectSubset<T, SpecialEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpecialEvents and returns the data updated in the database.
     * @param {SpecialEventUpdateManyAndReturnArgs} args - Arguments to update many SpecialEvents.
     * @example
     * // Update many SpecialEvents
     * const specialEvent = await prisma.specialEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SpecialEvents and only return the `id`
     * const specialEventWithIdOnly = await prisma.specialEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SpecialEventUpdateManyAndReturnArgs>(args: SelectSubset<T, SpecialEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SpecialEvent.
     * @param {SpecialEventUpsertArgs} args - Arguments to update or create a SpecialEvent.
     * @example
     * // Update or create a SpecialEvent
     * const specialEvent = await prisma.specialEvent.upsert({
     *   create: {
     *     // ... data to create a SpecialEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpecialEvent we want to update
     *   }
     * })
     */
    upsert<T extends SpecialEventUpsertArgs>(args: SelectSubset<T, SpecialEventUpsertArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SpecialEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventCountArgs} args - Arguments to filter SpecialEvents to count.
     * @example
     * // Count the number of SpecialEvents
     * const count = await prisma.specialEvent.count({
     *   where: {
     *     // ... the filter for the SpecialEvents we want to count
     *   }
     * })
    **/
    count<T extends SpecialEventCountArgs>(
      args?: Subset<T, SpecialEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpecialEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialEventAggregateArgs>(args: Subset<T, SpecialEventAggregateArgs>): Prisma.PrismaPromise<GetSpecialEventAggregateType<T>>

    /**
     * Group by SpecialEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialEventGroupByArgs['orderBy'] }
        : { orderBy?: SpecialEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpecialEvent model
   */
  readonly fields: SpecialEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpecialEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecialEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batches<T extends SpecialEvent$batchesArgs<ExtArgs> = {}>(args?: Subset<T, SpecialEvent$batchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends SpecialEvent$participantsArgs<ExtArgs> = {}>(args?: Subset<T, SpecialEvent$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SpecialEvent model
   */
  interface SpecialEventFieldRefs {
    readonly id: FieldRef<"SpecialEvent", 'String'>
    readonly title: FieldRef<"SpecialEvent", 'String'>
    readonly description: FieldRef<"SpecialEvent", 'String'>
    readonly type: FieldRef<"SpecialEvent", 'EventType'>
    readonly scheduledAt: FieldRef<"SpecialEvent", 'DateTime'>
    readonly duration: FieldRef<"SpecialEvent", 'Int'>
    readonly location: FieldRef<"SpecialEvent", 'String'>
    readonly status: FieldRef<"SpecialEvent", 'String'>
    readonly maxParticipants: FieldRef<"SpecialEvent", 'Int'>
    readonly isRecurring: FieldRef<"SpecialEvent", 'Boolean'>
    readonly recurringPattern: FieldRef<"SpecialEvent", 'String'>
    readonly createdAt: FieldRef<"SpecialEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"SpecialEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SpecialEvent findUnique
   */
  export type SpecialEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter, which SpecialEvent to fetch.
     */
    where: SpecialEventWhereUniqueInput
  }

  /**
   * SpecialEvent findUniqueOrThrow
   */
  export type SpecialEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter, which SpecialEvent to fetch.
     */
    where: SpecialEventWhereUniqueInput
  }

  /**
   * SpecialEvent findFirst
   */
  export type SpecialEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter, which SpecialEvent to fetch.
     */
    where?: SpecialEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialEvents to fetch.
     */
    orderBy?: SpecialEventOrderByWithRelationInput | SpecialEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecialEvents.
     */
    cursor?: SpecialEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecialEvents.
     */
    distinct?: SpecialEventScalarFieldEnum | SpecialEventScalarFieldEnum[]
  }

  /**
   * SpecialEvent findFirstOrThrow
   */
  export type SpecialEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter, which SpecialEvent to fetch.
     */
    where?: SpecialEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialEvents to fetch.
     */
    orderBy?: SpecialEventOrderByWithRelationInput | SpecialEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpecialEvents.
     */
    cursor?: SpecialEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpecialEvents.
     */
    distinct?: SpecialEventScalarFieldEnum | SpecialEventScalarFieldEnum[]
  }

  /**
   * SpecialEvent findMany
   */
  export type SpecialEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter, which SpecialEvents to fetch.
     */
    where?: SpecialEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpecialEvents to fetch.
     */
    orderBy?: SpecialEventOrderByWithRelationInput | SpecialEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpecialEvents.
     */
    cursor?: SpecialEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpecialEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpecialEvents.
     */
    skip?: number
    distinct?: SpecialEventScalarFieldEnum | SpecialEventScalarFieldEnum[]
  }

  /**
   * SpecialEvent create
   */
  export type SpecialEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * The data needed to create a SpecialEvent.
     */
    data: XOR<SpecialEventCreateInput, SpecialEventUncheckedCreateInput>
  }

  /**
   * SpecialEvent createMany
   */
  export type SpecialEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpecialEvents.
     */
    data: SpecialEventCreateManyInput | SpecialEventCreateManyInput[]
  }

  /**
   * SpecialEvent createManyAndReturn
   */
  export type SpecialEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * The data used to create many SpecialEvents.
     */
    data: SpecialEventCreateManyInput | SpecialEventCreateManyInput[]
  }

  /**
   * SpecialEvent update
   */
  export type SpecialEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * The data needed to update a SpecialEvent.
     */
    data: XOR<SpecialEventUpdateInput, SpecialEventUncheckedUpdateInput>
    /**
     * Choose, which SpecialEvent to update.
     */
    where: SpecialEventWhereUniqueInput
  }

  /**
   * SpecialEvent updateMany
   */
  export type SpecialEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpecialEvents.
     */
    data: XOR<SpecialEventUpdateManyMutationInput, SpecialEventUncheckedUpdateManyInput>
    /**
     * Filter which SpecialEvents to update
     */
    where?: SpecialEventWhereInput
    /**
     * Limit how many SpecialEvents to update.
     */
    limit?: number
  }

  /**
   * SpecialEvent updateManyAndReturn
   */
  export type SpecialEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * The data used to update SpecialEvents.
     */
    data: XOR<SpecialEventUpdateManyMutationInput, SpecialEventUncheckedUpdateManyInput>
    /**
     * Filter which SpecialEvents to update
     */
    where?: SpecialEventWhereInput
    /**
     * Limit how many SpecialEvents to update.
     */
    limit?: number
  }

  /**
   * SpecialEvent upsert
   */
  export type SpecialEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * The filter to search for the SpecialEvent to update in case it exists.
     */
    where: SpecialEventWhereUniqueInput
    /**
     * In case the SpecialEvent found by the `where` argument doesn't exist, create a new SpecialEvent with this data.
     */
    create: XOR<SpecialEventCreateInput, SpecialEventUncheckedCreateInput>
    /**
     * In case the SpecialEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecialEventUpdateInput, SpecialEventUncheckedUpdateInput>
  }

  /**
   * SpecialEvent delete
   */
  export type SpecialEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
    /**
     * Filter which SpecialEvent to delete.
     */
    where: SpecialEventWhereUniqueInput
  }

  /**
   * SpecialEvent deleteMany
   */
  export type SpecialEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpecialEvents to delete
     */
    where?: SpecialEventWhereInput
    /**
     * Limit how many SpecialEvents to delete.
     */
    limit?: number
  }

  /**
   * SpecialEvent.batches
   */
  export type SpecialEvent$batchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Batch
     */
    omit?: BatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BatchInclude<ExtArgs> | null
    where?: BatchWhereInput
    orderBy?: BatchOrderByWithRelationInput | BatchOrderByWithRelationInput[]
    cursor?: BatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BatchScalarFieldEnum | BatchScalarFieldEnum[]
  }

  /**
   * SpecialEvent.participants
   */
  export type SpecialEvent$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    where?: EventParticipantWhereInput
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    cursor?: EventParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventParticipantScalarFieldEnum | EventParticipantScalarFieldEnum[]
  }

  /**
   * SpecialEvent without action
   */
  export type SpecialEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpecialEvent
     */
    select?: SpecialEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SpecialEvent
     */
    omit?: SpecialEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SpecialEventInclude<ExtArgs> | null
  }


  /**
   * Model EventParticipant
   */

  export type AggregateEventParticipant = {
    _count: EventParticipantCountAggregateOutputType | null
    _min: EventParticipantMinAggregateOutputType | null
    _max: EventParticipantMaxAggregateOutputType | null
  }

  export type EventParticipantMinAggregateOutputType = {
    id: string | null
    eventId: string | null
    userUid: string | null
    status: string | null
    respondedAt: Date | null
    createdAt: Date | null
  }

  export type EventParticipantMaxAggregateOutputType = {
    id: string | null
    eventId: string | null
    userUid: string | null
    status: string | null
    respondedAt: Date | null
    createdAt: Date | null
  }

  export type EventParticipantCountAggregateOutputType = {
    id: number
    eventId: number
    userUid: number
    status: number
    respondedAt: number
    createdAt: number
    _all: number
  }


  export type EventParticipantMinAggregateInputType = {
    id?: true
    eventId?: true
    userUid?: true
    status?: true
    respondedAt?: true
    createdAt?: true
  }

  export type EventParticipantMaxAggregateInputType = {
    id?: true
    eventId?: true
    userUid?: true
    status?: true
    respondedAt?: true
    createdAt?: true
  }

  export type EventParticipantCountAggregateInputType = {
    id?: true
    eventId?: true
    userUid?: true
    status?: true
    respondedAt?: true
    createdAt?: true
    _all?: true
  }

  export type EventParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventParticipant to aggregate.
     */
    where?: EventParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipants to fetch.
     */
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventParticipants
    **/
    _count?: true | EventParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventParticipantMaxAggregateInputType
  }

  export type GetEventParticipantAggregateType<T extends EventParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateEventParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventParticipant[P]>
      : GetScalarType<T[P], AggregateEventParticipant[P]>
  }




  export type EventParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventParticipantWhereInput
    orderBy?: EventParticipantOrderByWithAggregationInput | EventParticipantOrderByWithAggregationInput[]
    by: EventParticipantScalarFieldEnum[] | EventParticipantScalarFieldEnum
    having?: EventParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventParticipantCountAggregateInputType | true
    _min?: EventParticipantMinAggregateInputType
    _max?: EventParticipantMaxAggregateInputType
  }

  export type EventParticipantGroupByOutputType = {
    id: string
    eventId: string
    userUid: string
    status: string
    respondedAt: Date | null
    createdAt: Date
    _count: EventParticipantCountAggregateOutputType | null
    _min: EventParticipantMinAggregateOutputType | null
    _max: EventParticipantMaxAggregateOutputType | null
  }

  type GetEventParticipantGroupByPayload<T extends EventParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], EventParticipantGroupByOutputType[P]>
        }
      >
    >


  export type EventParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userUid?: boolean
    status?: boolean
    respondedAt?: boolean
    createdAt?: boolean
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventParticipant"]>

  export type EventParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userUid?: boolean
    status?: boolean
    respondedAt?: boolean
    createdAt?: boolean
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventParticipant"]>

  export type EventParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    userUid?: boolean
    status?: boolean
    respondedAt?: boolean
    createdAt?: boolean
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventParticipant"]>

  export type EventParticipantSelectScalar = {
    id?: boolean
    eventId?: boolean
    userUid?: boolean
    status?: boolean
    respondedAt?: boolean
    createdAt?: boolean
  }

  export type EventParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "eventId" | "userUid" | "status" | "respondedAt" | "createdAt", ExtArgs["result"]["eventParticipant"]>
  export type EventParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | SpecialEventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventParticipant"
    objects: {
      event: Prisma.$SpecialEventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventId: string
      userUid: string
      status: string
      respondedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["eventParticipant"]>
    composites: {}
  }

  type EventParticipantGetPayload<S extends boolean | null | undefined | EventParticipantDefaultArgs> = $Result.GetResult<Prisma.$EventParticipantPayload, S>

  type EventParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventParticipantCountAggregateInputType | true
    }

  export interface EventParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventParticipant'], meta: { name: 'EventParticipant' } }
    /**
     * Find zero or one EventParticipant that matches the filter.
     * @param {EventParticipantFindUniqueArgs} args - Arguments to find a EventParticipant
     * @example
     * // Get one EventParticipant
     * const eventParticipant = await prisma.eventParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventParticipantFindUniqueArgs>(args: SelectSubset<T, EventParticipantFindUniqueArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EventParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventParticipantFindUniqueOrThrowArgs} args - Arguments to find a EventParticipant
     * @example
     * // Get one EventParticipant
     * const eventParticipant = await prisma.eventParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, EventParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantFindFirstArgs} args - Arguments to find a EventParticipant
     * @example
     * // Get one EventParticipant
     * const eventParticipant = await prisma.eventParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventParticipantFindFirstArgs>(args?: SelectSubset<T, EventParticipantFindFirstArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EventParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantFindFirstOrThrowArgs} args - Arguments to find a EventParticipant
     * @example
     * // Get one EventParticipant
     * const eventParticipant = await prisma.eventParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, EventParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EventParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventParticipants
     * const eventParticipants = await prisma.eventParticipant.findMany()
     * 
     * // Get first 10 EventParticipants
     * const eventParticipants = await prisma.eventParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventParticipantWithIdOnly = await prisma.eventParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventParticipantFindManyArgs>(args?: SelectSubset<T, EventParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EventParticipant.
     * @param {EventParticipantCreateArgs} args - Arguments to create a EventParticipant.
     * @example
     * // Create one EventParticipant
     * const EventParticipant = await prisma.eventParticipant.create({
     *   data: {
     *     // ... data to create a EventParticipant
     *   }
     * })
     * 
     */
    create<T extends EventParticipantCreateArgs>(args: SelectSubset<T, EventParticipantCreateArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EventParticipants.
     * @param {EventParticipantCreateManyArgs} args - Arguments to create many EventParticipants.
     * @example
     * // Create many EventParticipants
     * const eventParticipant = await prisma.eventParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventParticipantCreateManyArgs>(args?: SelectSubset<T, EventParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventParticipants and returns the data saved in the database.
     * @param {EventParticipantCreateManyAndReturnArgs} args - Arguments to create many EventParticipants.
     * @example
     * // Create many EventParticipants
     * const eventParticipant = await prisma.eventParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventParticipants and only return the `id`
     * const eventParticipantWithIdOnly = await prisma.eventParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, EventParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EventParticipant.
     * @param {EventParticipantDeleteArgs} args - Arguments to delete one EventParticipant.
     * @example
     * // Delete one EventParticipant
     * const EventParticipant = await prisma.eventParticipant.delete({
     *   where: {
     *     // ... filter to delete one EventParticipant
     *   }
     * })
     * 
     */
    delete<T extends EventParticipantDeleteArgs>(args: SelectSubset<T, EventParticipantDeleteArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EventParticipant.
     * @param {EventParticipantUpdateArgs} args - Arguments to update one EventParticipant.
     * @example
     * // Update one EventParticipant
     * const eventParticipant = await prisma.eventParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventParticipantUpdateArgs>(args: SelectSubset<T, EventParticipantUpdateArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EventParticipants.
     * @param {EventParticipantDeleteManyArgs} args - Arguments to filter EventParticipants to delete.
     * @example
     * // Delete a few EventParticipants
     * const { count } = await prisma.eventParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventParticipantDeleteManyArgs>(args?: SelectSubset<T, EventParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventParticipants
     * const eventParticipant = await prisma.eventParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventParticipantUpdateManyArgs>(args: SelectSubset<T, EventParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventParticipants and returns the data updated in the database.
     * @param {EventParticipantUpdateManyAndReturnArgs} args - Arguments to update many EventParticipants.
     * @example
     * // Update many EventParticipants
     * const eventParticipant = await prisma.eventParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EventParticipants and only return the `id`
     * const eventParticipantWithIdOnly = await prisma.eventParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, EventParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EventParticipant.
     * @param {EventParticipantUpsertArgs} args - Arguments to update or create a EventParticipant.
     * @example
     * // Update or create a EventParticipant
     * const eventParticipant = await prisma.eventParticipant.upsert({
     *   create: {
     *     // ... data to create a EventParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventParticipant we want to update
     *   }
     * })
     */
    upsert<T extends EventParticipantUpsertArgs>(args: SelectSubset<T, EventParticipantUpsertArgs<ExtArgs>>): Prisma__EventParticipantClient<$Result.GetResult<Prisma.$EventParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EventParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantCountArgs} args - Arguments to filter EventParticipants to count.
     * @example
     * // Count the number of EventParticipants
     * const count = await prisma.eventParticipant.count({
     *   where: {
     *     // ... the filter for the EventParticipants we want to count
     *   }
     * })
    **/
    count<T extends EventParticipantCountArgs>(
      args?: Subset<T, EventParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventParticipantAggregateArgs>(args: Subset<T, EventParticipantAggregateArgs>): Prisma.PrismaPromise<GetEventParticipantAggregateType<T>>

    /**
     * Group by EventParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventParticipantGroupByArgs['orderBy'] }
        : { orderBy?: EventParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventParticipant model
   */
  readonly fields: EventParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends SpecialEventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SpecialEventDefaultArgs<ExtArgs>>): Prisma__SpecialEventClient<$Result.GetResult<Prisma.$SpecialEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventParticipant model
   */
  interface EventParticipantFieldRefs {
    readonly id: FieldRef<"EventParticipant", 'String'>
    readonly eventId: FieldRef<"EventParticipant", 'String'>
    readonly userUid: FieldRef<"EventParticipant", 'String'>
    readonly status: FieldRef<"EventParticipant", 'String'>
    readonly respondedAt: FieldRef<"EventParticipant", 'DateTime'>
    readonly createdAt: FieldRef<"EventParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EventParticipant findUnique
   */
  export type EventParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipant to fetch.
     */
    where: EventParticipantWhereUniqueInput
  }

  /**
   * EventParticipant findUniqueOrThrow
   */
  export type EventParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipant to fetch.
     */
    where: EventParticipantWhereUniqueInput
  }

  /**
   * EventParticipant findFirst
   */
  export type EventParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipant to fetch.
     */
    where?: EventParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipants to fetch.
     */
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventParticipants.
     */
    cursor?: EventParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventParticipants.
     */
    distinct?: EventParticipantScalarFieldEnum | EventParticipantScalarFieldEnum[]
  }

  /**
   * EventParticipant findFirstOrThrow
   */
  export type EventParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipant to fetch.
     */
    where?: EventParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipants to fetch.
     */
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventParticipants.
     */
    cursor?: EventParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventParticipants.
     */
    distinct?: EventParticipantScalarFieldEnum | EventParticipantScalarFieldEnum[]
  }

  /**
   * EventParticipant findMany
   */
  export type EventParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter, which EventParticipants to fetch.
     */
    where?: EventParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventParticipants to fetch.
     */
    orderBy?: EventParticipantOrderByWithRelationInput | EventParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventParticipants.
     */
    cursor?: EventParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventParticipants.
     */
    skip?: number
    distinct?: EventParticipantScalarFieldEnum | EventParticipantScalarFieldEnum[]
  }

  /**
   * EventParticipant create
   */
  export type EventParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a EventParticipant.
     */
    data: XOR<EventParticipantCreateInput, EventParticipantUncheckedCreateInput>
  }

  /**
   * EventParticipant createMany
   */
  export type EventParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventParticipants.
     */
    data: EventParticipantCreateManyInput | EventParticipantCreateManyInput[]
  }

  /**
   * EventParticipant createManyAndReturn
   */
  export type EventParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many EventParticipants.
     */
    data: EventParticipantCreateManyInput | EventParticipantCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventParticipant update
   */
  export type EventParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a EventParticipant.
     */
    data: XOR<EventParticipantUpdateInput, EventParticipantUncheckedUpdateInput>
    /**
     * Choose, which EventParticipant to update.
     */
    where: EventParticipantWhereUniqueInput
  }

  /**
   * EventParticipant updateMany
   */
  export type EventParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventParticipants.
     */
    data: XOR<EventParticipantUpdateManyMutationInput, EventParticipantUncheckedUpdateManyInput>
    /**
     * Filter which EventParticipants to update
     */
    where?: EventParticipantWhereInput
    /**
     * Limit how many EventParticipants to update.
     */
    limit?: number
  }

  /**
   * EventParticipant updateManyAndReturn
   */
  export type EventParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * The data used to update EventParticipants.
     */
    data: XOR<EventParticipantUpdateManyMutationInput, EventParticipantUncheckedUpdateManyInput>
    /**
     * Filter which EventParticipants to update
     */
    where?: EventParticipantWhereInput
    /**
     * Limit how many EventParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventParticipant upsert
   */
  export type EventParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the EventParticipant to update in case it exists.
     */
    where: EventParticipantWhereUniqueInput
    /**
     * In case the EventParticipant found by the `where` argument doesn't exist, create a new EventParticipant with this data.
     */
    create: XOR<EventParticipantCreateInput, EventParticipantUncheckedCreateInput>
    /**
     * In case the EventParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventParticipantUpdateInput, EventParticipantUncheckedUpdateInput>
  }

  /**
   * EventParticipant delete
   */
  export type EventParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
    /**
     * Filter which EventParticipant to delete.
     */
    where: EventParticipantWhereUniqueInput
  }

  /**
   * EventParticipant deleteMany
   */
  export type EventParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventParticipants to delete
     */
    where?: EventParticipantWhereInput
    /**
     * Limit how many EventParticipants to delete.
     */
    limit?: number
  }

  /**
   * EventParticipant without action
   */
  export type EventParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventParticipant
     */
    select?: EventParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventParticipant
     */
    omit?: EventParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventParticipantInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: string | null
    classScheduleId: string | null
    studentId: string | null
    teacherId: string | null
    status: string | null
    markedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: string | null
    classScheduleId: string | null
    studentId: string | null
    teacherId: string | null
    status: string | null
    markedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    classScheduleId: number
    studentId: number
    teacherId: number
    status: number
    markedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AttendanceMinAggregateInputType = {
    id?: true
    classScheduleId?: true
    studentId?: true
    teacherId?: true
    status?: true
    markedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    classScheduleId?: true
    studentId?: true
    teacherId?: true
    status?: true
    markedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    classScheduleId?: true
    studentId?: true
    teacherId?: true
    status?: true
    markedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: string
    classScheduleId: string
    studentId: string
    teacherId: string
    status: string
    markedAt: Date
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AttendanceCountAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classScheduleId?: boolean
    studentId?: boolean
    teacherId?: boolean
    status?: boolean
    markedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classScheduleId?: boolean
    studentId?: boolean
    teacherId?: boolean
    status?: boolean
    markedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classScheduleId?: boolean
    studentId?: boolean
    teacherId?: boolean
    status?: boolean
    markedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    classScheduleId?: boolean
    studentId?: boolean
    teacherId?: boolean
    status?: boolean
    markedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classScheduleId" | "studentId" | "teacherId" | "status" | "markedAt" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classSchedule?: boolean | ClassScheduleDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      classSchedule: Prisma.$ClassSchedulePayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classScheduleId: string
      studentId: string
      teacherId: string
      status: string
      markedAt: Date
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classSchedule<T extends ClassScheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassScheduleDefaultArgs<ExtArgs>>): Prisma__ClassScheduleClient<$Result.GetResult<Prisma.$ClassSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'String'>
    readonly classScheduleId: FieldRef<"Attendance", 'String'>
    readonly studentId: FieldRef<"Attendance", 'String'>
    readonly teacherId: FieldRef<"Attendance", 'String'>
    readonly status: FieldRef<"Attendance", 'String'>
    readonly markedAt: FieldRef<"Attendance", 'DateTime'>
    readonly notes: FieldRef<"Attendance", 'String'>
    readonly createdAt: FieldRef<"Attendance", 'DateTime'>
    readonly updatedAt: FieldRef<"Attendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to delete.
     */
    limit?: number
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Model SampleQuestion
   */

  export type AggregateSampleQuestion = {
    _count: SampleQuestionCountAggregateOutputType | null
    _min: SampleQuestionMinAggregateOutputType | null
    _max: SampleQuestionMaxAggregateOutputType | null
  }

  export type SampleQuestionMinAggregateOutputType = {
    id: string | null
    subject: string | null
    class: string | null
    type: $Enums.QuestionType | null
    text: string | null
    imageUrl: string | null
    options: string | null
    correctAnswers: string | null
    explanation: string | null
    difficulty: string | null
    tags: string | null
    createdAt: Date | null
  }

  export type SampleQuestionMaxAggregateOutputType = {
    id: string | null
    subject: string | null
    class: string | null
    type: $Enums.QuestionType | null
    text: string | null
    imageUrl: string | null
    options: string | null
    correctAnswers: string | null
    explanation: string | null
    difficulty: string | null
    tags: string | null
    createdAt: Date | null
  }

  export type SampleQuestionCountAggregateOutputType = {
    id: number
    subject: number
    class: number
    type: number
    text: number
    imageUrl: number
    options: number
    correctAnswers: number
    explanation: number
    difficulty: number
    tags: number
    createdAt: number
    _all: number
  }


  export type SampleQuestionMinAggregateInputType = {
    id?: true
    subject?: true
    class?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    difficulty?: true
    tags?: true
    createdAt?: true
  }

  export type SampleQuestionMaxAggregateInputType = {
    id?: true
    subject?: true
    class?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    difficulty?: true
    tags?: true
    createdAt?: true
  }

  export type SampleQuestionCountAggregateInputType = {
    id?: true
    subject?: true
    class?: true
    type?: true
    text?: true
    imageUrl?: true
    options?: true
    correctAnswers?: true
    explanation?: true
    difficulty?: true
    tags?: true
    createdAt?: true
    _all?: true
  }

  export type SampleQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleQuestion to aggregate.
     */
    where?: SampleQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleQuestions to fetch.
     */
    orderBy?: SampleQuestionOrderByWithRelationInput | SampleQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SampleQuestions
    **/
    _count?: true | SampleQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleQuestionMaxAggregateInputType
  }

  export type GetSampleQuestionAggregateType<T extends SampleQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateSampleQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSampleQuestion[P]>
      : GetScalarType<T[P], AggregateSampleQuestion[P]>
  }




  export type SampleQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleQuestionWhereInput
    orderBy?: SampleQuestionOrderByWithAggregationInput | SampleQuestionOrderByWithAggregationInput[]
    by: SampleQuestionScalarFieldEnum[] | SampleQuestionScalarFieldEnum
    having?: SampleQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleQuestionCountAggregateInputType | true
    _min?: SampleQuestionMinAggregateInputType
    _max?: SampleQuestionMaxAggregateInputType
  }

  export type SampleQuestionGroupByOutputType = {
    id: string
    subject: string
    class: string
    type: $Enums.QuestionType
    text: string
    imageUrl: string | null
    options: string
    correctAnswers: string
    explanation: string | null
    difficulty: string
    tags: string
    createdAt: Date
    _count: SampleQuestionCountAggregateOutputType | null
    _min: SampleQuestionMinAggregateOutputType | null
    _max: SampleQuestionMaxAggregateOutputType | null
  }

  type GetSampleQuestionGroupByPayload<T extends SampleQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], SampleQuestionGroupByOutputType[P]>
        }
      >
    >


  export type SampleQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    class?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    difficulty?: boolean
    tags?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sampleQuestion"]>

  export type SampleQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    class?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    difficulty?: boolean
    tags?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sampleQuestion"]>

  export type SampleQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    class?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    difficulty?: boolean
    tags?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sampleQuestion"]>

  export type SampleQuestionSelectScalar = {
    id?: boolean
    subject?: boolean
    class?: boolean
    type?: boolean
    text?: boolean
    imageUrl?: boolean
    options?: boolean
    correctAnswers?: boolean
    explanation?: boolean
    difficulty?: boolean
    tags?: boolean
    createdAt?: boolean
  }

  export type SampleQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subject" | "class" | "type" | "text" | "imageUrl" | "options" | "correctAnswers" | "explanation" | "difficulty" | "tags" | "createdAt", ExtArgs["result"]["sampleQuestion"]>

  export type $SampleQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SampleQuestion"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subject: string
      class: string
      type: $Enums.QuestionType
      text: string
      imageUrl: string | null
      options: string
      correctAnswers: string
      explanation: string | null
      difficulty: string
      tags: string
      createdAt: Date
    }, ExtArgs["result"]["sampleQuestion"]>
    composites: {}
  }

  type SampleQuestionGetPayload<S extends boolean | null | undefined | SampleQuestionDefaultArgs> = $Result.GetResult<Prisma.$SampleQuestionPayload, S>

  type SampleQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SampleQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SampleQuestionCountAggregateInputType | true
    }

  export interface SampleQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SampleQuestion'], meta: { name: 'SampleQuestion' } }
    /**
     * Find zero or one SampleQuestion that matches the filter.
     * @param {SampleQuestionFindUniqueArgs} args - Arguments to find a SampleQuestion
     * @example
     * // Get one SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleQuestionFindUniqueArgs>(args: SelectSubset<T, SampleQuestionFindUniqueArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SampleQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SampleQuestionFindUniqueOrThrowArgs} args - Arguments to find a SampleQuestion
     * @example
     * // Get one SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionFindFirstArgs} args - Arguments to find a SampleQuestion
     * @example
     * // Get one SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleQuestionFindFirstArgs>(args?: SelectSubset<T, SampleQuestionFindFirstArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SampleQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionFindFirstOrThrowArgs} args - Arguments to find a SampleQuestion
     * @example
     * // Get one SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SampleQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SampleQuestions
     * const sampleQuestions = await prisma.sampleQuestion.findMany()
     * 
     * // Get first 10 SampleQuestions
     * const sampleQuestions = await prisma.sampleQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleQuestionWithIdOnly = await prisma.sampleQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleQuestionFindManyArgs>(args?: SelectSubset<T, SampleQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SampleQuestion.
     * @param {SampleQuestionCreateArgs} args - Arguments to create a SampleQuestion.
     * @example
     * // Create one SampleQuestion
     * const SampleQuestion = await prisma.sampleQuestion.create({
     *   data: {
     *     // ... data to create a SampleQuestion
     *   }
     * })
     * 
     */
    create<T extends SampleQuestionCreateArgs>(args: SelectSubset<T, SampleQuestionCreateArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SampleQuestions.
     * @param {SampleQuestionCreateManyArgs} args - Arguments to create many SampleQuestions.
     * @example
     * // Create many SampleQuestions
     * const sampleQuestion = await prisma.sampleQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleQuestionCreateManyArgs>(args?: SelectSubset<T, SampleQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SampleQuestions and returns the data saved in the database.
     * @param {SampleQuestionCreateManyAndReturnArgs} args - Arguments to create many SampleQuestions.
     * @example
     * // Create many SampleQuestions
     * const sampleQuestion = await prisma.sampleQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SampleQuestions and only return the `id`
     * const sampleQuestionWithIdOnly = await prisma.sampleQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SampleQuestion.
     * @param {SampleQuestionDeleteArgs} args - Arguments to delete one SampleQuestion.
     * @example
     * // Delete one SampleQuestion
     * const SampleQuestion = await prisma.sampleQuestion.delete({
     *   where: {
     *     // ... filter to delete one SampleQuestion
     *   }
     * })
     * 
     */
    delete<T extends SampleQuestionDeleteArgs>(args: SelectSubset<T, SampleQuestionDeleteArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SampleQuestion.
     * @param {SampleQuestionUpdateArgs} args - Arguments to update one SampleQuestion.
     * @example
     * // Update one SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleQuestionUpdateArgs>(args: SelectSubset<T, SampleQuestionUpdateArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SampleQuestions.
     * @param {SampleQuestionDeleteManyArgs} args - Arguments to filter SampleQuestions to delete.
     * @example
     * // Delete a few SampleQuestions
     * const { count } = await prisma.sampleQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleQuestionDeleteManyArgs>(args?: SelectSubset<T, SampleQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SampleQuestions
     * const sampleQuestion = await prisma.sampleQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleQuestionUpdateManyArgs>(args: SelectSubset<T, SampleQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleQuestions and returns the data updated in the database.
     * @param {SampleQuestionUpdateManyAndReturnArgs} args - Arguments to update many SampleQuestions.
     * @example
     * // Update many SampleQuestions
     * const sampleQuestion = await prisma.sampleQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SampleQuestions and only return the `id`
     * const sampleQuestionWithIdOnly = await prisma.sampleQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SampleQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, SampleQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SampleQuestion.
     * @param {SampleQuestionUpsertArgs} args - Arguments to update or create a SampleQuestion.
     * @example
     * // Update or create a SampleQuestion
     * const sampleQuestion = await prisma.sampleQuestion.upsert({
     *   create: {
     *     // ... data to create a SampleQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SampleQuestion we want to update
     *   }
     * })
     */
    upsert<T extends SampleQuestionUpsertArgs>(args: SelectSubset<T, SampleQuestionUpsertArgs<ExtArgs>>): Prisma__SampleQuestionClient<$Result.GetResult<Prisma.$SampleQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SampleQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionCountArgs} args - Arguments to filter SampleQuestions to count.
     * @example
     * // Count the number of SampleQuestions
     * const count = await prisma.sampleQuestion.count({
     *   where: {
     *     // ... the filter for the SampleQuestions we want to count
     *   }
     * })
    **/
    count<T extends SampleQuestionCountArgs>(
      args?: Subset<T, SampleQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SampleQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleQuestionAggregateArgs>(args: Subset<T, SampleQuestionAggregateArgs>): Prisma.PrismaPromise<GetSampleQuestionAggregateType<T>>

    /**
     * Group by SampleQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleQuestionGroupByArgs['orderBy'] }
        : { orderBy?: SampleQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SampleQuestion model
   */
  readonly fields: SampleQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SampleQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SampleQuestion model
   */
  interface SampleQuestionFieldRefs {
    readonly id: FieldRef<"SampleQuestion", 'String'>
    readonly subject: FieldRef<"SampleQuestion", 'String'>
    readonly class: FieldRef<"SampleQuestion", 'String'>
    readonly type: FieldRef<"SampleQuestion", 'QuestionType'>
    readonly text: FieldRef<"SampleQuestion", 'String'>
    readonly imageUrl: FieldRef<"SampleQuestion", 'String'>
    readonly options: FieldRef<"SampleQuestion", 'String'>
    readonly correctAnswers: FieldRef<"SampleQuestion", 'String'>
    readonly explanation: FieldRef<"SampleQuestion", 'String'>
    readonly difficulty: FieldRef<"SampleQuestion", 'String'>
    readonly tags: FieldRef<"SampleQuestion", 'String'>
    readonly createdAt: FieldRef<"SampleQuestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SampleQuestion findUnique
   */
  export type SampleQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter, which SampleQuestion to fetch.
     */
    where: SampleQuestionWhereUniqueInput
  }

  /**
   * SampleQuestion findUniqueOrThrow
   */
  export type SampleQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter, which SampleQuestion to fetch.
     */
    where: SampleQuestionWhereUniqueInput
  }

  /**
   * SampleQuestion findFirst
   */
  export type SampleQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter, which SampleQuestion to fetch.
     */
    where?: SampleQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleQuestions to fetch.
     */
    orderBy?: SampleQuestionOrderByWithRelationInput | SampleQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleQuestions.
     */
    cursor?: SampleQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleQuestions.
     */
    distinct?: SampleQuestionScalarFieldEnum | SampleQuestionScalarFieldEnum[]
  }

  /**
   * SampleQuestion findFirstOrThrow
   */
  export type SampleQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter, which SampleQuestion to fetch.
     */
    where?: SampleQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleQuestions to fetch.
     */
    orderBy?: SampleQuestionOrderByWithRelationInput | SampleQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleQuestions.
     */
    cursor?: SampleQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleQuestions.
     */
    distinct?: SampleQuestionScalarFieldEnum | SampleQuestionScalarFieldEnum[]
  }

  /**
   * SampleQuestion findMany
   */
  export type SampleQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter, which SampleQuestions to fetch.
     */
    where?: SampleQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleQuestions to fetch.
     */
    orderBy?: SampleQuestionOrderByWithRelationInput | SampleQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SampleQuestions.
     */
    cursor?: SampleQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleQuestions.
     */
    skip?: number
    distinct?: SampleQuestionScalarFieldEnum | SampleQuestionScalarFieldEnum[]
  }

  /**
   * SampleQuestion create
   */
  export type SampleQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * The data needed to create a SampleQuestion.
     */
    data: XOR<SampleQuestionCreateInput, SampleQuestionUncheckedCreateInput>
  }

  /**
   * SampleQuestion createMany
   */
  export type SampleQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SampleQuestions.
     */
    data: SampleQuestionCreateManyInput | SampleQuestionCreateManyInput[]
  }

  /**
   * SampleQuestion createManyAndReturn
   */
  export type SampleQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many SampleQuestions.
     */
    data: SampleQuestionCreateManyInput | SampleQuestionCreateManyInput[]
  }

  /**
   * SampleQuestion update
   */
  export type SampleQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * The data needed to update a SampleQuestion.
     */
    data: XOR<SampleQuestionUpdateInput, SampleQuestionUncheckedUpdateInput>
    /**
     * Choose, which SampleQuestion to update.
     */
    where: SampleQuestionWhereUniqueInput
  }

  /**
   * SampleQuestion updateMany
   */
  export type SampleQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SampleQuestions.
     */
    data: XOR<SampleQuestionUpdateManyMutationInput, SampleQuestionUncheckedUpdateManyInput>
    /**
     * Filter which SampleQuestions to update
     */
    where?: SampleQuestionWhereInput
    /**
     * Limit how many SampleQuestions to update.
     */
    limit?: number
  }

  /**
   * SampleQuestion updateManyAndReturn
   */
  export type SampleQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * The data used to update SampleQuestions.
     */
    data: XOR<SampleQuestionUpdateManyMutationInput, SampleQuestionUncheckedUpdateManyInput>
    /**
     * Filter which SampleQuestions to update
     */
    where?: SampleQuestionWhereInput
    /**
     * Limit how many SampleQuestions to update.
     */
    limit?: number
  }

  /**
   * SampleQuestion upsert
   */
  export type SampleQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * The filter to search for the SampleQuestion to update in case it exists.
     */
    where: SampleQuestionWhereUniqueInput
    /**
     * In case the SampleQuestion found by the `where` argument doesn't exist, create a new SampleQuestion with this data.
     */
    create: XOR<SampleQuestionCreateInput, SampleQuestionUncheckedCreateInput>
    /**
     * In case the SampleQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleQuestionUpdateInput, SampleQuestionUncheckedUpdateInput>
  }

  /**
   * SampleQuestion delete
   */
  export type SampleQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
    /**
     * Filter which SampleQuestion to delete.
     */
    where: SampleQuestionWhereUniqueInput
  }

  /**
   * SampleQuestion deleteMany
   */
  export type SampleQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleQuestions to delete
     */
    where?: SampleQuestionWhereInput
    /**
     * Limit how many SampleQuestions to delete.
     */
    limit?: number
  }

  /**
   * SampleQuestion without action
   */
  export type SampleQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleQuestion
     */
    select?: SampleQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SampleQuestion
     */
    omit?: SampleQuestionOmit<ExtArgs> | null
  }


  /**
   * Model Homework
   */

  export type AggregateHomework = {
    _count: HomeworkCountAggregateOutputType | null
    _avg: HomeworkAvgAggregateOutputType | null
    _sum: HomeworkSumAggregateOutputType | null
    _min: HomeworkMinAggregateOutputType | null
    _max: HomeworkMaxAggregateOutputType | null
  }

  export type HomeworkAvgAggregateOutputType = {
    totalMarks: number | null
  }

  export type HomeworkSumAggregateOutputType = {
    totalMarks: number | null
  }

  export type HomeworkMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    instructions: string | null
    subject: string | null
    teacherId: string | null
    batchType: $Enums.BatchType | null
    imageUrl: string | null
    dueDate: Date | null
    totalMarks: number | null
    status: $Enums.HomeworkStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    instructions: string | null
    subject: string | null
    teacherId: string | null
    batchType: $Enums.BatchType | null
    imageUrl: string | null
    dueDate: Date | null
    totalMarks: number | null
    status: $Enums.HomeworkStatus | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkCountAggregateOutputType = {
    id: number
    title: number
    description: number
    instructions: number
    subject: number
    teacherId: number
    batchType: number
    imageUrl: number
    dueDate: number
    totalMarks: number
    status: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HomeworkAvgAggregateInputType = {
    totalMarks?: true
  }

  export type HomeworkSumAggregateInputType = {
    totalMarks?: true
  }

  export type HomeworkMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    subject?: true
    teacherId?: true
    batchType?: true
    imageUrl?: true
    dueDate?: true
    totalMarks?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    subject?: true
    teacherId?: true
    batchType?: true
    imageUrl?: true
    dueDate?: true
    totalMarks?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    instructions?: true
    subject?: true
    teacherId?: true
    batchType?: true
    imageUrl?: true
    dueDate?: true
    totalMarks?: true
    status?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HomeworkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homework to aggregate.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Homework
    **/
    _count?: true | HomeworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HomeworkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HomeworkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeworkMaxAggregateInputType
  }

  export type GetHomeworkAggregateType<T extends HomeworkAggregateArgs> = {
        [P in keyof T & keyof AggregateHomework]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHomework[P]>
      : GetScalarType<T[P], AggregateHomework[P]>
  }




  export type HomeworkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkWhereInput
    orderBy?: HomeworkOrderByWithAggregationInput | HomeworkOrderByWithAggregationInput[]
    by: HomeworkScalarFieldEnum[] | HomeworkScalarFieldEnum
    having?: HomeworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeworkCountAggregateInputType | true
    _avg?: HomeworkAvgAggregateInputType
    _sum?: HomeworkSumAggregateInputType
    _min?: HomeworkMinAggregateInputType
    _max?: HomeworkMaxAggregateInputType
  }

  export type HomeworkGroupByOutputType = {
    id: string
    title: string
    description: string
    instructions: string | null
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    imageUrl: string | null
    dueDate: Date
    totalMarks: number
    status: $Enums.HomeworkStatus
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: HomeworkCountAggregateOutputType | null
    _avg: HomeworkAvgAggregateOutputType | null
    _sum: HomeworkSumAggregateOutputType | null
    _min: HomeworkMinAggregateOutputType | null
    _max: HomeworkMaxAggregateOutputType | null
  }

  type GetHomeworkGroupByPayload<T extends HomeworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeworkGroupByOutputType[P]>
            : GetScalarType<T[P], HomeworkGroupByOutputType[P]>
        }
      >
    >


  export type HomeworkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    subject?: boolean
    teacherId?: boolean
    batchType?: boolean
    imageUrl?: boolean
    dueDate?: boolean
    totalMarks?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Homework$submissionsArgs<ExtArgs>
    _count?: boolean | HomeworkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    subject?: boolean
    teacherId?: boolean
    batchType?: boolean
    imageUrl?: boolean
    dueDate?: boolean
    totalMarks?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    subject?: boolean
    teacherId?: boolean
    batchType?: boolean
    imageUrl?: boolean
    dueDate?: boolean
    totalMarks?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homework"]>

  export type HomeworkSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    instructions?: boolean
    subject?: boolean
    teacherId?: boolean
    batchType?: boolean
    imageUrl?: boolean
    dueDate?: boolean
    totalMarks?: boolean
    status?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HomeworkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "instructions" | "subject" | "teacherId" | "batchType" | "imageUrl" | "dueDate" | "totalMarks" | "status" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["homework"]>
  export type HomeworkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Homework$submissionsArgs<ExtArgs>
    _count?: boolean | HomeworkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HomeworkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HomeworkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HomeworkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Homework"
    objects: {
      teacher: Prisma.$UserPayload<ExtArgs>
      submissions: Prisma.$HomeworkSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      instructions: string | null
      subject: string
      teacherId: string
      batchType: $Enums.BatchType
      imageUrl: string | null
      dueDate: Date
      totalMarks: number
      status: $Enums.HomeworkStatus
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["homework"]>
    composites: {}
  }

  type HomeworkGetPayload<S extends boolean | null | undefined | HomeworkDefaultArgs> = $Result.GetResult<Prisma.$HomeworkPayload, S>

  type HomeworkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HomeworkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HomeworkCountAggregateInputType | true
    }

  export interface HomeworkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Homework'], meta: { name: 'Homework' } }
    /**
     * Find zero or one Homework that matches the filter.
     * @param {HomeworkFindUniqueArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HomeworkFindUniqueArgs>(args: SelectSubset<T, HomeworkFindUniqueArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Homework that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HomeworkFindUniqueOrThrowArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HomeworkFindUniqueOrThrowArgs>(args: SelectSubset<T, HomeworkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Homework that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindFirstArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HomeworkFindFirstArgs>(args?: SelectSubset<T, HomeworkFindFirstArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Homework that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindFirstOrThrowArgs} args - Arguments to find a Homework
     * @example
     * // Get one Homework
     * const homework = await prisma.homework.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HomeworkFindFirstOrThrowArgs>(args?: SelectSubset<T, HomeworkFindFirstOrThrowArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Homework that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Homework
     * const homework = await prisma.homework.findMany()
     * 
     * // Get first 10 Homework
     * const homework = await prisma.homework.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeworkWithIdOnly = await prisma.homework.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HomeworkFindManyArgs>(args?: SelectSubset<T, HomeworkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Homework.
     * @param {HomeworkCreateArgs} args - Arguments to create a Homework.
     * @example
     * // Create one Homework
     * const Homework = await prisma.homework.create({
     *   data: {
     *     // ... data to create a Homework
     *   }
     * })
     * 
     */
    create<T extends HomeworkCreateArgs>(args: SelectSubset<T, HomeworkCreateArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Homework.
     * @param {HomeworkCreateManyArgs} args - Arguments to create many Homework.
     * @example
     * // Create many Homework
     * const homework = await prisma.homework.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HomeworkCreateManyArgs>(args?: SelectSubset<T, HomeworkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Homework and returns the data saved in the database.
     * @param {HomeworkCreateManyAndReturnArgs} args - Arguments to create many Homework.
     * @example
     * // Create many Homework
     * const homework = await prisma.homework.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Homework and only return the `id`
     * const homeworkWithIdOnly = await prisma.homework.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HomeworkCreateManyAndReturnArgs>(args?: SelectSubset<T, HomeworkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Homework.
     * @param {HomeworkDeleteArgs} args - Arguments to delete one Homework.
     * @example
     * // Delete one Homework
     * const Homework = await prisma.homework.delete({
     *   where: {
     *     // ... filter to delete one Homework
     *   }
     * })
     * 
     */
    delete<T extends HomeworkDeleteArgs>(args: SelectSubset<T, HomeworkDeleteArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Homework.
     * @param {HomeworkUpdateArgs} args - Arguments to update one Homework.
     * @example
     * // Update one Homework
     * const homework = await prisma.homework.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HomeworkUpdateArgs>(args: SelectSubset<T, HomeworkUpdateArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Homework.
     * @param {HomeworkDeleteManyArgs} args - Arguments to filter Homework to delete.
     * @example
     * // Delete a few Homework
     * const { count } = await prisma.homework.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HomeworkDeleteManyArgs>(args?: SelectSubset<T, HomeworkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Homework
     * const homework = await prisma.homework.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HomeworkUpdateManyArgs>(args: SelectSubset<T, HomeworkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homework and returns the data updated in the database.
     * @param {HomeworkUpdateManyAndReturnArgs} args - Arguments to update many Homework.
     * @example
     * // Update many Homework
     * const homework = await prisma.homework.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Homework and only return the `id`
     * const homeworkWithIdOnly = await prisma.homework.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HomeworkUpdateManyAndReturnArgs>(args: SelectSubset<T, HomeworkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Homework.
     * @param {HomeworkUpsertArgs} args - Arguments to update or create a Homework.
     * @example
     * // Update or create a Homework
     * const homework = await prisma.homework.upsert({
     *   create: {
     *     // ... data to create a Homework
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Homework we want to update
     *   }
     * })
     */
    upsert<T extends HomeworkUpsertArgs>(args: SelectSubset<T, HomeworkUpsertArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCountArgs} args - Arguments to filter Homework to count.
     * @example
     * // Count the number of Homework
     * const count = await prisma.homework.count({
     *   where: {
     *     // ... the filter for the Homework we want to count
     *   }
     * })
    **/
    count<T extends HomeworkCountArgs>(
      args?: Subset<T, HomeworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeworkAggregateArgs>(args: Subset<T, HomeworkAggregateArgs>): Prisma.PrismaPromise<GetHomeworkAggregateType<T>>

    /**
     * Group by Homework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeworkGroupByArgs['orderBy'] }
        : { orderBy?: HomeworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Homework model
   */
  readonly fields: HomeworkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Homework.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeworkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends Homework$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Homework$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Homework model
   */
  interface HomeworkFieldRefs {
    readonly id: FieldRef<"Homework", 'String'>
    readonly title: FieldRef<"Homework", 'String'>
    readonly description: FieldRef<"Homework", 'String'>
    readonly instructions: FieldRef<"Homework", 'String'>
    readonly subject: FieldRef<"Homework", 'String'>
    readonly teacherId: FieldRef<"Homework", 'String'>
    readonly batchType: FieldRef<"Homework", 'BatchType'>
    readonly imageUrl: FieldRef<"Homework", 'String'>
    readonly dueDate: FieldRef<"Homework", 'DateTime'>
    readonly totalMarks: FieldRef<"Homework", 'Int'>
    readonly status: FieldRef<"Homework", 'HomeworkStatus'>
    readonly isActive: FieldRef<"Homework", 'Boolean'>
    readonly createdAt: FieldRef<"Homework", 'DateTime'>
    readonly updatedAt: FieldRef<"Homework", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Homework findUnique
   */
  export type HomeworkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework findUniqueOrThrow
   */
  export type HomeworkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework findFirst
   */
  export type HomeworkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homework.
     */
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework findFirstOrThrow
   */
  export type HomeworkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homework.
     */
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework findMany
   */
  export type HomeworkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter, which Homework to fetch.
     */
    where?: HomeworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homework to fetch.
     */
    orderBy?: HomeworkOrderByWithRelationInput | HomeworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Homework.
     */
    cursor?: HomeworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homework from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homework.
     */
    skip?: number
    distinct?: HomeworkScalarFieldEnum | HomeworkScalarFieldEnum[]
  }

  /**
   * Homework create
   */
  export type HomeworkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The data needed to create a Homework.
     */
    data: XOR<HomeworkCreateInput, HomeworkUncheckedCreateInput>
  }

  /**
   * Homework createMany
   */
  export type HomeworkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Homework.
     */
    data: HomeworkCreateManyInput | HomeworkCreateManyInput[]
  }

  /**
   * Homework createManyAndReturn
   */
  export type HomeworkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * The data used to create many Homework.
     */
    data: HomeworkCreateManyInput | HomeworkCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Homework update
   */
  export type HomeworkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The data needed to update a Homework.
     */
    data: XOR<HomeworkUpdateInput, HomeworkUncheckedUpdateInput>
    /**
     * Choose, which Homework to update.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework updateMany
   */
  export type HomeworkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Homework.
     */
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyInput>
    /**
     * Filter which Homework to update
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to update.
     */
    limit?: number
  }

  /**
   * Homework updateManyAndReturn
   */
  export type HomeworkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * The data used to update Homework.
     */
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyInput>
    /**
     * Filter which Homework to update
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Homework upsert
   */
  export type HomeworkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * The filter to search for the Homework to update in case it exists.
     */
    where: HomeworkWhereUniqueInput
    /**
     * In case the Homework found by the `where` argument doesn't exist, create a new Homework with this data.
     */
    create: XOR<HomeworkCreateInput, HomeworkUncheckedCreateInput>
    /**
     * In case the Homework was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeworkUpdateInput, HomeworkUncheckedUpdateInput>
  }

  /**
   * Homework delete
   */
  export type HomeworkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
    /**
     * Filter which Homework to delete.
     */
    where: HomeworkWhereUniqueInput
  }

  /**
   * Homework deleteMany
   */
  export type HomeworkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homework to delete
     */
    where?: HomeworkWhereInput
    /**
     * Limit how many Homework to delete.
     */
    limit?: number
  }

  /**
   * Homework.submissions
   */
  export type Homework$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    where?: HomeworkSubmissionWhereInput
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    cursor?: HomeworkSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkSubmissionScalarFieldEnum | HomeworkSubmissionScalarFieldEnum[]
  }

  /**
   * Homework without action
   */
  export type HomeworkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Homework
     */
    select?: HomeworkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Homework
     */
    omit?: HomeworkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkInclude<ExtArgs> | null
  }


  /**
   * Model HomeworkSubmission
   */

  export type AggregateHomeworkSubmission = {
    _count: HomeworkSubmissionCountAggregateOutputType | null
    _avg: HomeworkSubmissionAvgAggregateOutputType | null
    _sum: HomeworkSubmissionSumAggregateOutputType | null
    _min: HomeworkSubmissionMinAggregateOutputType | null
    _max: HomeworkSubmissionMaxAggregateOutputType | null
  }

  export type HomeworkSubmissionAvgAggregateOutputType = {
    marksObtained: number | null
  }

  export type HomeworkSubmissionSumAggregateOutputType = {
    marksObtained: number | null
  }

  export type HomeworkSubmissionMinAggregateOutputType = {
    id: string | null
    homeworkId: string | null
    studentId: string | null
    submissionType: $Enums.SubmissionType | null
    textContent: string | null
    imageUrl: string | null
    documentUrl: string | null
    unableReason: string | null
    status: $Enums.HomeworkStatus | null
    marksObtained: number | null
    teacherRemarks: string | null
    grade: string | null
    submittedAt: Date | null
    reviewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkSubmissionMaxAggregateOutputType = {
    id: string | null
    homeworkId: string | null
    studentId: string | null
    submissionType: $Enums.SubmissionType | null
    textContent: string | null
    imageUrl: string | null
    documentUrl: string | null
    unableReason: string | null
    status: $Enums.HomeworkStatus | null
    marksObtained: number | null
    teacherRemarks: string | null
    grade: string | null
    submittedAt: Date | null
    reviewedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkSubmissionCountAggregateOutputType = {
    id: number
    homeworkId: number
    studentId: number
    submissionType: number
    textContent: number
    imageUrl: number
    documentUrl: number
    unableReason: number
    status: number
    marksObtained: number
    teacherRemarks: number
    grade: number
    submittedAt: number
    reviewedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HomeworkSubmissionAvgAggregateInputType = {
    marksObtained?: true
  }

  export type HomeworkSubmissionSumAggregateInputType = {
    marksObtained?: true
  }

  export type HomeworkSubmissionMinAggregateInputType = {
    id?: true
    homeworkId?: true
    studentId?: true
    submissionType?: true
    textContent?: true
    imageUrl?: true
    documentUrl?: true
    unableReason?: true
    status?: true
    marksObtained?: true
    teacherRemarks?: true
    grade?: true
    submittedAt?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkSubmissionMaxAggregateInputType = {
    id?: true
    homeworkId?: true
    studentId?: true
    submissionType?: true
    textContent?: true
    imageUrl?: true
    documentUrl?: true
    unableReason?: true
    status?: true
    marksObtained?: true
    teacherRemarks?: true
    grade?: true
    submittedAt?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkSubmissionCountAggregateInputType = {
    id?: true
    homeworkId?: true
    studentId?: true
    submissionType?: true
    textContent?: true
    imageUrl?: true
    documentUrl?: true
    unableReason?: true
    status?: true
    marksObtained?: true
    teacherRemarks?: true
    grade?: true
    submittedAt?: true
    reviewedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HomeworkSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HomeworkSubmission to aggregate.
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkSubmissions to fetch.
     */
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeworkSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HomeworkSubmissions
    **/
    _count?: true | HomeworkSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HomeworkSubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HomeworkSubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeworkSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeworkSubmissionMaxAggregateInputType
  }

  export type GetHomeworkSubmissionAggregateType<T extends HomeworkSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateHomeworkSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHomeworkSubmission[P]>
      : GetScalarType<T[P], AggregateHomeworkSubmission[P]>
  }




  export type HomeworkSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkSubmissionWhereInput
    orderBy?: HomeworkSubmissionOrderByWithAggregationInput | HomeworkSubmissionOrderByWithAggregationInput[]
    by: HomeworkSubmissionScalarFieldEnum[] | HomeworkSubmissionScalarFieldEnum
    having?: HomeworkSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeworkSubmissionCountAggregateInputType | true
    _avg?: HomeworkSubmissionAvgAggregateInputType
    _sum?: HomeworkSubmissionSumAggregateInputType
    _min?: HomeworkSubmissionMinAggregateInputType
    _max?: HomeworkSubmissionMaxAggregateInputType
  }

  export type HomeworkSubmissionGroupByOutputType = {
    id: string
    homeworkId: string
    studentId: string
    submissionType: $Enums.SubmissionType
    textContent: string | null
    imageUrl: string | null
    documentUrl: string | null
    unableReason: string | null
    status: $Enums.HomeworkStatus
    marksObtained: number | null
    teacherRemarks: string | null
    grade: string | null
    submittedAt: Date
    reviewedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: HomeworkSubmissionCountAggregateOutputType | null
    _avg: HomeworkSubmissionAvgAggregateOutputType | null
    _sum: HomeworkSubmissionSumAggregateOutputType | null
    _min: HomeworkSubmissionMinAggregateOutputType | null
    _max: HomeworkSubmissionMaxAggregateOutputType | null
  }

  type GetHomeworkSubmissionGroupByPayload<T extends HomeworkSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeworkSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeworkSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeworkSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], HomeworkSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type HomeworkSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeworkId?: boolean
    studentId?: boolean
    submissionType?: boolean
    textContent?: boolean
    imageUrl?: boolean
    documentUrl?: boolean
    unableReason?: boolean
    status?: boolean
    marksObtained?: boolean
    teacherRemarks?: boolean
    grade?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homeworkSubmission"]>

  export type HomeworkSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeworkId?: boolean
    studentId?: boolean
    submissionType?: boolean
    textContent?: boolean
    imageUrl?: boolean
    documentUrl?: boolean
    unableReason?: boolean
    status?: boolean
    marksObtained?: boolean
    teacherRemarks?: boolean
    grade?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homeworkSubmission"]>

  export type HomeworkSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeworkId?: boolean
    studentId?: boolean
    submissionType?: boolean
    textContent?: boolean
    imageUrl?: boolean
    documentUrl?: boolean
    unableReason?: boolean
    status?: boolean
    marksObtained?: boolean
    teacherRemarks?: boolean
    grade?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["homeworkSubmission"]>

  export type HomeworkSubmissionSelectScalar = {
    id?: boolean
    homeworkId?: boolean
    studentId?: boolean
    submissionType?: boolean
    textContent?: boolean
    imageUrl?: boolean
    documentUrl?: boolean
    unableReason?: boolean
    status?: boolean
    marksObtained?: boolean
    teacherRemarks?: boolean
    grade?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HomeworkSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "homeworkId" | "studentId" | "submissionType" | "textContent" | "imageUrl" | "documentUrl" | "unableReason" | "status" | "marksObtained" | "teacherRemarks" | "grade" | "submittedAt" | "reviewedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["homeworkSubmission"]>
  export type HomeworkSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HomeworkSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HomeworkSubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homework?: boolean | HomeworkDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HomeworkSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HomeworkSubmission"
    objects: {
      homework: Prisma.$HomeworkPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      homeworkId: string
      studentId: string
      submissionType: $Enums.SubmissionType
      textContent: string | null
      imageUrl: string | null
      documentUrl: string | null
      unableReason: string | null
      status: $Enums.HomeworkStatus
      marksObtained: number | null
      teacherRemarks: string | null
      grade: string | null
      submittedAt: Date
      reviewedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["homeworkSubmission"]>
    composites: {}
  }

  type HomeworkSubmissionGetPayload<S extends boolean | null | undefined | HomeworkSubmissionDefaultArgs> = $Result.GetResult<Prisma.$HomeworkSubmissionPayload, S>

  type HomeworkSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HomeworkSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HomeworkSubmissionCountAggregateInputType | true
    }

  export interface HomeworkSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HomeworkSubmission'], meta: { name: 'HomeworkSubmission' } }
    /**
     * Find zero or one HomeworkSubmission that matches the filter.
     * @param {HomeworkSubmissionFindUniqueArgs} args - Arguments to find a HomeworkSubmission
     * @example
     * // Get one HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HomeworkSubmissionFindUniqueArgs>(args: SelectSubset<T, HomeworkSubmissionFindUniqueArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HomeworkSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HomeworkSubmissionFindUniqueOrThrowArgs} args - Arguments to find a HomeworkSubmission
     * @example
     * // Get one HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HomeworkSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, HomeworkSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HomeworkSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionFindFirstArgs} args - Arguments to find a HomeworkSubmission
     * @example
     * // Get one HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HomeworkSubmissionFindFirstArgs>(args?: SelectSubset<T, HomeworkSubmissionFindFirstArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HomeworkSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionFindFirstOrThrowArgs} args - Arguments to find a HomeworkSubmission
     * @example
     * // Get one HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HomeworkSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, HomeworkSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HomeworkSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HomeworkSubmissions
     * const homeworkSubmissions = await prisma.homeworkSubmission.findMany()
     * 
     * // Get first 10 HomeworkSubmissions
     * const homeworkSubmissions = await prisma.homeworkSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeworkSubmissionWithIdOnly = await prisma.homeworkSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HomeworkSubmissionFindManyArgs>(args?: SelectSubset<T, HomeworkSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HomeworkSubmission.
     * @param {HomeworkSubmissionCreateArgs} args - Arguments to create a HomeworkSubmission.
     * @example
     * // Create one HomeworkSubmission
     * const HomeworkSubmission = await prisma.homeworkSubmission.create({
     *   data: {
     *     // ... data to create a HomeworkSubmission
     *   }
     * })
     * 
     */
    create<T extends HomeworkSubmissionCreateArgs>(args: SelectSubset<T, HomeworkSubmissionCreateArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HomeworkSubmissions.
     * @param {HomeworkSubmissionCreateManyArgs} args - Arguments to create many HomeworkSubmissions.
     * @example
     * // Create many HomeworkSubmissions
     * const homeworkSubmission = await prisma.homeworkSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HomeworkSubmissionCreateManyArgs>(args?: SelectSubset<T, HomeworkSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HomeworkSubmissions and returns the data saved in the database.
     * @param {HomeworkSubmissionCreateManyAndReturnArgs} args - Arguments to create many HomeworkSubmissions.
     * @example
     * // Create many HomeworkSubmissions
     * const homeworkSubmission = await prisma.homeworkSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HomeworkSubmissions and only return the `id`
     * const homeworkSubmissionWithIdOnly = await prisma.homeworkSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HomeworkSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, HomeworkSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HomeworkSubmission.
     * @param {HomeworkSubmissionDeleteArgs} args - Arguments to delete one HomeworkSubmission.
     * @example
     * // Delete one HomeworkSubmission
     * const HomeworkSubmission = await prisma.homeworkSubmission.delete({
     *   where: {
     *     // ... filter to delete one HomeworkSubmission
     *   }
     * })
     * 
     */
    delete<T extends HomeworkSubmissionDeleteArgs>(args: SelectSubset<T, HomeworkSubmissionDeleteArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HomeworkSubmission.
     * @param {HomeworkSubmissionUpdateArgs} args - Arguments to update one HomeworkSubmission.
     * @example
     * // Update one HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HomeworkSubmissionUpdateArgs>(args: SelectSubset<T, HomeworkSubmissionUpdateArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HomeworkSubmissions.
     * @param {HomeworkSubmissionDeleteManyArgs} args - Arguments to filter HomeworkSubmissions to delete.
     * @example
     * // Delete a few HomeworkSubmissions
     * const { count } = await prisma.homeworkSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HomeworkSubmissionDeleteManyArgs>(args?: SelectSubset<T, HomeworkSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HomeworkSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HomeworkSubmissions
     * const homeworkSubmission = await prisma.homeworkSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HomeworkSubmissionUpdateManyArgs>(args: SelectSubset<T, HomeworkSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HomeworkSubmissions and returns the data updated in the database.
     * @param {HomeworkSubmissionUpdateManyAndReturnArgs} args - Arguments to update many HomeworkSubmissions.
     * @example
     * // Update many HomeworkSubmissions
     * const homeworkSubmission = await prisma.homeworkSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HomeworkSubmissions and only return the `id`
     * const homeworkSubmissionWithIdOnly = await prisma.homeworkSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HomeworkSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, HomeworkSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HomeworkSubmission.
     * @param {HomeworkSubmissionUpsertArgs} args - Arguments to update or create a HomeworkSubmission.
     * @example
     * // Update or create a HomeworkSubmission
     * const homeworkSubmission = await prisma.homeworkSubmission.upsert({
     *   create: {
     *     // ... data to create a HomeworkSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HomeworkSubmission we want to update
     *   }
     * })
     */
    upsert<T extends HomeworkSubmissionUpsertArgs>(args: SelectSubset<T, HomeworkSubmissionUpsertArgs<ExtArgs>>): Prisma__HomeworkSubmissionClient<$Result.GetResult<Prisma.$HomeworkSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HomeworkSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionCountArgs} args - Arguments to filter HomeworkSubmissions to count.
     * @example
     * // Count the number of HomeworkSubmissions
     * const count = await prisma.homeworkSubmission.count({
     *   where: {
     *     // ... the filter for the HomeworkSubmissions we want to count
     *   }
     * })
    **/
    count<T extends HomeworkSubmissionCountArgs>(
      args?: Subset<T, HomeworkSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeworkSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HomeworkSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeworkSubmissionAggregateArgs>(args: Subset<T, HomeworkSubmissionAggregateArgs>): Prisma.PrismaPromise<GetHomeworkSubmissionAggregateType<T>>

    /**
     * Group by HomeworkSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeworkSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeworkSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: HomeworkSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeworkSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeworkSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HomeworkSubmission model
   */
  readonly fields: HomeworkSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HomeworkSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeworkSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    homework<T extends HomeworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HomeworkDefaultArgs<ExtArgs>>): Prisma__HomeworkClient<$Result.GetResult<Prisma.$HomeworkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HomeworkSubmission model
   */
  interface HomeworkSubmissionFieldRefs {
    readonly id: FieldRef<"HomeworkSubmission", 'String'>
    readonly homeworkId: FieldRef<"HomeworkSubmission", 'String'>
    readonly studentId: FieldRef<"HomeworkSubmission", 'String'>
    readonly submissionType: FieldRef<"HomeworkSubmission", 'SubmissionType'>
    readonly textContent: FieldRef<"HomeworkSubmission", 'String'>
    readonly imageUrl: FieldRef<"HomeworkSubmission", 'String'>
    readonly documentUrl: FieldRef<"HomeworkSubmission", 'String'>
    readonly unableReason: FieldRef<"HomeworkSubmission", 'String'>
    readonly status: FieldRef<"HomeworkSubmission", 'HomeworkStatus'>
    readonly marksObtained: FieldRef<"HomeworkSubmission", 'Int'>
    readonly teacherRemarks: FieldRef<"HomeworkSubmission", 'String'>
    readonly grade: FieldRef<"HomeworkSubmission", 'String'>
    readonly submittedAt: FieldRef<"HomeworkSubmission", 'DateTime'>
    readonly reviewedAt: FieldRef<"HomeworkSubmission", 'DateTime'>
    readonly createdAt: FieldRef<"HomeworkSubmission", 'DateTime'>
    readonly updatedAt: FieldRef<"HomeworkSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HomeworkSubmission findUnique
   */
  export type HomeworkSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkSubmission to fetch.
     */
    where: HomeworkSubmissionWhereUniqueInput
  }

  /**
   * HomeworkSubmission findUniqueOrThrow
   */
  export type HomeworkSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkSubmission to fetch.
     */
    where: HomeworkSubmissionWhereUniqueInput
  }

  /**
   * HomeworkSubmission findFirst
   */
  export type HomeworkSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkSubmission to fetch.
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkSubmissions to fetch.
     */
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HomeworkSubmissions.
     */
    cursor?: HomeworkSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HomeworkSubmissions.
     */
    distinct?: HomeworkSubmissionScalarFieldEnum | HomeworkSubmissionScalarFieldEnum[]
  }

  /**
   * HomeworkSubmission findFirstOrThrow
   */
  export type HomeworkSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkSubmission to fetch.
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkSubmissions to fetch.
     */
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HomeworkSubmissions.
     */
    cursor?: HomeworkSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HomeworkSubmissions.
     */
    distinct?: HomeworkSubmissionScalarFieldEnum | HomeworkSubmissionScalarFieldEnum[]
  }

  /**
   * HomeworkSubmission findMany
   */
  export type HomeworkSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkSubmissions to fetch.
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkSubmissions to fetch.
     */
    orderBy?: HomeworkSubmissionOrderByWithRelationInput | HomeworkSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HomeworkSubmissions.
     */
    cursor?: HomeworkSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkSubmissions.
     */
    skip?: number
    distinct?: HomeworkSubmissionScalarFieldEnum | HomeworkSubmissionScalarFieldEnum[]
  }

  /**
   * HomeworkSubmission create
   */
  export type HomeworkSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a HomeworkSubmission.
     */
    data: XOR<HomeworkSubmissionCreateInput, HomeworkSubmissionUncheckedCreateInput>
  }

  /**
   * HomeworkSubmission createMany
   */
  export type HomeworkSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HomeworkSubmissions.
     */
    data: HomeworkSubmissionCreateManyInput | HomeworkSubmissionCreateManyInput[]
  }

  /**
   * HomeworkSubmission createManyAndReturn
   */
  export type HomeworkSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many HomeworkSubmissions.
     */
    data: HomeworkSubmissionCreateManyInput | HomeworkSubmissionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HomeworkSubmission update
   */
  export type HomeworkSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a HomeworkSubmission.
     */
    data: XOR<HomeworkSubmissionUpdateInput, HomeworkSubmissionUncheckedUpdateInput>
    /**
     * Choose, which HomeworkSubmission to update.
     */
    where: HomeworkSubmissionWhereUniqueInput
  }

  /**
   * HomeworkSubmission updateMany
   */
  export type HomeworkSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HomeworkSubmissions.
     */
    data: XOR<HomeworkSubmissionUpdateManyMutationInput, HomeworkSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which HomeworkSubmissions to update
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * Limit how many HomeworkSubmissions to update.
     */
    limit?: number
  }

  /**
   * HomeworkSubmission updateManyAndReturn
   */
  export type HomeworkSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update HomeworkSubmissions.
     */
    data: XOR<HomeworkSubmissionUpdateManyMutationInput, HomeworkSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which HomeworkSubmissions to update
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * Limit how many HomeworkSubmissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HomeworkSubmission upsert
   */
  export type HomeworkSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the HomeworkSubmission to update in case it exists.
     */
    where: HomeworkSubmissionWhereUniqueInput
    /**
     * In case the HomeworkSubmission found by the `where` argument doesn't exist, create a new HomeworkSubmission with this data.
     */
    create: XOR<HomeworkSubmissionCreateInput, HomeworkSubmissionUncheckedCreateInput>
    /**
     * In case the HomeworkSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeworkSubmissionUpdateInput, HomeworkSubmissionUncheckedUpdateInput>
  }

  /**
   * HomeworkSubmission delete
   */
  export type HomeworkSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
    /**
     * Filter which HomeworkSubmission to delete.
     */
    where: HomeworkSubmissionWhereUniqueInput
  }

  /**
   * HomeworkSubmission deleteMany
   */
  export type HomeworkSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HomeworkSubmissions to delete
     */
    where?: HomeworkSubmissionWhereInput
    /**
     * Limit how many HomeworkSubmissions to delete.
     */
    limit?: number
  }

  /**
   * HomeworkSubmission without action
   */
  export type HomeworkSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkSubmission
     */
    select?: HomeworkSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HomeworkSubmission
     */
    omit?: HomeworkSubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkSubmissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    password: 'password',
    fullName: 'fullName',
    role: 'role',
    batchType: 'batchType',
    subjects: 'subjects',
    roomNumber: 'roomNumber',
    avatar: 'avatar',
    phone: 'phone',
    address: 'address',
    dateOfBirth: 'dateOfBirth',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    subject: 'subject',
    grade: 'grade',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const ClassStudentScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    studentId: 'studentId',
    joinedAt: 'joinedAt'
  };

  export type ClassStudentScalarFieldEnum = (typeof ClassStudentScalarFieldEnum)[keyof typeof ClassStudentScalarFieldEnum]


  export const DoubtScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    subject: 'subject',
    description: 'description',
    imageUrl: 'imageUrl',
    priority: 'priority',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoubtScalarFieldEnum = (typeof DoubtScalarFieldEnum)[keyof typeof DoubtScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    doubtId: 'doubtId',
    teacherId: 'teacherId',
    scheduledAt: 'scheduledAt',
    duration: 'duration',
    notes: 'notes',
    meetingLink: 'meetingLink',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const TestScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    classId: 'classId',
    authorId: 'authorId',
    duration: 'duration',
    totalMarks: 'totalMarks',
    passingMarks: 'passingMarks',
    instructions: 'instructions',
    status: 'status',
    scheduledAt: 'scheduledAt',
    endsAt: 'endsAt',
    allowReview: 'allowReview',
    shuffleQuestions: 'shuffleQuestions',
    showResults: 'showResults',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const SectionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    testId: 'testId',
    order: 'order',
    timeLimit: 'timeLimit'
  };

  export type SectionScalarFieldEnum = (typeof SectionScalarFieldEnum)[keyof typeof SectionScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    sectionId: 'sectionId',
    type: 'type',
    text: 'text',
    imageUrl: 'imageUrl',
    options: 'options',
    correctAnswers: 'correctAnswers',
    explanation: 'explanation',
    marks: 'marks',
    negativeMarks: 'negativeMarks',
    difficulty: 'difficulty',
    order: 'order',
    tags: 'tags'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    testId: 'testId',
    studentId: 'studentId',
    answers: 'answers',
    score: 'score',
    totalMarks: 'totalMarks',
    percentage: 'percentage',
    timeTaken: 'timeTaken',
    isCompleted: 'isCompleted',
    startedAt: 'startedAt',
    submittedAt: 'submittedAt',
    createdAt: 'createdAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    actionUrl: 'actionUrl',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ClassScheduleScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    teacherId: 'teacherId',
    creatorId: 'creatorId',
    batchType: 'batchType',
    roomNumber: 'roomNumber',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    topic: 'topic',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassScheduleScalarFieldEnum = (typeof ClassScheduleScalarFieldEnum)[keyof typeof ClassScheduleScalarFieldEnum]


  export const BatchScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BatchScalarFieldEnum = (typeof BatchScalarFieldEnum)[keyof typeof BatchScalarFieldEnum]


  export const SpecialEventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    scheduledAt: 'scheduledAt',
    duration: 'duration',
    location: 'location',
    status: 'status',
    maxParticipants: 'maxParticipants',
    isRecurring: 'isRecurring',
    recurringPattern: 'recurringPattern',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SpecialEventScalarFieldEnum = (typeof SpecialEventScalarFieldEnum)[keyof typeof SpecialEventScalarFieldEnum]


  export const EventParticipantScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    userUid: 'userUid',
    status: 'status',
    respondedAt: 'respondedAt',
    createdAt: 'createdAt'
  };

  export type EventParticipantScalarFieldEnum = (typeof EventParticipantScalarFieldEnum)[keyof typeof EventParticipantScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    classScheduleId: 'classScheduleId',
    studentId: 'studentId',
    teacherId: 'teacherId',
    status: 'status',
    markedAt: 'markedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const SampleQuestionScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    class: 'class',
    type: 'type',
    text: 'text',
    imageUrl: 'imageUrl',
    options: 'options',
    correctAnswers: 'correctAnswers',
    explanation: 'explanation',
    difficulty: 'difficulty',
    tags: 'tags',
    createdAt: 'createdAt'
  };

  export type SampleQuestionScalarFieldEnum = (typeof SampleQuestionScalarFieldEnum)[keyof typeof SampleQuestionScalarFieldEnum]


  export const HomeworkScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    instructions: 'instructions',
    subject: 'subject',
    teacherId: 'teacherId',
    batchType: 'batchType',
    imageUrl: 'imageUrl',
    dueDate: 'dueDate',
    totalMarks: 'totalMarks',
    status: 'status',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HomeworkScalarFieldEnum = (typeof HomeworkScalarFieldEnum)[keyof typeof HomeworkScalarFieldEnum]


  export const HomeworkSubmissionScalarFieldEnum: {
    id: 'id',
    homeworkId: 'homeworkId',
    studentId: 'studentId',
    submissionType: 'submissionType',
    textContent: 'textContent',
    imageUrl: 'imageUrl',
    documentUrl: 'documentUrl',
    unableReason: 'unableReason',
    status: 'status',
    marksObtained: 'marksObtained',
    teacherRemarks: 'teacherRemarks',
    grade: 'grade',
    submittedAt: 'submittedAt',
    reviewedAt: 'reviewedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HomeworkSubmissionScalarFieldEnum = (typeof HomeworkSubmissionScalarFieldEnum)[keyof typeof HomeworkSubmissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'BatchType'
   */
  export type EnumBatchTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BatchType'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DoubtStatus'
   */
  export type EnumDoubtStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DoubtStatus'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'TestStatus'
   */
  export type EnumTestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TestStatus'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'HomeworkStatus'
   */
  export type EnumHomeworkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HomeworkStatus'>
    


  /**
   * Reference to a field of type 'SubmissionType'
   */
  export type EnumSubmissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubmissionType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    uid?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    batchType?: EnumBatchTypeNullableFilter<"User"> | $Enums.BatchType | null
    subjects?: StringNullableFilter<"User"> | string | null
    roomNumber?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    doubts?: DoubtListRelationFilter
    appointments?: AppointmentListRelationFilter
    testsCreated?: TestListRelationFilter
    submissions?: SubmissionListRelationFilter
    classes?: ClassStudentListRelationFilter
    notifications?: NotificationListRelationFilter
    scheduledClasses?: ClassScheduleListRelationFilter
    createdClasses?: ClassScheduleListRelationFilter
    studentAttendance?: AttendanceListRelationFilter
    teacherAttendance?: AttendanceListRelationFilter
    eventParticipations?: EventParticipantListRelationFilter
    batchesTeaching?: BatchListRelationFilter
    homeworkAssigned?: HomeworkListRelationFilter
    homeworkSubmissions?: HomeworkSubmissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    batchType?: SortOrderInput | SortOrder
    subjects?: SortOrderInput | SortOrder
    roomNumber?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doubts?: DoubtOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    testsCreated?: TestOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    classes?: ClassStudentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    scheduledClasses?: ClassScheduleOrderByRelationAggregateInput
    createdClasses?: ClassScheduleOrderByRelationAggregateInput
    studentAttendance?: AttendanceOrderByRelationAggregateInput
    teacherAttendance?: AttendanceOrderByRelationAggregateInput
    eventParticipations?: EventParticipantOrderByRelationAggregateInput
    batchesTeaching?: BatchOrderByRelationAggregateInput
    homeworkAssigned?: HomeworkOrderByRelationAggregateInput
    homeworkSubmissions?: HomeworkSubmissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    uid?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    batchType?: EnumBatchTypeNullableFilter<"User"> | $Enums.BatchType | null
    subjects?: StringNullableFilter<"User"> | string | null
    roomNumber?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    doubts?: DoubtListRelationFilter
    appointments?: AppointmentListRelationFilter
    testsCreated?: TestListRelationFilter
    submissions?: SubmissionListRelationFilter
    classes?: ClassStudentListRelationFilter
    notifications?: NotificationListRelationFilter
    scheduledClasses?: ClassScheduleListRelationFilter
    createdClasses?: ClassScheduleListRelationFilter
    studentAttendance?: AttendanceListRelationFilter
    teacherAttendance?: AttendanceListRelationFilter
    eventParticipations?: EventParticipantListRelationFilter
    batchesTeaching?: BatchListRelationFilter
    homeworkAssigned?: HomeworkListRelationFilter
    homeworkSubmissions?: HomeworkSubmissionListRelationFilter
  }, "id" | "uid">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    batchType?: SortOrderInput | SortOrder
    subjects?: SortOrderInput | SortOrder
    roomNumber?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    uid?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    batchType?: EnumBatchTypeNullableWithAggregatesFilter<"User"> | $Enums.BatchType | null
    subjects?: StringNullableWithAggregatesFilter<"User"> | string | null
    roomNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    description?: StringNullableFilter<"Class"> | string | null
    subject?: StringFilter<"Class"> | string
    grade?: StringFilter<"Class"> | string
    isActive?: BoolFilter<"Class"> | boolean
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    students?: ClassStudentListRelationFilter
    tests?: TestListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    grade?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    students?: ClassStudentOrderByRelationAggregateInput
    tests?: TestOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    description?: StringNullableFilter<"Class"> | string | null
    subject?: StringFilter<"Class"> | string
    grade?: StringFilter<"Class"> | string
    isActive?: BoolFilter<"Class"> | boolean
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updatedAt?: DateTimeFilter<"Class"> | Date | string
    students?: ClassStudentListRelationFilter
    tests?: TestListRelationFilter
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    subject?: SortOrder
    grade?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    description?: StringNullableWithAggregatesFilter<"Class"> | string | null
    subject?: StringWithAggregatesFilter<"Class"> | string
    grade?: StringWithAggregatesFilter<"Class"> | string
    isActive?: BoolWithAggregatesFilter<"Class"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
  }

  export type ClassStudentWhereInput = {
    AND?: ClassStudentWhereInput | ClassStudentWhereInput[]
    OR?: ClassStudentWhereInput[]
    NOT?: ClassStudentWhereInput | ClassStudentWhereInput[]
    id?: StringFilter<"ClassStudent"> | string
    classId?: StringFilter<"ClassStudent"> | string
    studentId?: StringFilter<"ClassStudent"> | string
    joinedAt?: DateTimeFilter<"ClassStudent"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ClassStudentOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    joinedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type ClassStudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    classId_studentId?: ClassStudentClassIdStudentIdCompoundUniqueInput
    AND?: ClassStudentWhereInput | ClassStudentWhereInput[]
    OR?: ClassStudentWhereInput[]
    NOT?: ClassStudentWhereInput | ClassStudentWhereInput[]
    classId?: StringFilter<"ClassStudent"> | string
    studentId?: StringFilter<"ClassStudent"> | string
    joinedAt?: DateTimeFilter<"ClassStudent"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "classId_studentId">

  export type ClassStudentOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    joinedAt?: SortOrder
    _count?: ClassStudentCountOrderByAggregateInput
    _max?: ClassStudentMaxOrderByAggregateInput
    _min?: ClassStudentMinOrderByAggregateInput
  }

  export type ClassStudentScalarWhereWithAggregatesInput = {
    AND?: ClassStudentScalarWhereWithAggregatesInput | ClassStudentScalarWhereWithAggregatesInput[]
    OR?: ClassStudentScalarWhereWithAggregatesInput[]
    NOT?: ClassStudentScalarWhereWithAggregatesInput | ClassStudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassStudent"> | string
    classId?: StringWithAggregatesFilter<"ClassStudent"> | string
    studentId?: StringWithAggregatesFilter<"ClassStudent"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"ClassStudent"> | Date | string
  }

  export type DoubtWhereInput = {
    AND?: DoubtWhereInput | DoubtWhereInput[]
    OR?: DoubtWhereInput[]
    NOT?: DoubtWhereInput | DoubtWhereInput[]
    id?: StringFilter<"Doubt"> | string
    studentId?: StringFilter<"Doubt"> | string
    subject?: StringFilter<"Doubt"> | string
    description?: StringFilter<"Doubt"> | string
    imageUrl?: StringNullableFilter<"Doubt"> | string | null
    priority?: StringFilter<"Doubt"> | string
    status?: EnumDoubtStatusFilter<"Doubt"> | $Enums.DoubtStatus
    createdAt?: DateTimeFilter<"Doubt"> | Date | string
    updatedAt?: DateTimeFilter<"Doubt"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }

  export type DoubtOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: UserOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type DoubtWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoubtWhereInput | DoubtWhereInput[]
    OR?: DoubtWhereInput[]
    NOT?: DoubtWhereInput | DoubtWhereInput[]
    studentId?: StringFilter<"Doubt"> | string
    subject?: StringFilter<"Doubt"> | string
    description?: StringFilter<"Doubt"> | string
    imageUrl?: StringNullableFilter<"Doubt"> | string | null
    priority?: StringFilter<"Doubt"> | string
    status?: EnumDoubtStatusFilter<"Doubt"> | $Enums.DoubtStatus
    createdAt?: DateTimeFilter<"Doubt"> | Date | string
    updatedAt?: DateTimeFilter<"Doubt"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }, "id">

  export type DoubtOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoubtCountOrderByAggregateInput
    _max?: DoubtMaxOrderByAggregateInput
    _min?: DoubtMinOrderByAggregateInput
  }

  export type DoubtScalarWhereWithAggregatesInput = {
    AND?: DoubtScalarWhereWithAggregatesInput | DoubtScalarWhereWithAggregatesInput[]
    OR?: DoubtScalarWhereWithAggregatesInput[]
    NOT?: DoubtScalarWhereWithAggregatesInput | DoubtScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doubt"> | string
    studentId?: StringWithAggregatesFilter<"Doubt"> | string
    subject?: StringWithAggregatesFilter<"Doubt"> | string
    description?: StringWithAggregatesFilter<"Doubt"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Doubt"> | string | null
    priority?: StringWithAggregatesFilter<"Doubt"> | string
    status?: EnumDoubtStatusWithAggregatesFilter<"Doubt"> | $Enums.DoubtStatus
    createdAt?: DateTimeWithAggregatesFilter<"Doubt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doubt"> | Date | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    doubtId?: StringFilter<"Appointment"> | string
    teacherId?: StringFilter<"Appointment"> | string
    scheduledAt?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntFilter<"Appointment"> | number
    notes?: StringNullableFilter<"Appointment"> | string | null
    meetingLink?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    doubt?: XOR<DoubtScalarRelationFilter, DoubtWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    doubtId?: SortOrder
    teacherId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrderInput | SortOrder
    meetingLink?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doubt?: DoubtOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doubtId?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    teacherId?: StringFilter<"Appointment"> | string
    scheduledAt?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntFilter<"Appointment"> | number
    notes?: StringNullableFilter<"Appointment"> | string | null
    meetingLink?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    doubt?: XOR<DoubtScalarRelationFilter, DoubtWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "doubtId">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    doubtId?: SortOrder
    teacherId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrderInput | SortOrder
    meetingLink?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    doubtId?: StringWithAggregatesFilter<"Appointment"> | string
    teacherId?: StringWithAggregatesFilter<"Appointment"> | string
    scheduledAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    duration?: IntWithAggregatesFilter<"Appointment"> | number
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    meetingLink?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    status?: StringWithAggregatesFilter<"Appointment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type TestWhereInput = {
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    id?: StringFilter<"Test"> | string
    title?: StringFilter<"Test"> | string
    description?: StringNullableFilter<"Test"> | string | null
    classId?: StringNullableFilter<"Test"> | string | null
    authorId?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    totalMarks?: IntFilter<"Test"> | number
    passingMarks?: IntFilter<"Test"> | number
    instructions?: StringNullableFilter<"Test"> | string | null
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    scheduledAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    allowReview?: BoolFilter<"Test"> | boolean
    shuffleQuestions?: BoolFilter<"Test"> | boolean
    showResults?: BoolFilter<"Test"> | boolean
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updatedAt?: DateTimeFilter<"Test"> | Date | string
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    sections?: SectionListRelationFilter
    submissions?: SubmissionListRelationFilter
  }

  export type TestOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
    instructions?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    allowReview?: SortOrder
    shuffleQuestions?: SortOrder
    showResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: ClassOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
    sections?: SectionOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
  }

  export type TestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    title?: StringFilter<"Test"> | string
    description?: StringNullableFilter<"Test"> | string | null
    classId?: StringNullableFilter<"Test"> | string | null
    authorId?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    totalMarks?: IntFilter<"Test"> | number
    passingMarks?: IntFilter<"Test"> | number
    instructions?: StringNullableFilter<"Test"> | string | null
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    scheduledAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    allowReview?: BoolFilter<"Test"> | boolean
    shuffleQuestions?: BoolFilter<"Test"> | boolean
    showResults?: BoolFilter<"Test"> | boolean
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updatedAt?: DateTimeFilter<"Test"> | Date | string
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    author?: XOR<UserScalarRelationFilter, UserWhereInput>
    sections?: SectionListRelationFilter
    submissions?: SubmissionListRelationFilter
  }, "id">

  export type TestOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    classId?: SortOrderInput | SortOrder
    authorId?: SortOrder
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
    instructions?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledAt?: SortOrderInput | SortOrder
    endsAt?: SortOrderInput | SortOrder
    allowReview?: SortOrder
    shuffleQuestions?: SortOrder
    showResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCountOrderByAggregateInput
    _avg?: TestAvgOrderByAggregateInput
    _max?: TestMaxOrderByAggregateInput
    _min?: TestMinOrderByAggregateInput
    _sum?: TestSumOrderByAggregateInput
  }

  export type TestScalarWhereWithAggregatesInput = {
    AND?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    OR?: TestScalarWhereWithAggregatesInput[]
    NOT?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Test"> | string
    title?: StringWithAggregatesFilter<"Test"> | string
    description?: StringNullableWithAggregatesFilter<"Test"> | string | null
    classId?: StringNullableWithAggregatesFilter<"Test"> | string | null
    authorId?: StringWithAggregatesFilter<"Test"> | string
    duration?: IntWithAggregatesFilter<"Test"> | number
    totalMarks?: IntWithAggregatesFilter<"Test"> | number
    passingMarks?: IntWithAggregatesFilter<"Test"> | number
    instructions?: StringNullableWithAggregatesFilter<"Test"> | string | null
    status?: EnumTestStatusWithAggregatesFilter<"Test"> | $Enums.TestStatus
    scheduledAt?: DateTimeNullableWithAggregatesFilter<"Test"> | Date | string | null
    endsAt?: DateTimeNullableWithAggregatesFilter<"Test"> | Date | string | null
    allowReview?: BoolWithAggregatesFilter<"Test"> | boolean
    shuffleQuestions?: BoolWithAggregatesFilter<"Test"> | boolean
    showResults?: BoolWithAggregatesFilter<"Test"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
  }

  export type SectionWhereInput = {
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    testId?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
    timeLimit?: IntNullableFilter<"Section"> | number | null
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type SectionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    testId?: SortOrder
    order?: SortOrder
    timeLimit?: SortOrderInput | SortOrder
    test?: TestOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type SectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SectionWhereInput | SectionWhereInput[]
    OR?: SectionWhereInput[]
    NOT?: SectionWhereInput | SectionWhereInput[]
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    testId?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
    timeLimit?: IntNullableFilter<"Section"> | number | null
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    questions?: QuestionListRelationFilter
  }, "id">

  export type SectionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    testId?: SortOrder
    order?: SortOrder
    timeLimit?: SortOrderInput | SortOrder
    _count?: SectionCountOrderByAggregateInput
    _avg?: SectionAvgOrderByAggregateInput
    _max?: SectionMaxOrderByAggregateInput
    _min?: SectionMinOrderByAggregateInput
    _sum?: SectionSumOrderByAggregateInput
  }

  export type SectionScalarWhereWithAggregatesInput = {
    AND?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    OR?: SectionScalarWhereWithAggregatesInput[]
    NOT?: SectionScalarWhereWithAggregatesInput | SectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Section"> | string
    title?: StringWithAggregatesFilter<"Section"> | string
    description?: StringNullableWithAggregatesFilter<"Section"> | string | null
    testId?: StringWithAggregatesFilter<"Section"> | string
    order?: IntWithAggregatesFilter<"Section"> | number
    timeLimit?: IntNullableWithAggregatesFilter<"Section"> | number | null
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    sectionId?: StringFilter<"Question"> | string
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    text?: StringFilter<"Question"> | string
    imageUrl?: StringNullableFilter<"Question"> | string | null
    options?: StringFilter<"Question"> | string
    correctAnswers?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    marks?: IntFilter<"Question"> | number
    negativeMarks?: IntFilter<"Question"> | number
    difficulty?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
    tags?: StringFilter<"Question"> | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    sectionId?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrderInput | SortOrder
    marks?: SortOrder
    negativeMarks?: SortOrder
    difficulty?: SortOrder
    order?: SortOrder
    tags?: SortOrder
    section?: SectionOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    sectionId?: StringFilter<"Question"> | string
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    text?: StringFilter<"Question"> | string
    imageUrl?: StringNullableFilter<"Question"> | string | null
    options?: StringFilter<"Question"> | string
    correctAnswers?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    marks?: IntFilter<"Question"> | number
    negativeMarks?: IntFilter<"Question"> | number
    difficulty?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
    tags?: StringFilter<"Question"> | string
    section?: XOR<SectionScalarRelationFilter, SectionWhereInput>
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    sectionId?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrderInput | SortOrder
    marks?: SortOrder
    negativeMarks?: SortOrder
    difficulty?: SortOrder
    order?: SortOrder
    tags?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    sectionId?: StringWithAggregatesFilter<"Question"> | string
    type?: EnumQuestionTypeWithAggregatesFilter<"Question"> | $Enums.QuestionType
    text?: StringWithAggregatesFilter<"Question"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Question"> | string | null
    options?: StringWithAggregatesFilter<"Question"> | string
    correctAnswers?: StringWithAggregatesFilter<"Question"> | string
    explanation?: StringNullableWithAggregatesFilter<"Question"> | string | null
    marks?: IntWithAggregatesFilter<"Question"> | number
    negativeMarks?: IntWithAggregatesFilter<"Question"> | number
    difficulty?: StringWithAggregatesFilter<"Question"> | string
    order?: IntWithAggregatesFilter<"Question"> | number
    tags?: StringWithAggregatesFilter<"Question"> | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    testId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    answers?: JsonFilter<"Submission">
    score?: IntFilter<"Submission"> | number
    totalMarks?: IntFilter<"Submission"> | number
    percentage?: FloatFilter<"Submission"> | number
    timeTaken?: IntFilter<"Submission"> | number
    isCompleted?: BoolFilter<"Submission"> | boolean
    startedAt?: DateTimeFilter<"Submission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    testId?: SortOrder
    studentId?: SortOrder
    answers?: SortOrder
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    test?: TestOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    testId_studentId?: SubmissionTestIdStudentIdCompoundUniqueInput
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    testId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    answers?: JsonFilter<"Submission">
    score?: IntFilter<"Submission"> | number
    totalMarks?: IntFilter<"Submission"> | number
    percentage?: FloatFilter<"Submission"> | number
    timeTaken?: IntFilter<"Submission"> | number
    isCompleted?: BoolFilter<"Submission"> | boolean
    startedAt?: DateTimeFilter<"Submission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "testId_studentId">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    testId?: SortOrder
    studentId?: SortOrder
    answers?: SortOrder
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    testId?: StringWithAggregatesFilter<"Submission"> | string
    studentId?: StringWithAggregatesFilter<"Submission"> | string
    answers?: JsonWithAggregatesFilter<"Submission">
    score?: IntWithAggregatesFilter<"Submission"> | number
    totalMarks?: IntWithAggregatesFilter<"Submission"> | number
    percentage?: FloatWithAggregatesFilter<"Submission"> | number
    timeTaken?: IntWithAggregatesFilter<"Submission"> | number
    isCompleted?: BoolWithAggregatesFilter<"Submission"> | boolean
    startedAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"Submission"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ClassScheduleWhereInput = {
    AND?: ClassScheduleWhereInput | ClassScheduleWhereInput[]
    OR?: ClassScheduleWhereInput[]
    NOT?: ClassScheduleWhereInput | ClassScheduleWhereInput[]
    id?: StringFilter<"ClassSchedule"> | string
    subject?: StringFilter<"ClassSchedule"> | string
    teacherId?: StringFilter<"ClassSchedule"> | string
    creatorId?: StringFilter<"ClassSchedule"> | string
    batchType?: EnumBatchTypeFilter<"ClassSchedule"> | $Enums.BatchType
    roomNumber?: StringFilter<"ClassSchedule"> | string
    date?: DateTimeFilter<"ClassSchedule"> | Date | string
    startTime?: StringFilter<"ClassSchedule"> | string
    endTime?: StringFilter<"ClassSchedule"> | string
    topic?: StringNullableFilter<"ClassSchedule"> | string | null
    description?: StringNullableFilter<"ClassSchedule"> | string | null
    isActive?: BoolFilter<"ClassSchedule"> | boolean
    createdAt?: DateTimeFilter<"ClassSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSchedule"> | Date | string
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    attendance?: AttendanceListRelationFilter
  }

  export type ClassScheduleOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    creatorId?: SortOrder
    batchType?: SortOrder
    roomNumber?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    topic?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teacher?: UserOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    attendance?: AttendanceOrderByRelationAggregateInput
  }

  export type ClassScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassScheduleWhereInput | ClassScheduleWhereInput[]
    OR?: ClassScheduleWhereInput[]
    NOT?: ClassScheduleWhereInput | ClassScheduleWhereInput[]
    subject?: StringFilter<"ClassSchedule"> | string
    teacherId?: StringFilter<"ClassSchedule"> | string
    creatorId?: StringFilter<"ClassSchedule"> | string
    batchType?: EnumBatchTypeFilter<"ClassSchedule"> | $Enums.BatchType
    roomNumber?: StringFilter<"ClassSchedule"> | string
    date?: DateTimeFilter<"ClassSchedule"> | Date | string
    startTime?: StringFilter<"ClassSchedule"> | string
    endTime?: StringFilter<"ClassSchedule"> | string
    topic?: StringNullableFilter<"ClassSchedule"> | string | null
    description?: StringNullableFilter<"ClassSchedule"> | string | null
    isActive?: BoolFilter<"ClassSchedule"> | boolean
    createdAt?: DateTimeFilter<"ClassSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSchedule"> | Date | string
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    attendance?: AttendanceListRelationFilter
  }, "id">

  export type ClassScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    creatorId?: SortOrder
    batchType?: SortOrder
    roomNumber?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    topic?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassScheduleCountOrderByAggregateInput
    _max?: ClassScheduleMaxOrderByAggregateInput
    _min?: ClassScheduleMinOrderByAggregateInput
  }

  export type ClassScheduleScalarWhereWithAggregatesInput = {
    AND?: ClassScheduleScalarWhereWithAggregatesInput | ClassScheduleScalarWhereWithAggregatesInput[]
    OR?: ClassScheduleScalarWhereWithAggregatesInput[]
    NOT?: ClassScheduleScalarWhereWithAggregatesInput | ClassScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassSchedule"> | string
    subject?: StringWithAggregatesFilter<"ClassSchedule"> | string
    teacherId?: StringWithAggregatesFilter<"ClassSchedule"> | string
    creatorId?: StringWithAggregatesFilter<"ClassSchedule"> | string
    batchType?: EnumBatchTypeWithAggregatesFilter<"ClassSchedule"> | $Enums.BatchType
    roomNumber?: StringWithAggregatesFilter<"ClassSchedule"> | string
    date?: DateTimeWithAggregatesFilter<"ClassSchedule"> | Date | string
    startTime?: StringWithAggregatesFilter<"ClassSchedule"> | string
    endTime?: StringWithAggregatesFilter<"ClassSchedule"> | string
    topic?: StringNullableWithAggregatesFilter<"ClassSchedule"> | string | null
    description?: StringNullableWithAggregatesFilter<"ClassSchedule"> | string | null
    isActive?: BoolWithAggregatesFilter<"ClassSchedule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ClassSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClassSchedule"> | Date | string
  }

  export type BatchWhereInput = {
    AND?: BatchWhereInput | BatchWhereInput[]
    OR?: BatchWhereInput[]
    NOT?: BatchWhereInput | BatchWhereInput[]
    id?: StringFilter<"Batch"> | string
    type?: EnumBatchTypeFilter<"Batch"> | $Enums.BatchType
    name?: StringFilter<"Batch"> | string
    isActive?: BoolFilter<"Batch"> | boolean
    createdAt?: DateTimeFilter<"Batch"> | Date | string
    updatedAt?: DateTimeFilter<"Batch"> | Date | string
    events?: SpecialEventListRelationFilter
    teachersAssigned?: UserListRelationFilter
  }

  export type BatchOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: SpecialEventOrderByRelationAggregateInput
    teachersAssigned?: UserOrderByRelationAggregateInput
  }

  export type BatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type?: $Enums.BatchType
    AND?: BatchWhereInput | BatchWhereInput[]
    OR?: BatchWhereInput[]
    NOT?: BatchWhereInput | BatchWhereInput[]
    name?: StringFilter<"Batch"> | string
    isActive?: BoolFilter<"Batch"> | boolean
    createdAt?: DateTimeFilter<"Batch"> | Date | string
    updatedAt?: DateTimeFilter<"Batch"> | Date | string
    events?: SpecialEventListRelationFilter
    teachersAssigned?: UserListRelationFilter
  }, "id" | "type">

  export type BatchOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BatchCountOrderByAggregateInput
    _max?: BatchMaxOrderByAggregateInput
    _min?: BatchMinOrderByAggregateInput
  }

  export type BatchScalarWhereWithAggregatesInput = {
    AND?: BatchScalarWhereWithAggregatesInput | BatchScalarWhereWithAggregatesInput[]
    OR?: BatchScalarWhereWithAggregatesInput[]
    NOT?: BatchScalarWhereWithAggregatesInput | BatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Batch"> | string
    type?: EnumBatchTypeWithAggregatesFilter<"Batch"> | $Enums.BatchType
    name?: StringWithAggregatesFilter<"Batch"> | string
    isActive?: BoolWithAggregatesFilter<"Batch"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Batch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Batch"> | Date | string
  }

  export type SpecialEventWhereInput = {
    AND?: SpecialEventWhereInput | SpecialEventWhereInput[]
    OR?: SpecialEventWhereInput[]
    NOT?: SpecialEventWhereInput | SpecialEventWhereInput[]
    id?: StringFilter<"SpecialEvent"> | string
    title?: StringFilter<"SpecialEvent"> | string
    description?: StringNullableFilter<"SpecialEvent"> | string | null
    type?: EnumEventTypeFilter<"SpecialEvent"> | $Enums.EventType
    scheduledAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    duration?: IntFilter<"SpecialEvent"> | number
    location?: StringNullableFilter<"SpecialEvent"> | string | null
    status?: StringFilter<"SpecialEvent"> | string
    maxParticipants?: IntNullableFilter<"SpecialEvent"> | number | null
    isRecurring?: BoolFilter<"SpecialEvent"> | boolean
    recurringPattern?: StringNullableFilter<"SpecialEvent"> | string | null
    createdAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    batches?: BatchListRelationFilter
    participants?: EventParticipantListRelationFilter
  }

  export type SpecialEventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurringPattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    batches?: BatchOrderByRelationAggregateInput
    participants?: EventParticipantOrderByRelationAggregateInput
  }

  export type SpecialEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SpecialEventWhereInput | SpecialEventWhereInput[]
    OR?: SpecialEventWhereInput[]
    NOT?: SpecialEventWhereInput | SpecialEventWhereInput[]
    title?: StringFilter<"SpecialEvent"> | string
    description?: StringNullableFilter<"SpecialEvent"> | string | null
    type?: EnumEventTypeFilter<"SpecialEvent"> | $Enums.EventType
    scheduledAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    duration?: IntFilter<"SpecialEvent"> | number
    location?: StringNullableFilter<"SpecialEvent"> | string | null
    status?: StringFilter<"SpecialEvent"> | string
    maxParticipants?: IntNullableFilter<"SpecialEvent"> | number | null
    isRecurring?: BoolFilter<"SpecialEvent"> | boolean
    recurringPattern?: StringNullableFilter<"SpecialEvent"> | string | null
    createdAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    batches?: BatchListRelationFilter
    participants?: EventParticipantListRelationFilter
  }, "id">

  export type SpecialEventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrderInput | SortOrder
    status?: SortOrder
    maxParticipants?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    recurringPattern?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SpecialEventCountOrderByAggregateInput
    _avg?: SpecialEventAvgOrderByAggregateInput
    _max?: SpecialEventMaxOrderByAggregateInput
    _min?: SpecialEventMinOrderByAggregateInput
    _sum?: SpecialEventSumOrderByAggregateInput
  }

  export type SpecialEventScalarWhereWithAggregatesInput = {
    AND?: SpecialEventScalarWhereWithAggregatesInput | SpecialEventScalarWhereWithAggregatesInput[]
    OR?: SpecialEventScalarWhereWithAggregatesInput[]
    NOT?: SpecialEventScalarWhereWithAggregatesInput | SpecialEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SpecialEvent"> | string
    title?: StringWithAggregatesFilter<"SpecialEvent"> | string
    description?: StringNullableWithAggregatesFilter<"SpecialEvent"> | string | null
    type?: EnumEventTypeWithAggregatesFilter<"SpecialEvent"> | $Enums.EventType
    scheduledAt?: DateTimeWithAggregatesFilter<"SpecialEvent"> | Date | string
    duration?: IntWithAggregatesFilter<"SpecialEvent"> | number
    location?: StringNullableWithAggregatesFilter<"SpecialEvent"> | string | null
    status?: StringWithAggregatesFilter<"SpecialEvent"> | string
    maxParticipants?: IntNullableWithAggregatesFilter<"SpecialEvent"> | number | null
    isRecurring?: BoolWithAggregatesFilter<"SpecialEvent"> | boolean
    recurringPattern?: StringNullableWithAggregatesFilter<"SpecialEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SpecialEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SpecialEvent"> | Date | string
  }

  export type EventParticipantWhereInput = {
    AND?: EventParticipantWhereInput | EventParticipantWhereInput[]
    OR?: EventParticipantWhereInput[]
    NOT?: EventParticipantWhereInput | EventParticipantWhereInput[]
    id?: StringFilter<"EventParticipant"> | string
    eventId?: StringFilter<"EventParticipant"> | string
    userUid?: StringFilter<"EventParticipant"> | string
    status?: StringFilter<"EventParticipant"> | string
    respondedAt?: DateTimeNullableFilter<"EventParticipant"> | Date | string | null
    createdAt?: DateTimeFilter<"EventParticipant"> | Date | string
    event?: XOR<SpecialEventScalarRelationFilter, SpecialEventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EventParticipantOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userUid?: SortOrder
    status?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: SpecialEventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type EventParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    eventId_userUid?: EventParticipantEventIdUserUidCompoundUniqueInput
    AND?: EventParticipantWhereInput | EventParticipantWhereInput[]
    OR?: EventParticipantWhereInput[]
    NOT?: EventParticipantWhereInput | EventParticipantWhereInput[]
    eventId?: StringFilter<"EventParticipant"> | string
    userUid?: StringFilter<"EventParticipant"> | string
    status?: StringFilter<"EventParticipant"> | string
    respondedAt?: DateTimeNullableFilter<"EventParticipant"> | Date | string | null
    createdAt?: DateTimeFilter<"EventParticipant"> | Date | string
    event?: XOR<SpecialEventScalarRelationFilter, SpecialEventWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "eventId_userUid">

  export type EventParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    userUid?: SortOrder
    status?: SortOrder
    respondedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EventParticipantCountOrderByAggregateInput
    _max?: EventParticipantMaxOrderByAggregateInput
    _min?: EventParticipantMinOrderByAggregateInput
  }

  export type EventParticipantScalarWhereWithAggregatesInput = {
    AND?: EventParticipantScalarWhereWithAggregatesInput | EventParticipantScalarWhereWithAggregatesInput[]
    OR?: EventParticipantScalarWhereWithAggregatesInput[]
    NOT?: EventParticipantScalarWhereWithAggregatesInput | EventParticipantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EventParticipant"> | string
    eventId?: StringWithAggregatesFilter<"EventParticipant"> | string
    userUid?: StringWithAggregatesFilter<"EventParticipant"> | string
    status?: StringWithAggregatesFilter<"EventParticipant"> | string
    respondedAt?: DateTimeNullableWithAggregatesFilter<"EventParticipant"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EventParticipant"> | Date | string
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: StringFilter<"Attendance"> | string
    classScheduleId?: StringFilter<"Attendance"> | string
    studentId?: StringFilter<"Attendance"> | string
    teacherId?: StringFilter<"Attendance"> | string
    status?: StringFilter<"Attendance"> | string
    markedAt?: DateTimeFilter<"Attendance"> | Date | string
    notes?: StringNullableFilter<"Attendance"> | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
    classSchedule?: XOR<ClassScheduleScalarRelationFilter, ClassScheduleWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    classScheduleId?: SortOrder
    studentId?: SortOrder
    teacherId?: SortOrder
    status?: SortOrder
    markedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classSchedule?: ClassScheduleOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    classScheduleId_studentId?: AttendanceClassScheduleIdStudentIdCompoundUniqueInput
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    classScheduleId?: StringFilter<"Attendance"> | string
    studentId?: StringFilter<"Attendance"> | string
    teacherId?: StringFilter<"Attendance"> | string
    status?: StringFilter<"Attendance"> | string
    markedAt?: DateTimeFilter<"Attendance"> | Date | string
    notes?: StringNullableFilter<"Attendance"> | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
    classSchedule?: XOR<ClassScheduleScalarRelationFilter, ClassScheduleWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "classScheduleId_studentId">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    classScheduleId?: SortOrder
    studentId?: SortOrder
    teacherId?: SortOrder
    status?: SortOrder
    markedAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attendance"> | string
    classScheduleId?: StringWithAggregatesFilter<"Attendance"> | string
    studentId?: StringWithAggregatesFilter<"Attendance"> | string
    teacherId?: StringWithAggregatesFilter<"Attendance"> | string
    status?: StringWithAggregatesFilter<"Attendance"> | string
    markedAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"Attendance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
  }

  export type SampleQuestionWhereInput = {
    AND?: SampleQuestionWhereInput | SampleQuestionWhereInput[]
    OR?: SampleQuestionWhereInput[]
    NOT?: SampleQuestionWhereInput | SampleQuestionWhereInput[]
    id?: StringFilter<"SampleQuestion"> | string
    subject?: StringFilter<"SampleQuestion"> | string
    class?: StringFilter<"SampleQuestion"> | string
    type?: EnumQuestionTypeFilter<"SampleQuestion"> | $Enums.QuestionType
    text?: StringFilter<"SampleQuestion"> | string
    imageUrl?: StringNullableFilter<"SampleQuestion"> | string | null
    options?: StringFilter<"SampleQuestion"> | string
    correctAnswers?: StringFilter<"SampleQuestion"> | string
    explanation?: StringNullableFilter<"SampleQuestion"> | string | null
    difficulty?: StringFilter<"SampleQuestion"> | string
    tags?: StringFilter<"SampleQuestion"> | string
    createdAt?: DateTimeFilter<"SampleQuestion"> | Date | string
  }

  export type SampleQuestionOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    class?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SampleQuestionWhereInput | SampleQuestionWhereInput[]
    OR?: SampleQuestionWhereInput[]
    NOT?: SampleQuestionWhereInput | SampleQuestionWhereInput[]
    subject?: StringFilter<"SampleQuestion"> | string
    class?: StringFilter<"SampleQuestion"> | string
    type?: EnumQuestionTypeFilter<"SampleQuestion"> | $Enums.QuestionType
    text?: StringFilter<"SampleQuestion"> | string
    imageUrl?: StringNullableFilter<"SampleQuestion"> | string | null
    options?: StringFilter<"SampleQuestion"> | string
    correctAnswers?: StringFilter<"SampleQuestion"> | string
    explanation?: StringNullableFilter<"SampleQuestion"> | string | null
    difficulty?: StringFilter<"SampleQuestion"> | string
    tags?: StringFilter<"SampleQuestion"> | string
    createdAt?: DateTimeFilter<"SampleQuestion"> | Date | string
  }, "id">

  export type SampleQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    class?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrderInput | SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    _count?: SampleQuestionCountOrderByAggregateInput
    _max?: SampleQuestionMaxOrderByAggregateInput
    _min?: SampleQuestionMinOrderByAggregateInput
  }

  export type SampleQuestionScalarWhereWithAggregatesInput = {
    AND?: SampleQuestionScalarWhereWithAggregatesInput | SampleQuestionScalarWhereWithAggregatesInput[]
    OR?: SampleQuestionScalarWhereWithAggregatesInput[]
    NOT?: SampleQuestionScalarWhereWithAggregatesInput | SampleQuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SampleQuestion"> | string
    subject?: StringWithAggregatesFilter<"SampleQuestion"> | string
    class?: StringWithAggregatesFilter<"SampleQuestion"> | string
    type?: EnumQuestionTypeWithAggregatesFilter<"SampleQuestion"> | $Enums.QuestionType
    text?: StringWithAggregatesFilter<"SampleQuestion"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"SampleQuestion"> | string | null
    options?: StringWithAggregatesFilter<"SampleQuestion"> | string
    correctAnswers?: StringWithAggregatesFilter<"SampleQuestion"> | string
    explanation?: StringNullableWithAggregatesFilter<"SampleQuestion"> | string | null
    difficulty?: StringWithAggregatesFilter<"SampleQuestion"> | string
    tags?: StringWithAggregatesFilter<"SampleQuestion"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SampleQuestion"> | Date | string
  }

  export type HomeworkWhereInput = {
    AND?: HomeworkWhereInput | HomeworkWhereInput[]
    OR?: HomeworkWhereInput[]
    NOT?: HomeworkWhereInput | HomeworkWhereInput[]
    id?: StringFilter<"Homework"> | string
    title?: StringFilter<"Homework"> | string
    description?: StringFilter<"Homework"> | string
    instructions?: StringNullableFilter<"Homework"> | string | null
    subject?: StringFilter<"Homework"> | string
    teacherId?: StringFilter<"Homework"> | string
    batchType?: EnumBatchTypeFilter<"Homework"> | $Enums.BatchType
    imageUrl?: StringNullableFilter<"Homework"> | string | null
    dueDate?: DateTimeFilter<"Homework"> | Date | string
    totalMarks?: IntFilter<"Homework"> | number
    status?: EnumHomeworkStatusFilter<"Homework"> | $Enums.HomeworkStatus
    isActive?: BoolFilter<"Homework"> | boolean
    createdAt?: DateTimeFilter<"Homework"> | Date | string
    updatedAt?: DateTimeFilter<"Homework"> | Date | string
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    submissions?: HomeworkSubmissionListRelationFilter
  }

  export type HomeworkOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrderInput | SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    batchType?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    totalMarks?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teacher?: UserOrderByWithRelationInput
    submissions?: HomeworkSubmissionOrderByRelationAggregateInput
  }

  export type HomeworkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HomeworkWhereInput | HomeworkWhereInput[]
    OR?: HomeworkWhereInput[]
    NOT?: HomeworkWhereInput | HomeworkWhereInput[]
    title?: StringFilter<"Homework"> | string
    description?: StringFilter<"Homework"> | string
    instructions?: StringNullableFilter<"Homework"> | string | null
    subject?: StringFilter<"Homework"> | string
    teacherId?: StringFilter<"Homework"> | string
    batchType?: EnumBatchTypeFilter<"Homework"> | $Enums.BatchType
    imageUrl?: StringNullableFilter<"Homework"> | string | null
    dueDate?: DateTimeFilter<"Homework"> | Date | string
    totalMarks?: IntFilter<"Homework"> | number
    status?: EnumHomeworkStatusFilter<"Homework"> | $Enums.HomeworkStatus
    isActive?: BoolFilter<"Homework"> | boolean
    createdAt?: DateTimeFilter<"Homework"> | Date | string
    updatedAt?: DateTimeFilter<"Homework"> | Date | string
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    submissions?: HomeworkSubmissionListRelationFilter
  }, "id">

  export type HomeworkOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrderInput | SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    batchType?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    totalMarks?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HomeworkCountOrderByAggregateInput
    _avg?: HomeworkAvgOrderByAggregateInput
    _max?: HomeworkMaxOrderByAggregateInput
    _min?: HomeworkMinOrderByAggregateInput
    _sum?: HomeworkSumOrderByAggregateInput
  }

  export type HomeworkScalarWhereWithAggregatesInput = {
    AND?: HomeworkScalarWhereWithAggregatesInput | HomeworkScalarWhereWithAggregatesInput[]
    OR?: HomeworkScalarWhereWithAggregatesInput[]
    NOT?: HomeworkScalarWhereWithAggregatesInput | HomeworkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Homework"> | string
    title?: StringWithAggregatesFilter<"Homework"> | string
    description?: StringWithAggregatesFilter<"Homework"> | string
    instructions?: StringNullableWithAggregatesFilter<"Homework"> | string | null
    subject?: StringWithAggregatesFilter<"Homework"> | string
    teacherId?: StringWithAggregatesFilter<"Homework"> | string
    batchType?: EnumBatchTypeWithAggregatesFilter<"Homework"> | $Enums.BatchType
    imageUrl?: StringNullableWithAggregatesFilter<"Homework"> | string | null
    dueDate?: DateTimeWithAggregatesFilter<"Homework"> | Date | string
    totalMarks?: IntWithAggregatesFilter<"Homework"> | number
    status?: EnumHomeworkStatusWithAggregatesFilter<"Homework"> | $Enums.HomeworkStatus
    isActive?: BoolWithAggregatesFilter<"Homework"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Homework"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Homework"> | Date | string
  }

  export type HomeworkSubmissionWhereInput = {
    AND?: HomeworkSubmissionWhereInput | HomeworkSubmissionWhereInput[]
    OR?: HomeworkSubmissionWhereInput[]
    NOT?: HomeworkSubmissionWhereInput | HomeworkSubmissionWhereInput[]
    id?: StringFilter<"HomeworkSubmission"> | string
    homeworkId?: StringFilter<"HomeworkSubmission"> | string
    studentId?: StringFilter<"HomeworkSubmission"> | string
    submissionType?: EnumSubmissionTypeFilter<"HomeworkSubmission"> | $Enums.SubmissionType
    textContent?: StringNullableFilter<"HomeworkSubmission"> | string | null
    imageUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    documentUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    unableReason?: StringNullableFilter<"HomeworkSubmission"> | string | null
    status?: EnumHomeworkStatusFilter<"HomeworkSubmission"> | $Enums.HomeworkStatus
    marksObtained?: IntNullableFilter<"HomeworkSubmission"> | number | null
    teacherRemarks?: StringNullableFilter<"HomeworkSubmission"> | string | null
    grade?: StringNullableFilter<"HomeworkSubmission"> | string | null
    submittedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"HomeworkSubmission"> | Date | string | null
    createdAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    homework?: XOR<HomeworkScalarRelationFilter, HomeworkWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type HomeworkSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    homeworkId?: SortOrder
    studentId?: SortOrder
    submissionType?: SortOrder
    textContent?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    unableReason?: SortOrderInput | SortOrder
    status?: SortOrder
    marksObtained?: SortOrderInput | SortOrder
    teacherRemarks?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    homework?: HomeworkOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type HomeworkSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    homeworkId_studentId?: HomeworkSubmissionHomeworkIdStudentIdCompoundUniqueInput
    AND?: HomeworkSubmissionWhereInput | HomeworkSubmissionWhereInput[]
    OR?: HomeworkSubmissionWhereInput[]
    NOT?: HomeworkSubmissionWhereInput | HomeworkSubmissionWhereInput[]
    homeworkId?: StringFilter<"HomeworkSubmission"> | string
    studentId?: StringFilter<"HomeworkSubmission"> | string
    submissionType?: EnumSubmissionTypeFilter<"HomeworkSubmission"> | $Enums.SubmissionType
    textContent?: StringNullableFilter<"HomeworkSubmission"> | string | null
    imageUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    documentUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    unableReason?: StringNullableFilter<"HomeworkSubmission"> | string | null
    status?: EnumHomeworkStatusFilter<"HomeworkSubmission"> | $Enums.HomeworkStatus
    marksObtained?: IntNullableFilter<"HomeworkSubmission"> | number | null
    teacherRemarks?: StringNullableFilter<"HomeworkSubmission"> | string | null
    grade?: StringNullableFilter<"HomeworkSubmission"> | string | null
    submittedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"HomeworkSubmission"> | Date | string | null
    createdAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    homework?: XOR<HomeworkScalarRelationFilter, HomeworkWhereInput>
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "homeworkId_studentId">

  export type HomeworkSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    homeworkId?: SortOrder
    studentId?: SortOrder
    submissionType?: SortOrder
    textContent?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    unableReason?: SortOrderInput | SortOrder
    status?: SortOrder
    marksObtained?: SortOrderInput | SortOrder
    teacherRemarks?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HomeworkSubmissionCountOrderByAggregateInput
    _avg?: HomeworkSubmissionAvgOrderByAggregateInput
    _max?: HomeworkSubmissionMaxOrderByAggregateInput
    _min?: HomeworkSubmissionMinOrderByAggregateInput
    _sum?: HomeworkSubmissionSumOrderByAggregateInput
  }

  export type HomeworkSubmissionScalarWhereWithAggregatesInput = {
    AND?: HomeworkSubmissionScalarWhereWithAggregatesInput | HomeworkSubmissionScalarWhereWithAggregatesInput[]
    OR?: HomeworkSubmissionScalarWhereWithAggregatesInput[]
    NOT?: HomeworkSubmissionScalarWhereWithAggregatesInput | HomeworkSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HomeworkSubmission"> | string
    homeworkId?: StringWithAggregatesFilter<"HomeworkSubmission"> | string
    studentId?: StringWithAggregatesFilter<"HomeworkSubmission"> | string
    submissionType?: EnumSubmissionTypeWithAggregatesFilter<"HomeworkSubmission"> | $Enums.SubmissionType
    textContent?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    documentUrl?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    unableReason?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    status?: EnumHomeworkStatusWithAggregatesFilter<"HomeworkSubmission"> | $Enums.HomeworkStatus
    marksObtained?: IntNullableWithAggregatesFilter<"HomeworkSubmission"> | number | null
    teacherRemarks?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    grade?: StringNullableWithAggregatesFilter<"HomeworkSubmission"> | string | null
    submittedAt?: DateTimeWithAggregatesFilter<"HomeworkSubmission"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"HomeworkSubmission"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"HomeworkSubmission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HomeworkSubmission"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: ClassStudentCreateNestedManyWithoutClassInput
    tests?: TestCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
    tests?: TestUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: ClassStudentUpdateManyWithoutClassNestedInput
    tests?: TestUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
    tests?: TestUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentCreateInput = {
    id?: string
    joinedAt?: Date | string
    class: ClassCreateNestedOneWithoutStudentsInput
    student: UserCreateNestedOneWithoutClassesInput
  }

  export type ClassStudentUncheckedCreateInput = {
    id?: string
    classId: string
    studentId: string
    joinedAt?: Date | string
  }

  export type ClassStudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    student?: UserUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassStudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentCreateManyInput = {
    id?: string
    classId: string
    studentId: string
    joinedAt?: Date | string
  }

  export type ClassStudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoubtCreateInput = {
    id?: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutDoubtsInput
    appointment?: AppointmentCreateNestedOneWithoutDoubtInput
  }

  export type DoubtUncheckedCreateInput = {
    id?: string
    studentId: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointment?: AppointmentUncheckedCreateNestedOneWithoutDoubtInput
  }

  export type DoubtUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutDoubtsNestedInput
    appointment?: AppointmentUpdateOneWithoutDoubtNestedInput
  }

  export type DoubtUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUncheckedUpdateOneWithoutDoubtNestedInput
  }

  export type DoubtCreateManyInput = {
    id?: string
    studentId: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoubtUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoubtUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateInput = {
    id?: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doubt: DoubtCreateNestedOneWithoutAppointmentInput
    teacher: UserCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    doubtId: string
    teacherId: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubt?: DoubtUpdateOneRequiredWithoutAppointmentNestedInput
    teacher?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doubtId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyInput = {
    id?: string
    doubtId: string
    teacherId: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doubtId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCreateInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class?: ClassCreateNestedOneWithoutTestsInput
    author: UserCreateNestedOneWithoutTestsCreatedInput
    sections?: SectionCreateNestedManyWithoutTestInput
    submissions?: SubmissionCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutTestInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutTestsNestedInput
    author?: UserUpdateOneRequiredWithoutTestsCreatedNestedInput
    sections?: SectionUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    timeLimit?: number | null
    test: TestCreateNestedOneWithoutSectionsInput
    questions?: QuestionCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    testId: string
    order: number
    timeLimit?: number | null
    questions?: QuestionUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    test?: TestUpdateOneRequiredWithoutSectionsNestedInput
    questions?: QuestionUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    testId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: QuestionUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    testId: string
    order: number
    timeLimit?: number | null
  }

  export type SectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    testId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionCreateInput = {
    id?: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
    section: SectionCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    sectionId: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
    section?: SectionUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateManyInput = {
    id?: string
    sectionId: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sectionId?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type SubmissionCreateInput = {
    id?: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
    test: TestCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    testId: string
    studentId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: TestUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    testId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    id?: string
    testId: string
    studentId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    testId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassScheduleCreateInput = {
    id?: string
    subject: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutScheduledClassesInput
    creator: UserCreateNestedOneWithoutCreatedClassesInput
    attendance?: AttendanceCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleUncheckedCreateInput = {
    id?: string
    subject: string
    teacherId: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutScheduledClassesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
    attendance?: AttendanceUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: AttendanceUncheckedUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleCreateManyInput = {
    id?: string
    subject: string
    teacherId: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatchCreateInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: SpecialEventCreateNestedManyWithoutBatchesInput
    teachersAssigned?: UserCreateNestedManyWithoutBatchesTeachingInput
  }

  export type BatchUncheckedCreateInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: SpecialEventUncheckedCreateNestedManyWithoutBatchesInput
    teachersAssigned?: UserUncheckedCreateNestedManyWithoutBatchesTeachingInput
  }

  export type BatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: SpecialEventUpdateManyWithoutBatchesNestedInput
    teachersAssigned?: UserUpdateManyWithoutBatchesTeachingNestedInput
  }

  export type BatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: SpecialEventUncheckedUpdateManyWithoutBatchesNestedInput
    teachersAssigned?: UserUncheckedUpdateManyWithoutBatchesTeachingNestedInput
  }

  export type BatchCreateManyInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialEventCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: BatchCreateNestedManyWithoutEventsInput
    participants?: EventParticipantCreateNestedManyWithoutEventInput
  }

  export type SpecialEventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: BatchUncheckedCreateNestedManyWithoutEventsInput
    participants?: EventParticipantUncheckedCreateNestedManyWithoutEventInput
  }

  export type SpecialEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: BatchUpdateManyWithoutEventsNestedInput
    participants?: EventParticipantUpdateManyWithoutEventNestedInput
  }

  export type SpecialEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: BatchUncheckedUpdateManyWithoutEventsNestedInput
    participants?: EventParticipantUncheckedUpdateManyWithoutEventNestedInput
  }

  export type SpecialEventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SpecialEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantCreateInput = {
    id?: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    event: SpecialEventCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutEventParticipationsInput
  }

  export type EventParticipantUncheckedCreateInput = {
    id?: string
    eventId: string
    userUid: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type EventParticipantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: SpecialEventUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutEventParticipationsNestedInput
  }

  export type EventParticipantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantCreateManyInput = {
    id?: string
    eventId: string
    userUid: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type EventParticipantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceCreateInput = {
    id?: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classSchedule: ClassScheduleCreateNestedOneWithoutAttendanceInput
    student: UserCreateNestedOneWithoutStudentAttendanceInput
    teacher: UserCreateNestedOneWithoutTeacherAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: string
    classScheduleId: string
    studentId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classSchedule?: ClassScheduleUpdateOneRequiredWithoutAttendanceNestedInput
    student?: UserUpdateOneRequiredWithoutStudentAttendanceNestedInput
    teacher?: UserUpdateOneRequiredWithoutTeacherAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceCreateManyInput = {
    id?: string
    classScheduleId: string
    studentId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleQuestionCreateInput = {
    id?: string
    subject: string
    class: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    difficulty?: string
    tags: string
    createdAt?: Date | string
  }

  export type SampleQuestionUncheckedCreateInput = {
    id?: string
    subject: string
    class: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    difficulty?: string
    tags: string
    createdAt?: Date | string
  }

  export type SampleQuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleQuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleQuestionCreateManyInput = {
    id?: string
    subject: string
    class: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    difficulty?: string
    tags: string
    createdAt?: Date | string
  }

  export type SampleQuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SampleQuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: StringFieldUpdateOperationsInput | string
    tags?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCreateInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutHomeworkAssignedInput
    submissions?: HomeworkSubmissionCreateNestedManyWithoutHomeworkInput
  }

  export type HomeworkUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutHomeworkInput
  }

  export type HomeworkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutHomeworkAssignedNestedInput
    submissions?: HomeworkSubmissionUpdateManyWithoutHomeworkNestedInput
  }

  export type HomeworkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: HomeworkSubmissionUncheckedUpdateManyWithoutHomeworkNestedInput
  }

  export type HomeworkCreateManyInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionCreateInput = {
    id?: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    homework: HomeworkCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutHomeworkSubmissionsInput
  }

  export type HomeworkSubmissionUncheckedCreateInput = {
    id?: string
    homeworkId: string
    studentId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homework?: HomeworkUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutHomeworkSubmissionsNestedInput
  }

  export type HomeworkSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeworkId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionCreateManyInput = {
    id?: string
    homeworkId: string
    studentId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeworkId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumBatchTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BatchType[] | null
    notIn?: $Enums.BatchType[] | null
    not?: NestedEnumBatchTypeNullableFilter<$PrismaModel> | $Enums.BatchType | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DoubtListRelationFilter = {
    every?: DoubtWhereInput
    some?: DoubtWhereInput
    none?: DoubtWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type TestListRelationFilter = {
    every?: TestWhereInput
    some?: TestWhereInput
    none?: TestWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type ClassStudentListRelationFilter = {
    every?: ClassStudentWhereInput
    some?: ClassStudentWhereInput
    none?: ClassStudentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ClassScheduleListRelationFilter = {
    every?: ClassScheduleWhereInput
    some?: ClassScheduleWhereInput
    none?: ClassScheduleWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type EventParticipantListRelationFilter = {
    every?: EventParticipantWhereInput
    some?: EventParticipantWhereInput
    none?: EventParticipantWhereInput
  }

  export type BatchListRelationFilter = {
    every?: BatchWhereInput
    some?: BatchWhereInput
    none?: BatchWhereInput
  }

  export type HomeworkListRelationFilter = {
    every?: HomeworkWhereInput
    some?: HomeworkWhereInput
    none?: HomeworkWhereInput
  }

  export type HomeworkSubmissionListRelationFilter = {
    every?: HomeworkSubmissionWhereInput
    some?: HomeworkSubmissionWhereInput
    none?: HomeworkSubmissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DoubtOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeworkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeworkSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    batchType?: SortOrder
    subjects?: SortOrder
    roomNumber?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    batchType?: SortOrder
    subjects?: SortOrder
    roomNumber?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    password?: SortOrder
    fullName?: SortOrder
    role?: SortOrder
    batchType?: SortOrder
    subjects?: SortOrder
    roomNumber?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumBatchTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BatchType[] | null
    notIn?: $Enums.BatchType[] | null
    not?: NestedEnumBatchTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BatchType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBatchTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBatchTypeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    grade?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    grade?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    subject?: SortOrder
    grade?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClassStudentClassIdStudentIdCompoundUniqueInput = {
    classId: string
    studentId: string
  }

  export type ClassStudentCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ClassStudentMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ClassStudentMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    studentId?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumDoubtStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DoubtStatus | EnumDoubtStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DoubtStatus[]
    notIn?: $Enums.DoubtStatus[]
    not?: NestedEnumDoubtStatusFilter<$PrismaModel> | $Enums.DoubtStatus
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type DoubtCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoubtMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoubtMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    subject?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDoubtStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DoubtStatus | EnumDoubtStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DoubtStatus[]
    notIn?: $Enums.DoubtStatus[]
    not?: NestedEnumDoubtStatusWithAggregatesFilter<$PrismaModel> | $Enums.DoubtStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDoubtStatusFilter<$PrismaModel>
    _max?: NestedEnumDoubtStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DoubtScalarRelationFilter = {
    is?: DoubtWhereInput
    isNot?: DoubtWhereInput
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    doubtId?: SortOrder
    teacherId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    meetingLink?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    doubtId?: SortOrder
    teacherId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    meetingLink?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    doubtId?: SortOrder
    teacherId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    notes?: SortOrder
    meetingLink?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[]
    notIn?: $Enums.TestStatus[]
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type SectionListRelationFilter = {
    every?: SectionWhereInput
    some?: SectionWhereInput
    none?: SectionWhereInput
  }

  export type SectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
    authorId?: SortOrder
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
    instructions?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    endsAt?: SortOrder
    allowReview?: SortOrder
    shuffleQuestions?: SortOrder
    showResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestAvgOrderByAggregateInput = {
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
  }

  export type TestMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
    authorId?: SortOrder
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
    instructions?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    endsAt?: SortOrder
    allowReview?: SortOrder
    shuffleQuestions?: SortOrder
    showResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    classId?: SortOrder
    authorId?: SortOrder
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
    instructions?: SortOrder
    status?: SortOrder
    scheduledAt?: SortOrder
    endsAt?: SortOrder
    allowReview?: SortOrder
    shuffleQuestions?: SortOrder
    showResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestSumOrderByAggregateInput = {
    duration?: SortOrder
    totalMarks?: SortOrder
    passingMarks?: SortOrder
  }

  export type EnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[]
    notIn?: $Enums.TestStatus[]
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TestScalarRelationFilter = {
    is?: TestWhereInput
    isNot?: TestWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SectionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    testId?: SortOrder
    order?: SortOrder
    timeLimit?: SortOrder
  }

  export type SectionAvgOrderByAggregateInput = {
    order?: SortOrder
    timeLimit?: SortOrder
  }

  export type SectionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    testId?: SortOrder
    order?: SortOrder
    timeLimit?: SortOrder
  }

  export type SectionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    testId?: SortOrder
    order?: SortOrder
    timeLimit?: SortOrder
  }

  export type SectionSumOrderByAggregateInput = {
    order?: SortOrder
    timeLimit?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type SectionScalarRelationFilter = {
    is?: SectionWhereInput
    isNot?: SectionWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    marks?: SortOrder
    negativeMarks?: SortOrder
    difficulty?: SortOrder
    order?: SortOrder
    tags?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    marks?: SortOrder
    negativeMarks?: SortOrder
    order?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    marks?: SortOrder
    negativeMarks?: SortOrder
    difficulty?: SortOrder
    order?: SortOrder
    tags?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    sectionId?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    marks?: SortOrder
    negativeMarks?: SortOrder
    difficulty?: SortOrder
    order?: SortOrder
    tags?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    marks?: SortOrder
    negativeMarks?: SortOrder
    order?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SubmissionTestIdStudentIdCompoundUniqueInput = {
    testId: string
    studentId: string
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    studentId?: SortOrder
    answers?: SortOrder
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    studentId?: SortOrder
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    testId?: SortOrder
    studentId?: SortOrder
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
    isCompleted?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    score?: SortOrder
    totalMarks?: SortOrder
    percentage?: SortOrder
    timeTaken?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumBatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BatchType[]
    notIn?: $Enums.BatchType[]
    not?: NestedEnumBatchTypeFilter<$PrismaModel> | $Enums.BatchType
  }

  export type ClassScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    creatorId?: SortOrder
    batchType?: SortOrder
    roomNumber?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    topic?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    creatorId?: SortOrder
    batchType?: SortOrder
    roomNumber?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    topic?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    creatorId?: SortOrder
    batchType?: SortOrder
    roomNumber?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    topic?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BatchType[]
    notIn?: $Enums.BatchType[]
    not?: NestedEnumBatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.BatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBatchTypeFilter<$PrismaModel>
    _max?: NestedEnumBatchTypeFilter<$PrismaModel>
  }

  export type SpecialEventListRelationFilter = {
    every?: SpecialEventWhereInput
    some?: SpecialEventWhereInput
    none?: SpecialEventWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type SpecialEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BatchCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BatchMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BatchMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type SpecialEventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    status?: SortOrder
    maxParticipants?: SortOrder
    isRecurring?: SortOrder
    recurringPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialEventAvgOrderByAggregateInput = {
    duration?: SortOrder
    maxParticipants?: SortOrder
  }

  export type SpecialEventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    status?: SortOrder
    maxParticipants?: SortOrder
    isRecurring?: SortOrder
    recurringPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialEventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    status?: SortOrder
    maxParticipants?: SortOrder
    isRecurring?: SortOrder
    recurringPattern?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SpecialEventSumOrderByAggregateInput = {
    duration?: SortOrder
    maxParticipants?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type SpecialEventScalarRelationFilter = {
    is?: SpecialEventWhereInput
    isNot?: SpecialEventWhereInput
  }

  export type EventParticipantEventIdUserUidCompoundUniqueInput = {
    eventId: string
    userUid: string
  }

  export type EventParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userUid?: SortOrder
    status?: SortOrder
    respondedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EventParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userUid?: SortOrder
    status?: SortOrder
    respondedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EventParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    userUid?: SortOrder
    status?: SortOrder
    respondedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ClassScheduleScalarRelationFilter = {
    is?: ClassScheduleWhereInput
    isNot?: ClassScheduleWhereInput
  }

  export type AttendanceClassScheduleIdStudentIdCompoundUniqueInput = {
    classScheduleId: string
    studentId: string
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    classScheduleId?: SortOrder
    studentId?: SortOrder
    teacherId?: SortOrder
    status?: SortOrder
    markedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    classScheduleId?: SortOrder
    studentId?: SortOrder
    teacherId?: SortOrder
    status?: SortOrder
    markedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    classScheduleId?: SortOrder
    studentId?: SortOrder
    teacherId?: SortOrder
    status?: SortOrder
    markedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SampleQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    class?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    class?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type SampleQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    class?: SortOrder
    type?: SortOrder
    text?: SortOrder
    imageUrl?: SortOrder
    options?: SortOrder
    correctAnswers?: SortOrder
    explanation?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumHomeworkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HomeworkStatus | EnumHomeworkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HomeworkStatus[]
    notIn?: $Enums.HomeworkStatus[]
    not?: NestedEnumHomeworkStatusFilter<$PrismaModel> | $Enums.HomeworkStatus
  }

  export type HomeworkCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    batchType?: SortOrder
    imageUrl?: SortOrder
    dueDate?: SortOrder
    totalMarks?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkAvgOrderByAggregateInput = {
    totalMarks?: SortOrder
  }

  export type HomeworkMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    batchType?: SortOrder
    imageUrl?: SortOrder
    dueDate?: SortOrder
    totalMarks?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    subject?: SortOrder
    teacherId?: SortOrder
    batchType?: SortOrder
    imageUrl?: SortOrder
    dueDate?: SortOrder
    totalMarks?: SortOrder
    status?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkSumOrderByAggregateInput = {
    totalMarks?: SortOrder
  }

  export type EnumHomeworkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HomeworkStatus | EnumHomeworkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HomeworkStatus[]
    notIn?: $Enums.HomeworkStatus[]
    not?: NestedEnumHomeworkStatusWithAggregatesFilter<$PrismaModel> | $Enums.HomeworkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHomeworkStatusFilter<$PrismaModel>
    _max?: NestedEnumHomeworkStatusFilter<$PrismaModel>
  }

  export type EnumSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[]
    notIn?: $Enums.SubmissionType[]
    not?: NestedEnumSubmissionTypeFilter<$PrismaModel> | $Enums.SubmissionType
  }

  export type HomeworkScalarRelationFilter = {
    is?: HomeworkWhereInput
    isNot?: HomeworkWhereInput
  }

  export type HomeworkSubmissionHomeworkIdStudentIdCompoundUniqueInput = {
    homeworkId: string
    studentId: string
  }

  export type HomeworkSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    homeworkId?: SortOrder
    studentId?: SortOrder
    submissionType?: SortOrder
    textContent?: SortOrder
    imageUrl?: SortOrder
    documentUrl?: SortOrder
    unableReason?: SortOrder
    status?: SortOrder
    marksObtained?: SortOrder
    teacherRemarks?: SortOrder
    grade?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkSubmissionAvgOrderByAggregateInput = {
    marksObtained?: SortOrder
  }

  export type HomeworkSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    homeworkId?: SortOrder
    studentId?: SortOrder
    submissionType?: SortOrder
    textContent?: SortOrder
    imageUrl?: SortOrder
    documentUrl?: SortOrder
    unableReason?: SortOrder
    status?: SortOrder
    marksObtained?: SortOrder
    teacherRemarks?: SortOrder
    grade?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    homeworkId?: SortOrder
    studentId?: SortOrder
    submissionType?: SortOrder
    textContent?: SortOrder
    imageUrl?: SortOrder
    documentUrl?: SortOrder
    unableReason?: SortOrder
    status?: SortOrder
    marksObtained?: SortOrder
    teacherRemarks?: SortOrder
    grade?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkSubmissionSumOrderByAggregateInput = {
    marksObtained?: SortOrder
  }

  export type EnumSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[]
    notIn?: $Enums.SubmissionType[]
    not?: NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubmissionTypeFilter<$PrismaModel>
  }

  export type DoubtCreateNestedManyWithoutStudentInput = {
    create?: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput> | DoubtCreateWithoutStudentInput[] | DoubtUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: DoubtCreateOrConnectWithoutStudentInput | DoubtCreateOrConnectWithoutStudentInput[]
    createMany?: DoubtCreateManyStudentInputEnvelope
    connect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput> | AppointmentCreateWithoutTeacherInput[] | AppointmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTeacherInput | AppointmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AppointmentCreateManyTeacherInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type TestCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput> | TestCreateWithoutAuthorInput[] | TestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TestCreateOrConnectWithoutAuthorInput | TestCreateOrConnectWithoutAuthorInput[]
    createMany?: TestCreateManyAuthorInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ClassStudentCreateNestedManyWithoutStudentInput = {
    create?: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput> | ClassStudentCreateWithoutStudentInput[] | ClassStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentInput | ClassStudentCreateOrConnectWithoutStudentInput[]
    createMany?: ClassStudentCreateManyStudentInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ClassScheduleCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput> | ClassScheduleCreateWithoutTeacherInput[] | ClassScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutTeacherInput | ClassScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassScheduleCreateManyTeacherInputEnvelope
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
  }

  export type ClassScheduleCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput> | ClassScheduleCreateWithoutCreatorInput[] | ClassScheduleUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutCreatorInput | ClassScheduleCreateOrConnectWithoutCreatorInput[]
    createMany?: ClassScheduleCreateManyCreatorInputEnvelope
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput> | AttendanceCreateWithoutTeacherInput[] | AttendanceUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutTeacherInput | AttendanceCreateOrConnectWithoutTeacherInput[]
    createMany?: AttendanceCreateManyTeacherInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EventParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput> | EventParticipantCreateWithoutUserInput[] | EventParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutUserInput | EventParticipantCreateOrConnectWithoutUserInput[]
    createMany?: EventParticipantCreateManyUserInputEnvelope
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
  }

  export type BatchCreateNestedManyWithoutTeachersAssignedInput = {
    create?: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput> | BatchCreateWithoutTeachersAssignedInput[] | BatchUncheckedCreateWithoutTeachersAssignedInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutTeachersAssignedInput | BatchCreateOrConnectWithoutTeachersAssignedInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
  }

  export type HomeworkCreateNestedManyWithoutTeacherInput = {
    create?: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput> | HomeworkCreateWithoutTeacherInput[] | HomeworkUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutTeacherInput | HomeworkCreateOrConnectWithoutTeacherInput[]
    createMany?: HomeworkCreateManyTeacherInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type HomeworkSubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput> | HomeworkSubmissionCreateWithoutStudentInput[] | HomeworkSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutStudentInput | HomeworkSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: HomeworkSubmissionCreateManyStudentInputEnvelope
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
  }

  export type DoubtUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput> | DoubtCreateWithoutStudentInput[] | DoubtUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: DoubtCreateOrConnectWithoutStudentInput | DoubtCreateOrConnectWithoutStudentInput[]
    createMany?: DoubtCreateManyStudentInputEnvelope
    connect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput> | AppointmentCreateWithoutTeacherInput[] | AppointmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTeacherInput | AppointmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AppointmentCreateManyTeacherInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type TestUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput> | TestCreateWithoutAuthorInput[] | TestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TestCreateOrConnectWithoutAuthorInput | TestCreateOrConnectWithoutAuthorInput[]
    createMany?: TestCreateManyAuthorInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ClassStudentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput> | ClassStudentCreateWithoutStudentInput[] | ClassStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentInput | ClassStudentCreateOrConnectWithoutStudentInput[]
    createMany?: ClassStudentCreateManyStudentInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput> | ClassScheduleCreateWithoutTeacherInput[] | ClassScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutTeacherInput | ClassScheduleCreateOrConnectWithoutTeacherInput[]
    createMany?: ClassScheduleCreateManyTeacherInputEnvelope
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
  }

  export type ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput> | ClassScheduleCreateWithoutCreatorInput[] | ClassScheduleUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutCreatorInput | ClassScheduleCreateOrConnectWithoutCreatorInput[]
    createMany?: ClassScheduleCreateManyCreatorInputEnvelope
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput> | AttendanceCreateWithoutTeacherInput[] | AttendanceUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutTeacherInput | AttendanceCreateOrConnectWithoutTeacherInput[]
    createMany?: AttendanceCreateManyTeacherInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EventParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput> | EventParticipantCreateWithoutUserInput[] | EventParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutUserInput | EventParticipantCreateOrConnectWithoutUserInput[]
    createMany?: EventParticipantCreateManyUserInputEnvelope
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
  }

  export type BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput = {
    create?: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput> | BatchCreateWithoutTeachersAssignedInput[] | BatchUncheckedCreateWithoutTeachersAssignedInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutTeachersAssignedInput | BatchCreateOrConnectWithoutTeachersAssignedInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
  }

  export type HomeworkUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput> | HomeworkCreateWithoutTeacherInput[] | HomeworkUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutTeacherInput | HomeworkCreateOrConnectWithoutTeacherInput[]
    createMany?: HomeworkCreateManyTeacherInputEnvelope
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
  }

  export type HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput> | HomeworkSubmissionCreateWithoutStudentInput[] | HomeworkSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutStudentInput | HomeworkSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: HomeworkSubmissionCreateManyStudentInputEnvelope
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableEnumBatchTypeFieldUpdateOperationsInput = {
    set?: $Enums.BatchType | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DoubtUpdateManyWithoutStudentNestedInput = {
    create?: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput> | DoubtCreateWithoutStudentInput[] | DoubtUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: DoubtCreateOrConnectWithoutStudentInput | DoubtCreateOrConnectWithoutStudentInput[]
    upsert?: DoubtUpsertWithWhereUniqueWithoutStudentInput | DoubtUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: DoubtCreateManyStudentInputEnvelope
    set?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    disconnect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    delete?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    connect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    update?: DoubtUpdateWithWhereUniqueWithoutStudentInput | DoubtUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: DoubtUpdateManyWithWhereWithoutStudentInput | DoubtUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: DoubtScalarWhereInput | DoubtScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput> | AppointmentCreateWithoutTeacherInput[] | AppointmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTeacherInput | AppointmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTeacherInput | AppointmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AppointmentCreateManyTeacherInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTeacherInput | AppointmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTeacherInput | AppointmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type TestUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput> | TestCreateWithoutAuthorInput[] | TestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TestCreateOrConnectWithoutAuthorInput | TestCreateOrConnectWithoutAuthorInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutAuthorInput | TestUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TestCreateManyAuthorInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutAuthorInput | TestUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TestUpdateManyWithWhereWithoutAuthorInput | TestUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ClassStudentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput> | ClassStudentCreateWithoutStudentInput[] | ClassStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentInput | ClassStudentCreateOrConnectWithoutStudentInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutStudentInput | ClassStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ClassStudentCreateManyStudentInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutStudentInput | ClassStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutStudentInput | ClassStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ClassScheduleUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput> | ClassScheduleCreateWithoutTeacherInput[] | ClassScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutTeacherInput | ClassScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassScheduleUpsertWithWhereUniqueWithoutTeacherInput | ClassScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassScheduleCreateManyTeacherInputEnvelope
    set?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    disconnect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    delete?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    update?: ClassScheduleUpdateWithWhereUniqueWithoutTeacherInput | ClassScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassScheduleUpdateManyWithWhereWithoutTeacherInput | ClassScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
  }

  export type ClassScheduleUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput> | ClassScheduleCreateWithoutCreatorInput[] | ClassScheduleUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutCreatorInput | ClassScheduleCreateOrConnectWithoutCreatorInput[]
    upsert?: ClassScheduleUpsertWithWhereUniqueWithoutCreatorInput | ClassScheduleUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClassScheduleCreateManyCreatorInputEnvelope
    set?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    disconnect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    delete?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    update?: ClassScheduleUpdateWithWhereUniqueWithoutCreatorInput | ClassScheduleUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClassScheduleUpdateManyWithWhereWithoutCreatorInput | ClassScheduleUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput> | AttendanceCreateWithoutTeacherInput[] | AttendanceUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutTeacherInput | AttendanceCreateOrConnectWithoutTeacherInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutTeacherInput | AttendanceUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AttendanceCreateManyTeacherInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutTeacherInput | AttendanceUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutTeacherInput | AttendanceUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type EventParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput> | EventParticipantCreateWithoutUserInput[] | EventParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutUserInput | EventParticipantCreateOrConnectWithoutUserInput[]
    upsert?: EventParticipantUpsertWithWhereUniqueWithoutUserInput | EventParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventParticipantCreateManyUserInputEnvelope
    set?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    disconnect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    delete?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    update?: EventParticipantUpdateWithWhereUniqueWithoutUserInput | EventParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventParticipantUpdateManyWithWhereWithoutUserInput | EventParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
  }

  export type BatchUpdateManyWithoutTeachersAssignedNestedInput = {
    create?: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput> | BatchCreateWithoutTeachersAssignedInput[] | BatchUncheckedCreateWithoutTeachersAssignedInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutTeachersAssignedInput | BatchCreateOrConnectWithoutTeachersAssignedInput[]
    upsert?: BatchUpsertWithWhereUniqueWithoutTeachersAssignedInput | BatchUpsertWithWhereUniqueWithoutTeachersAssignedInput[]
    set?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    disconnect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    delete?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    update?: BatchUpdateWithWhereUniqueWithoutTeachersAssignedInput | BatchUpdateWithWhereUniqueWithoutTeachersAssignedInput[]
    updateMany?: BatchUpdateManyWithWhereWithoutTeachersAssignedInput | BatchUpdateManyWithWhereWithoutTeachersAssignedInput[]
    deleteMany?: BatchScalarWhereInput | BatchScalarWhereInput[]
  }

  export type HomeworkUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput> | HomeworkCreateWithoutTeacherInput[] | HomeworkUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutTeacherInput | HomeworkCreateOrConnectWithoutTeacherInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutTeacherInput | HomeworkUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: HomeworkCreateManyTeacherInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutTeacherInput | HomeworkUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutTeacherInput | HomeworkUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type HomeworkSubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput> | HomeworkSubmissionCreateWithoutStudentInput[] | HomeworkSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutStudentInput | HomeworkSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: HomeworkSubmissionUpsertWithWhereUniqueWithoutStudentInput | HomeworkSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: HomeworkSubmissionCreateManyStudentInputEnvelope
    set?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    disconnect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    delete?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    update?: HomeworkSubmissionUpdateWithWhereUniqueWithoutStudentInput | HomeworkSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: HomeworkSubmissionUpdateManyWithWhereWithoutStudentInput | HomeworkSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
  }

  export type DoubtUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput> | DoubtCreateWithoutStudentInput[] | DoubtUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: DoubtCreateOrConnectWithoutStudentInput | DoubtCreateOrConnectWithoutStudentInput[]
    upsert?: DoubtUpsertWithWhereUniqueWithoutStudentInput | DoubtUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: DoubtCreateManyStudentInputEnvelope
    set?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    disconnect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    delete?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    connect?: DoubtWhereUniqueInput | DoubtWhereUniqueInput[]
    update?: DoubtUpdateWithWhereUniqueWithoutStudentInput | DoubtUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: DoubtUpdateManyWithWhereWithoutStudentInput | DoubtUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: DoubtScalarWhereInput | DoubtScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput> | AppointmentCreateWithoutTeacherInput[] | AppointmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTeacherInput | AppointmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTeacherInput | AppointmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AppointmentCreateManyTeacherInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTeacherInput | AppointmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTeacherInput | AppointmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type TestUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput> | TestCreateWithoutAuthorInput[] | TestUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: TestCreateOrConnectWithoutAuthorInput | TestCreateOrConnectWithoutAuthorInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutAuthorInput | TestUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: TestCreateManyAuthorInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutAuthorInput | TestUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: TestUpdateManyWithWhereWithoutAuthorInput | TestUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ClassStudentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput> | ClassStudentCreateWithoutStudentInput[] | ClassStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutStudentInput | ClassStudentCreateOrConnectWithoutStudentInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutStudentInput | ClassStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ClassStudentCreateManyStudentInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutStudentInput | ClassStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutStudentInput | ClassStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput> | ClassScheduleCreateWithoutTeacherInput[] | ClassScheduleUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutTeacherInput | ClassScheduleCreateOrConnectWithoutTeacherInput[]
    upsert?: ClassScheduleUpsertWithWhereUniqueWithoutTeacherInput | ClassScheduleUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: ClassScheduleCreateManyTeacherInputEnvelope
    set?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    disconnect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    delete?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    update?: ClassScheduleUpdateWithWhereUniqueWithoutTeacherInput | ClassScheduleUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: ClassScheduleUpdateManyWithWhereWithoutTeacherInput | ClassScheduleUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
  }

  export type ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput> | ClassScheduleCreateWithoutCreatorInput[] | ClassScheduleUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutCreatorInput | ClassScheduleCreateOrConnectWithoutCreatorInput[]
    upsert?: ClassScheduleUpsertWithWhereUniqueWithoutCreatorInput | ClassScheduleUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClassScheduleCreateManyCreatorInputEnvelope
    set?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    disconnect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    delete?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    connect?: ClassScheduleWhereUniqueInput | ClassScheduleWhereUniqueInput[]
    update?: ClassScheduleUpdateWithWhereUniqueWithoutCreatorInput | ClassScheduleUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClassScheduleUpdateManyWithWhereWithoutCreatorInput | ClassScheduleUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput> | AttendanceCreateWithoutTeacherInput[] | AttendanceUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutTeacherInput | AttendanceCreateOrConnectWithoutTeacherInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutTeacherInput | AttendanceUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AttendanceCreateManyTeacherInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutTeacherInput | AttendanceUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutTeacherInput | AttendanceUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type EventParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput> | EventParticipantCreateWithoutUserInput[] | EventParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutUserInput | EventParticipantCreateOrConnectWithoutUserInput[]
    upsert?: EventParticipantUpsertWithWhereUniqueWithoutUserInput | EventParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventParticipantCreateManyUserInputEnvelope
    set?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    disconnect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    delete?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    update?: EventParticipantUpdateWithWhereUniqueWithoutUserInput | EventParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventParticipantUpdateManyWithWhereWithoutUserInput | EventParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
  }

  export type BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput = {
    create?: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput> | BatchCreateWithoutTeachersAssignedInput[] | BatchUncheckedCreateWithoutTeachersAssignedInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutTeachersAssignedInput | BatchCreateOrConnectWithoutTeachersAssignedInput[]
    upsert?: BatchUpsertWithWhereUniqueWithoutTeachersAssignedInput | BatchUpsertWithWhereUniqueWithoutTeachersAssignedInput[]
    set?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    disconnect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    delete?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    update?: BatchUpdateWithWhereUniqueWithoutTeachersAssignedInput | BatchUpdateWithWhereUniqueWithoutTeachersAssignedInput[]
    updateMany?: BatchUpdateManyWithWhereWithoutTeachersAssignedInput | BatchUpdateManyWithWhereWithoutTeachersAssignedInput[]
    deleteMany?: BatchScalarWhereInput | BatchScalarWhereInput[]
  }

  export type HomeworkUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput> | HomeworkCreateWithoutTeacherInput[] | HomeworkUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: HomeworkCreateOrConnectWithoutTeacherInput | HomeworkCreateOrConnectWithoutTeacherInput[]
    upsert?: HomeworkUpsertWithWhereUniqueWithoutTeacherInput | HomeworkUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: HomeworkCreateManyTeacherInputEnvelope
    set?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    disconnect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    delete?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    connect?: HomeworkWhereUniqueInput | HomeworkWhereUniqueInput[]
    update?: HomeworkUpdateWithWhereUniqueWithoutTeacherInput | HomeworkUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: HomeworkUpdateManyWithWhereWithoutTeacherInput | HomeworkUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
  }

  export type HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput> | HomeworkSubmissionCreateWithoutStudentInput[] | HomeworkSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutStudentInput | HomeworkSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: HomeworkSubmissionUpsertWithWhereUniqueWithoutStudentInput | HomeworkSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: HomeworkSubmissionCreateManyStudentInputEnvelope
    set?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    disconnect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    delete?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    update?: HomeworkSubmissionUpdateWithWhereUniqueWithoutStudentInput | HomeworkSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: HomeworkSubmissionUpdateManyWithWhereWithoutStudentInput | HomeworkSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
  }

  export type ClassStudentCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type TestCreateNestedManyWithoutClassInput = {
    create?: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput> | TestCreateWithoutClassInput[] | TestUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TestCreateOrConnectWithoutClassInput | TestCreateOrConnectWithoutClassInput[]
    createMany?: TestCreateManyClassInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type ClassStudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
  }

  export type TestUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput> | TestCreateWithoutClassInput[] | TestUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TestCreateOrConnectWithoutClassInput | TestCreateOrConnectWithoutClassInput[]
    createMany?: TestCreateManyClassInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type ClassStudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutClassInput | ClassStudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutClassInput | ClassStudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutClassInput | ClassStudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type TestUpdateManyWithoutClassNestedInput = {
    create?: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput> | TestCreateWithoutClassInput[] | TestUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TestCreateOrConnectWithoutClassInput | TestCreateOrConnectWithoutClassInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutClassInput | TestUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TestCreateManyClassInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutClassInput | TestUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TestUpdateManyWithWhereWithoutClassInput | TestUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type ClassStudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput> | ClassStudentCreateWithoutClassInput[] | ClassStudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassStudentCreateOrConnectWithoutClassInput | ClassStudentCreateOrConnectWithoutClassInput[]
    upsert?: ClassStudentUpsertWithWhereUniqueWithoutClassInput | ClassStudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassStudentCreateManyClassInputEnvelope
    set?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    disconnect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    delete?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    connect?: ClassStudentWhereUniqueInput | ClassStudentWhereUniqueInput[]
    update?: ClassStudentUpdateWithWhereUniqueWithoutClassInput | ClassStudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassStudentUpdateManyWithWhereWithoutClassInput | ClassStudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
  }

  export type TestUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput> | TestCreateWithoutClassInput[] | TestUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TestCreateOrConnectWithoutClassInput | TestCreateOrConnectWithoutClassInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutClassInput | TestUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TestCreateManyClassInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutClassInput | TestUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TestUpdateManyWithWhereWithoutClassInput | TestUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClassesInput = {
    create?: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassesInput
    connect?: UserWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type UserUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassesInput
    upsert?: UserUpsertWithoutClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClassesInput, UserUpdateWithoutClassesInput>, UserUncheckedUpdateWithoutClassesInput>
  }

  export type UserCreateNestedOneWithoutDoubtsInput = {
    create?: XOR<UserCreateWithoutDoubtsInput, UserUncheckedCreateWithoutDoubtsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoubtsInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutDoubtInput = {
    create?: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoubtInput
    connect?: AppointmentWhereUniqueInput
  }

  export type AppointmentUncheckedCreateNestedOneWithoutDoubtInput = {
    create?: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoubtInput
    connect?: AppointmentWhereUniqueInput
  }

  export type EnumDoubtStatusFieldUpdateOperationsInput = {
    set?: $Enums.DoubtStatus
  }

  export type UserUpdateOneRequiredWithoutDoubtsNestedInput = {
    create?: XOR<UserCreateWithoutDoubtsInput, UserUncheckedCreateWithoutDoubtsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoubtsInput
    upsert?: UserUpsertWithoutDoubtsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoubtsInput, UserUpdateWithoutDoubtsInput>, UserUncheckedUpdateWithoutDoubtsInput>
  }

  export type AppointmentUpdateOneWithoutDoubtNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoubtInput
    upsert?: AppointmentUpsertWithoutDoubtInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutDoubtInput, AppointmentUpdateWithoutDoubtInput>, AppointmentUncheckedUpdateWithoutDoubtInput>
  }

  export type AppointmentUncheckedUpdateOneWithoutDoubtNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoubtInput
    upsert?: AppointmentUpsertWithoutDoubtInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutDoubtInput, AppointmentUpdateWithoutDoubtInput>, AppointmentUncheckedUpdateWithoutDoubtInput>
  }

  export type DoubtCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<DoubtCreateWithoutAppointmentInput, DoubtUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoubtCreateOrConnectWithoutAppointmentInput
    connect?: DoubtWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DoubtUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<DoubtCreateWithoutAppointmentInput, DoubtUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoubtCreateOrConnectWithoutAppointmentInput
    upsert?: DoubtUpsertWithoutAppointmentInput
    connect?: DoubtWhereUniqueInput
    update?: XOR<XOR<DoubtUpdateToOneWithWhereWithoutAppointmentInput, DoubtUpdateWithoutAppointmentInput>, DoubtUncheckedUpdateWithoutAppointmentInput>
  }

  export type UserUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ClassCreateNestedOneWithoutTestsInput = {
    create?: XOR<ClassCreateWithoutTestsInput, ClassUncheckedCreateWithoutTestsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTestsInput
    connect?: ClassWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTestsCreatedInput = {
    create?: XOR<UserCreateWithoutTestsCreatedInput, UserUncheckedCreateWithoutTestsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type SectionCreateNestedManyWithoutTestInput = {
    create?: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput> | SectionCreateWithoutTestInput[] | SectionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutTestInput | SectionCreateOrConnectWithoutTestInput[]
    createMany?: SectionCreateManyTestInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutTestInput = {
    create?: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput> | SubmissionCreateWithoutTestInput[] | SubmissionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestInput | SubmissionCreateOrConnectWithoutTestInput[]
    createMany?: SubmissionCreateManyTestInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type SectionUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput> | SectionCreateWithoutTestInput[] | SectionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutTestInput | SectionCreateOrConnectWithoutTestInput[]
    createMany?: SectionCreateManyTestInputEnvelope
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput> | SubmissionCreateWithoutTestInput[] | SubmissionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestInput | SubmissionCreateOrConnectWithoutTestInput[]
    createMany?: SubmissionCreateManyTestInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type EnumTestStatusFieldUpdateOperationsInput = {
    set?: $Enums.TestStatus
  }

  export type ClassUpdateOneWithoutTestsNestedInput = {
    create?: XOR<ClassCreateWithoutTestsInput, ClassUncheckedCreateWithoutTestsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTestsInput
    upsert?: ClassUpsertWithoutTestsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTestsInput, ClassUpdateWithoutTestsInput>, ClassUncheckedUpdateWithoutTestsInput>
  }

  export type UserUpdateOneRequiredWithoutTestsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutTestsCreatedInput, UserUncheckedCreateWithoutTestsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutTestsCreatedInput
    upsert?: UserUpsertWithoutTestsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTestsCreatedInput, UserUpdateWithoutTestsCreatedInput>, UserUncheckedUpdateWithoutTestsCreatedInput>
  }

  export type SectionUpdateManyWithoutTestNestedInput = {
    create?: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput> | SectionCreateWithoutTestInput[] | SectionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutTestInput | SectionCreateOrConnectWithoutTestInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutTestInput | SectionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SectionCreateManyTestInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutTestInput | SectionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutTestInput | SectionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutTestNestedInput = {
    create?: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput> | SubmissionCreateWithoutTestInput[] | SubmissionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestInput | SubmissionCreateOrConnectWithoutTestInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutTestInput | SubmissionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SubmissionCreateManyTestInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutTestInput | SubmissionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutTestInput | SubmissionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type SectionUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput> | SectionCreateWithoutTestInput[] | SectionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SectionCreateOrConnectWithoutTestInput | SectionCreateOrConnectWithoutTestInput[]
    upsert?: SectionUpsertWithWhereUniqueWithoutTestInput | SectionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SectionCreateManyTestInputEnvelope
    set?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    disconnect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    delete?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    connect?: SectionWhereUniqueInput | SectionWhereUniqueInput[]
    update?: SectionUpdateWithWhereUniqueWithoutTestInput | SectionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SectionUpdateManyWithWhereWithoutTestInput | SectionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SectionScalarWhereInput | SectionScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput> | SubmissionCreateWithoutTestInput[] | SubmissionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestInput | SubmissionCreateOrConnectWithoutTestInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutTestInput | SubmissionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: SubmissionCreateManyTestInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutTestInput | SubmissionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutTestInput | SubmissionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type TestCreateNestedOneWithoutSectionsInput = {
    create?: XOR<TestCreateWithoutSectionsInput, TestUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSectionsInput
    connect?: TestWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutSectionInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<TestCreateWithoutSectionsInput, TestUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSectionsInput
    upsert?: TestUpsertWithoutSectionsInput
    connect?: TestWhereUniqueInput
    update?: XOR<XOR<TestUpdateToOneWithWhereWithoutSectionsInput, TestUpdateWithoutSectionsInput>, TestUncheckedUpdateWithoutSectionsInput>
  }

  export type QuestionUpdateManyWithoutSectionNestedInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSectionInput | QuestionUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSectionInput | QuestionUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSectionInput | QuestionUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput> | QuestionCreateWithoutSectionInput[] | QuestionUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSectionInput | QuestionCreateOrConnectWithoutSectionInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSectionInput | QuestionUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: QuestionCreateManySectionInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSectionInput | QuestionUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSectionInput | QuestionUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SectionCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutQuestionsInput
    connect?: SectionWhereUniqueInput
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type SectionUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SectionCreateOrConnectWithoutQuestionsInput
    upsert?: SectionUpsertWithoutQuestionsInput
    connect?: SectionWhereUniqueInput
    update?: XOR<XOR<SectionUpdateToOneWithWhereWithoutQuestionsInput, SectionUpdateWithoutQuestionsInput>, SectionUncheckedUpdateWithoutQuestionsInput>
  }

  export type TestCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<TestCreateWithoutSubmissionsInput, TestUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSubmissionsInput
    connect?: TestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TestUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<TestCreateWithoutSubmissionsInput, TestUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutSubmissionsInput
    upsert?: TestUpsertWithoutSubmissionsInput
    connect?: TestWhereUniqueInput
    update?: XOR<XOR<TestUpdateToOneWithWhereWithoutSubmissionsInput, TestUpdateWithoutSubmissionsInput>, TestUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    upsert?: UserUpsertWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionsInput, UserUpdateWithoutSubmissionsInput>, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutScheduledClassesInput = {
    create?: XOR<UserCreateWithoutScheduledClassesInput, UserUncheckedCreateWithoutScheduledClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledClassesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedClassesInput = {
    create?: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClassesInput
    connect?: UserWhereUniqueInput
  }

  export type AttendanceCreateNestedManyWithoutClassScheduleInput = {
    create?: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput> | AttendanceCreateWithoutClassScheduleInput[] | AttendanceUncheckedCreateWithoutClassScheduleInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassScheduleInput | AttendanceCreateOrConnectWithoutClassScheduleInput[]
    createMany?: AttendanceCreateManyClassScheduleInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutClassScheduleInput = {
    create?: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput> | AttendanceCreateWithoutClassScheduleInput[] | AttendanceUncheckedCreateWithoutClassScheduleInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassScheduleInput | AttendanceCreateOrConnectWithoutClassScheduleInput[]
    createMany?: AttendanceCreateManyClassScheduleInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type EnumBatchTypeFieldUpdateOperationsInput = {
    set?: $Enums.BatchType
  }

  export type UserUpdateOneRequiredWithoutScheduledClassesNestedInput = {
    create?: XOR<UserCreateWithoutScheduledClassesInput, UserUncheckedCreateWithoutScheduledClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutScheduledClassesInput
    upsert?: UserUpsertWithoutScheduledClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScheduledClassesInput, UserUpdateWithoutScheduledClassesInput>, UserUncheckedUpdateWithoutScheduledClassesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedClassesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClassesInput
    upsert?: UserUpsertWithoutCreatedClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedClassesInput, UserUpdateWithoutCreatedClassesInput>, UserUncheckedUpdateWithoutCreatedClassesInput>
  }

  export type AttendanceUpdateManyWithoutClassScheduleNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput> | AttendanceCreateWithoutClassScheduleInput[] | AttendanceUncheckedCreateWithoutClassScheduleInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassScheduleInput | AttendanceCreateOrConnectWithoutClassScheduleInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassScheduleInput | AttendanceUpsertWithWhereUniqueWithoutClassScheduleInput[]
    createMany?: AttendanceCreateManyClassScheduleInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassScheduleInput | AttendanceUpdateWithWhereUniqueWithoutClassScheduleInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassScheduleInput | AttendanceUpdateManyWithWhereWithoutClassScheduleInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutClassScheduleNestedInput = {
    create?: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput> | AttendanceCreateWithoutClassScheduleInput[] | AttendanceUncheckedCreateWithoutClassScheduleInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutClassScheduleInput | AttendanceCreateOrConnectWithoutClassScheduleInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutClassScheduleInput | AttendanceUpsertWithWhereUniqueWithoutClassScheduleInput[]
    createMany?: AttendanceCreateManyClassScheduleInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutClassScheduleInput | AttendanceUpdateWithWhereUniqueWithoutClassScheduleInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutClassScheduleInput | AttendanceUpdateManyWithWhereWithoutClassScheduleInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type SpecialEventCreateNestedManyWithoutBatchesInput = {
    create?: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput> | SpecialEventCreateWithoutBatchesInput[] | SpecialEventUncheckedCreateWithoutBatchesInput[]
    connectOrCreate?: SpecialEventCreateOrConnectWithoutBatchesInput | SpecialEventCreateOrConnectWithoutBatchesInput[]
    connect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutBatchesTeachingInput = {
    create?: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput> | UserCreateWithoutBatchesTeachingInput[] | UserUncheckedCreateWithoutBatchesTeachingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBatchesTeachingInput | UserCreateOrConnectWithoutBatchesTeachingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SpecialEventUncheckedCreateNestedManyWithoutBatchesInput = {
    create?: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput> | SpecialEventCreateWithoutBatchesInput[] | SpecialEventUncheckedCreateWithoutBatchesInput[]
    connectOrCreate?: SpecialEventCreateOrConnectWithoutBatchesInput | SpecialEventCreateOrConnectWithoutBatchesInput[]
    connect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutBatchesTeachingInput = {
    create?: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput> | UserCreateWithoutBatchesTeachingInput[] | UserUncheckedCreateWithoutBatchesTeachingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBatchesTeachingInput | UserCreateOrConnectWithoutBatchesTeachingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SpecialEventUpdateManyWithoutBatchesNestedInput = {
    create?: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput> | SpecialEventCreateWithoutBatchesInput[] | SpecialEventUncheckedCreateWithoutBatchesInput[]
    connectOrCreate?: SpecialEventCreateOrConnectWithoutBatchesInput | SpecialEventCreateOrConnectWithoutBatchesInput[]
    upsert?: SpecialEventUpsertWithWhereUniqueWithoutBatchesInput | SpecialEventUpsertWithWhereUniqueWithoutBatchesInput[]
    set?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    disconnect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    delete?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    connect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    update?: SpecialEventUpdateWithWhereUniqueWithoutBatchesInput | SpecialEventUpdateWithWhereUniqueWithoutBatchesInput[]
    updateMany?: SpecialEventUpdateManyWithWhereWithoutBatchesInput | SpecialEventUpdateManyWithWhereWithoutBatchesInput[]
    deleteMany?: SpecialEventScalarWhereInput | SpecialEventScalarWhereInput[]
  }

  export type UserUpdateManyWithoutBatchesTeachingNestedInput = {
    create?: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput> | UserCreateWithoutBatchesTeachingInput[] | UserUncheckedCreateWithoutBatchesTeachingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBatchesTeachingInput | UserCreateOrConnectWithoutBatchesTeachingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBatchesTeachingInput | UserUpsertWithWhereUniqueWithoutBatchesTeachingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBatchesTeachingInput | UserUpdateWithWhereUniqueWithoutBatchesTeachingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBatchesTeachingInput | UserUpdateManyWithWhereWithoutBatchesTeachingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SpecialEventUncheckedUpdateManyWithoutBatchesNestedInput = {
    create?: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput> | SpecialEventCreateWithoutBatchesInput[] | SpecialEventUncheckedCreateWithoutBatchesInput[]
    connectOrCreate?: SpecialEventCreateOrConnectWithoutBatchesInput | SpecialEventCreateOrConnectWithoutBatchesInput[]
    upsert?: SpecialEventUpsertWithWhereUniqueWithoutBatchesInput | SpecialEventUpsertWithWhereUniqueWithoutBatchesInput[]
    set?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    disconnect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    delete?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    connect?: SpecialEventWhereUniqueInput | SpecialEventWhereUniqueInput[]
    update?: SpecialEventUpdateWithWhereUniqueWithoutBatchesInput | SpecialEventUpdateWithWhereUniqueWithoutBatchesInput[]
    updateMany?: SpecialEventUpdateManyWithWhereWithoutBatchesInput | SpecialEventUpdateManyWithWhereWithoutBatchesInput[]
    deleteMany?: SpecialEventScalarWhereInput | SpecialEventScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutBatchesTeachingNestedInput = {
    create?: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput> | UserCreateWithoutBatchesTeachingInput[] | UserUncheckedCreateWithoutBatchesTeachingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutBatchesTeachingInput | UserCreateOrConnectWithoutBatchesTeachingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutBatchesTeachingInput | UserUpsertWithWhereUniqueWithoutBatchesTeachingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutBatchesTeachingInput | UserUpdateWithWhereUniqueWithoutBatchesTeachingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutBatchesTeachingInput | UserUpdateManyWithWhereWithoutBatchesTeachingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BatchCreateNestedManyWithoutEventsInput = {
    create?: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput> | BatchCreateWithoutEventsInput[] | BatchUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutEventsInput | BatchCreateOrConnectWithoutEventsInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
  }

  export type EventParticipantCreateNestedManyWithoutEventInput = {
    create?: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput> | EventParticipantCreateWithoutEventInput[] | EventParticipantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutEventInput | EventParticipantCreateOrConnectWithoutEventInput[]
    createMany?: EventParticipantCreateManyEventInputEnvelope
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
  }

  export type BatchUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput> | BatchCreateWithoutEventsInput[] | BatchUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutEventsInput | BatchCreateOrConnectWithoutEventsInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
  }

  export type EventParticipantUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput> | EventParticipantCreateWithoutEventInput[] | EventParticipantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutEventInput | EventParticipantCreateOrConnectWithoutEventInput[]
    createMany?: EventParticipantCreateManyEventInputEnvelope
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type BatchUpdateManyWithoutEventsNestedInput = {
    create?: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput> | BatchCreateWithoutEventsInput[] | BatchUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutEventsInput | BatchCreateOrConnectWithoutEventsInput[]
    upsert?: BatchUpsertWithWhereUniqueWithoutEventsInput | BatchUpsertWithWhereUniqueWithoutEventsInput[]
    set?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    disconnect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    delete?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    update?: BatchUpdateWithWhereUniqueWithoutEventsInput | BatchUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: BatchUpdateManyWithWhereWithoutEventsInput | BatchUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: BatchScalarWhereInput | BatchScalarWhereInput[]
  }

  export type EventParticipantUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput> | EventParticipantCreateWithoutEventInput[] | EventParticipantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutEventInput | EventParticipantCreateOrConnectWithoutEventInput[]
    upsert?: EventParticipantUpsertWithWhereUniqueWithoutEventInput | EventParticipantUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventParticipantCreateManyEventInputEnvelope
    set?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    disconnect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    delete?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    update?: EventParticipantUpdateWithWhereUniqueWithoutEventInput | EventParticipantUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventParticipantUpdateManyWithWhereWithoutEventInput | EventParticipantUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
  }

  export type BatchUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput> | BatchCreateWithoutEventsInput[] | BatchUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: BatchCreateOrConnectWithoutEventsInput | BatchCreateOrConnectWithoutEventsInput[]
    upsert?: BatchUpsertWithWhereUniqueWithoutEventsInput | BatchUpsertWithWhereUniqueWithoutEventsInput[]
    set?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    disconnect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    delete?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    connect?: BatchWhereUniqueInput | BatchWhereUniqueInput[]
    update?: BatchUpdateWithWhereUniqueWithoutEventsInput | BatchUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: BatchUpdateManyWithWhereWithoutEventsInput | BatchUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: BatchScalarWhereInput | BatchScalarWhereInput[]
  }

  export type EventParticipantUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput> | EventParticipantCreateWithoutEventInput[] | EventParticipantUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventParticipantCreateOrConnectWithoutEventInput | EventParticipantCreateOrConnectWithoutEventInput[]
    upsert?: EventParticipantUpsertWithWhereUniqueWithoutEventInput | EventParticipantUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventParticipantCreateManyEventInputEnvelope
    set?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    disconnect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    delete?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    connect?: EventParticipantWhereUniqueInput | EventParticipantWhereUniqueInput[]
    update?: EventParticipantUpdateWithWhereUniqueWithoutEventInput | EventParticipantUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventParticipantUpdateManyWithWhereWithoutEventInput | EventParticipantUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
  }

  export type SpecialEventCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<SpecialEventCreateWithoutParticipantsInput, SpecialEventUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: SpecialEventCreateOrConnectWithoutParticipantsInput
    connect?: SpecialEventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventParticipationsInput = {
    create?: XOR<UserCreateWithoutEventParticipationsInput, UserUncheckedCreateWithoutEventParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type SpecialEventUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<SpecialEventCreateWithoutParticipantsInput, SpecialEventUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: SpecialEventCreateOrConnectWithoutParticipantsInput
    upsert?: SpecialEventUpsertWithoutParticipantsInput
    connect?: SpecialEventWhereUniqueInput
    update?: XOR<XOR<SpecialEventUpdateToOneWithWhereWithoutParticipantsInput, SpecialEventUpdateWithoutParticipantsInput>, SpecialEventUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutEventParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutEventParticipationsInput, UserUncheckedCreateWithoutEventParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventParticipationsInput
    upsert?: UserUpsertWithoutEventParticipationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventParticipationsInput, UserUpdateWithoutEventParticipationsInput>, UserUncheckedUpdateWithoutEventParticipationsInput>
  }

  export type ClassScheduleCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<ClassScheduleCreateWithoutAttendanceInput, ClassScheduleUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutAttendanceInput
    connect?: ClassScheduleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStudentAttendanceInput = {
    create?: XOR<UserCreateWithoutStudentAttendanceInput, UserUncheckedCreateWithoutStudentAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAttendanceInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeacherAttendanceInput = {
    create?: XOR<UserCreateWithoutTeacherAttendanceInput, UserUncheckedCreateWithoutTeacherAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAttendanceInput
    connect?: UserWhereUniqueInput
  }

  export type ClassScheduleUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<ClassScheduleCreateWithoutAttendanceInput, ClassScheduleUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: ClassScheduleCreateOrConnectWithoutAttendanceInput
    upsert?: ClassScheduleUpsertWithoutAttendanceInput
    connect?: ClassScheduleWhereUniqueInput
    update?: XOR<XOR<ClassScheduleUpdateToOneWithWhereWithoutAttendanceInput, ClassScheduleUpdateWithoutAttendanceInput>, ClassScheduleUncheckedUpdateWithoutAttendanceInput>
  }

  export type UserUpdateOneRequiredWithoutStudentAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutStudentAttendanceInput, UserUncheckedCreateWithoutStudentAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAttendanceInput
    upsert?: UserUpsertWithoutStudentAttendanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentAttendanceInput, UserUpdateWithoutStudentAttendanceInput>, UserUncheckedUpdateWithoutStudentAttendanceInput>
  }

  export type UserUpdateOneRequiredWithoutTeacherAttendanceNestedInput = {
    create?: XOR<UserCreateWithoutTeacherAttendanceInput, UserUncheckedCreateWithoutTeacherAttendanceInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherAttendanceInput
    upsert?: UserUpsertWithoutTeacherAttendanceInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeacherAttendanceInput, UserUpdateWithoutTeacherAttendanceInput>, UserUncheckedUpdateWithoutTeacherAttendanceInput>
  }

  export type UserCreateNestedOneWithoutHomeworkAssignedInput = {
    create?: XOR<UserCreateWithoutHomeworkAssignedInput, UserUncheckedCreateWithoutHomeworkAssignedInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeworkAssignedInput
    connect?: UserWhereUniqueInput
  }

  export type HomeworkSubmissionCreateNestedManyWithoutHomeworkInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput> | HomeworkSubmissionCreateWithoutHomeworkInput[] | HomeworkSubmissionUncheckedCreateWithoutHomeworkInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutHomeworkInput | HomeworkSubmissionCreateOrConnectWithoutHomeworkInput[]
    createMany?: HomeworkSubmissionCreateManyHomeworkInputEnvelope
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
  }

  export type HomeworkSubmissionUncheckedCreateNestedManyWithoutHomeworkInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput> | HomeworkSubmissionCreateWithoutHomeworkInput[] | HomeworkSubmissionUncheckedCreateWithoutHomeworkInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutHomeworkInput | HomeworkSubmissionCreateOrConnectWithoutHomeworkInput[]
    createMany?: HomeworkSubmissionCreateManyHomeworkInputEnvelope
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
  }

  export type EnumHomeworkStatusFieldUpdateOperationsInput = {
    set?: $Enums.HomeworkStatus
  }

  export type UserUpdateOneRequiredWithoutHomeworkAssignedNestedInput = {
    create?: XOR<UserCreateWithoutHomeworkAssignedInput, UserUncheckedCreateWithoutHomeworkAssignedInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeworkAssignedInput
    upsert?: UserUpsertWithoutHomeworkAssignedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHomeworkAssignedInput, UserUpdateWithoutHomeworkAssignedInput>, UserUncheckedUpdateWithoutHomeworkAssignedInput>
  }

  export type HomeworkSubmissionUpdateManyWithoutHomeworkNestedInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput> | HomeworkSubmissionCreateWithoutHomeworkInput[] | HomeworkSubmissionUncheckedCreateWithoutHomeworkInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutHomeworkInput | HomeworkSubmissionCreateOrConnectWithoutHomeworkInput[]
    upsert?: HomeworkSubmissionUpsertWithWhereUniqueWithoutHomeworkInput | HomeworkSubmissionUpsertWithWhereUniqueWithoutHomeworkInput[]
    createMany?: HomeworkSubmissionCreateManyHomeworkInputEnvelope
    set?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    disconnect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    delete?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    update?: HomeworkSubmissionUpdateWithWhereUniqueWithoutHomeworkInput | HomeworkSubmissionUpdateWithWhereUniqueWithoutHomeworkInput[]
    updateMany?: HomeworkSubmissionUpdateManyWithWhereWithoutHomeworkInput | HomeworkSubmissionUpdateManyWithWhereWithoutHomeworkInput[]
    deleteMany?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
  }

  export type HomeworkSubmissionUncheckedUpdateManyWithoutHomeworkNestedInput = {
    create?: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput> | HomeworkSubmissionCreateWithoutHomeworkInput[] | HomeworkSubmissionUncheckedCreateWithoutHomeworkInput[]
    connectOrCreate?: HomeworkSubmissionCreateOrConnectWithoutHomeworkInput | HomeworkSubmissionCreateOrConnectWithoutHomeworkInput[]
    upsert?: HomeworkSubmissionUpsertWithWhereUniqueWithoutHomeworkInput | HomeworkSubmissionUpsertWithWhereUniqueWithoutHomeworkInput[]
    createMany?: HomeworkSubmissionCreateManyHomeworkInputEnvelope
    set?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    disconnect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    delete?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    connect?: HomeworkSubmissionWhereUniqueInput | HomeworkSubmissionWhereUniqueInput[]
    update?: HomeworkSubmissionUpdateWithWhereUniqueWithoutHomeworkInput | HomeworkSubmissionUpdateWithWhereUniqueWithoutHomeworkInput[]
    updateMany?: HomeworkSubmissionUpdateManyWithWhereWithoutHomeworkInput | HomeworkSubmissionUpdateManyWithWhereWithoutHomeworkInput[]
    deleteMany?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
  }

  export type HomeworkCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<HomeworkCreateWithoutSubmissionsInput, HomeworkUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: HomeworkCreateOrConnectWithoutSubmissionsInput
    connect?: HomeworkWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHomeworkSubmissionsInput = {
    create?: XOR<UserCreateWithoutHomeworkSubmissionsInput, UserUncheckedCreateWithoutHomeworkSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeworkSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumSubmissionTypeFieldUpdateOperationsInput = {
    set?: $Enums.SubmissionType
  }

  export type HomeworkUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<HomeworkCreateWithoutSubmissionsInput, HomeworkUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: HomeworkCreateOrConnectWithoutSubmissionsInput
    upsert?: HomeworkUpsertWithoutSubmissionsInput
    connect?: HomeworkWhereUniqueInput
    update?: XOR<XOR<HomeworkUpdateToOneWithWhereWithoutSubmissionsInput, HomeworkUpdateWithoutSubmissionsInput>, HomeworkUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutHomeworkSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutHomeworkSubmissionsInput, UserUncheckedCreateWithoutHomeworkSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeworkSubmissionsInput
    upsert?: UserUpsertWithoutHomeworkSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHomeworkSubmissionsInput, UserUpdateWithoutHomeworkSubmissionsInput>, UserUncheckedUpdateWithoutHomeworkSubmissionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumBatchTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BatchType[] | null
    notIn?: $Enums.BatchType[] | null
    not?: NestedEnumBatchTypeNullableFilter<$PrismaModel> | $Enums.BatchType | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumBatchTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.BatchType[] | null
    notIn?: $Enums.BatchType[] | null
    not?: NestedEnumBatchTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.BatchType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBatchTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumBatchTypeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDoubtStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DoubtStatus | EnumDoubtStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DoubtStatus[]
    notIn?: $Enums.DoubtStatus[]
    not?: NestedEnumDoubtStatusFilter<$PrismaModel> | $Enums.DoubtStatus
  }

  export type NestedEnumDoubtStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DoubtStatus | EnumDoubtStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DoubtStatus[]
    notIn?: $Enums.DoubtStatus[]
    not?: NestedEnumDoubtStatusWithAggregatesFilter<$PrismaModel> | $Enums.DoubtStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDoubtStatusFilter<$PrismaModel>
    _max?: NestedEnumDoubtStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[]
    notIn?: $Enums.TestStatus[]
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type NestedEnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[]
    notIn?: $Enums.TestStatus[]
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[]
    notIn?: $Enums.QuestionType[]
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BatchType[]
    notIn?: $Enums.BatchType[]
    not?: NestedEnumBatchTypeFilter<$PrismaModel> | $Enums.BatchType
  }

  export type NestedEnumBatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BatchType | EnumBatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BatchType[]
    notIn?: $Enums.BatchType[]
    not?: NestedEnumBatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.BatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBatchTypeFilter<$PrismaModel>
    _max?: NestedEnumBatchTypeFilter<$PrismaModel>
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[]
    notIn?: $Enums.EventType[]
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumHomeworkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HomeworkStatus | EnumHomeworkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HomeworkStatus[]
    notIn?: $Enums.HomeworkStatus[]
    not?: NestedEnumHomeworkStatusFilter<$PrismaModel> | $Enums.HomeworkStatus
  }

  export type NestedEnumHomeworkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HomeworkStatus | EnumHomeworkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HomeworkStatus[]
    notIn?: $Enums.HomeworkStatus[]
    not?: NestedEnumHomeworkStatusWithAggregatesFilter<$PrismaModel> | $Enums.HomeworkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHomeworkStatusFilter<$PrismaModel>
    _max?: NestedEnumHomeworkStatusFilter<$PrismaModel>
  }

  export type NestedEnumSubmissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[]
    notIn?: $Enums.SubmissionType[]
    not?: NestedEnumSubmissionTypeFilter<$PrismaModel> | $Enums.SubmissionType
  }

  export type NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionType | EnumSubmissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionType[]
    notIn?: $Enums.SubmissionType[]
    not?: NestedEnumSubmissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionTypeFilter<$PrismaModel>
    _max?: NestedEnumSubmissionTypeFilter<$PrismaModel>
  }

  export type DoubtCreateWithoutStudentInput = {
    id?: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointment?: AppointmentCreateNestedOneWithoutDoubtInput
  }

  export type DoubtUncheckedCreateWithoutStudentInput = {
    id?: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    appointment?: AppointmentUncheckedCreateNestedOneWithoutDoubtInput
  }

  export type DoubtCreateOrConnectWithoutStudentInput = {
    where: DoubtWhereUniqueInput
    create: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput>
  }

  export type DoubtCreateManyStudentInputEnvelope = {
    data: DoubtCreateManyStudentInput | DoubtCreateManyStudentInput[]
  }

  export type AppointmentCreateWithoutTeacherInput = {
    id?: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doubt: DoubtCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutTeacherInput = {
    id?: string
    doubtId: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutTeacherInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput>
  }

  export type AppointmentCreateManyTeacherInputEnvelope = {
    data: AppointmentCreateManyTeacherInput | AppointmentCreateManyTeacherInput[]
  }

  export type TestCreateWithoutAuthorInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class?: ClassCreateNestedOneWithoutTestsInput
    sections?: SectionCreateNestedManyWithoutTestInput
    submissions?: SubmissionCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateWithoutAuthorInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutTestInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutAuthorInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput>
  }

  export type TestCreateManyAuthorInputEnvelope = {
    data: TestCreateManyAuthorInput | TestCreateManyAuthorInput[]
  }

  export type SubmissionCreateWithoutStudentInput = {
    id?: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
    test: TestCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    testId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionCreateManyStudentInputEnvelope = {
    data: SubmissionCreateManyStudentInput | SubmissionCreateManyStudentInput[]
  }

  export type ClassStudentCreateWithoutStudentInput = {
    id?: string
    joinedAt?: Date | string
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type ClassStudentUncheckedCreateWithoutStudentInput = {
    id?: string
    classId: string
    joinedAt?: Date | string
  }

  export type ClassStudentCreateOrConnectWithoutStudentInput = {
    where: ClassStudentWhereUniqueInput
    create: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput>
  }

  export type ClassStudentCreateManyStudentInputEnvelope = {
    data: ClassStudentCreateManyStudentInput | ClassStudentCreateManyStudentInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type ClassScheduleCreateWithoutTeacherInput = {
    id?: string
    subject: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedClassesInput
    attendance?: AttendanceCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleUncheckedCreateWithoutTeacherInput = {
    id?: string
    subject: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleCreateOrConnectWithoutTeacherInput = {
    where: ClassScheduleWhereUniqueInput
    create: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type ClassScheduleCreateManyTeacherInputEnvelope = {
    data: ClassScheduleCreateManyTeacherInput | ClassScheduleCreateManyTeacherInput[]
  }

  export type ClassScheduleCreateWithoutCreatorInput = {
    id?: string
    subject: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutScheduledClassesInput
    attendance?: AttendanceCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleUncheckedCreateWithoutCreatorInput = {
    id?: string
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendance?: AttendanceUncheckedCreateNestedManyWithoutClassScheduleInput
  }

  export type ClassScheduleCreateOrConnectWithoutCreatorInput = {
    where: ClassScheduleWhereUniqueInput
    create: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput>
  }

  export type ClassScheduleCreateManyCreatorInputEnvelope = {
    data: ClassScheduleCreateManyCreatorInput | ClassScheduleCreateManyCreatorInput[]
  }

  export type AttendanceCreateWithoutStudentInput = {
    id?: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classSchedule: ClassScheduleCreateNestedOneWithoutAttendanceInput
    teacher: UserCreateNestedOneWithoutTeacherAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutStudentInput = {
    id?: string
    classScheduleId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateOrConnectWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceCreateManyStudentInputEnvelope = {
    data: AttendanceCreateManyStudentInput | AttendanceCreateManyStudentInput[]
  }

  export type AttendanceCreateWithoutTeacherInput = {
    id?: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    classSchedule: ClassScheduleCreateNestedOneWithoutAttendanceInput
    student: UserCreateNestedOneWithoutStudentAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutTeacherInput = {
    id?: string
    classScheduleId: string
    studentId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateOrConnectWithoutTeacherInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput>
  }

  export type AttendanceCreateManyTeacherInputEnvelope = {
    data: AttendanceCreateManyTeacherInput | AttendanceCreateManyTeacherInput[]
  }

  export type EventParticipantCreateWithoutUserInput = {
    id?: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    event: SpecialEventCreateNestedOneWithoutParticipantsInput
  }

  export type EventParticipantUncheckedCreateWithoutUserInput = {
    id?: string
    eventId: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type EventParticipantCreateOrConnectWithoutUserInput = {
    where: EventParticipantWhereUniqueInput
    create: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput>
  }

  export type EventParticipantCreateManyUserInputEnvelope = {
    data: EventParticipantCreateManyUserInput | EventParticipantCreateManyUserInput[]
  }

  export type BatchCreateWithoutTeachersAssignedInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: SpecialEventCreateNestedManyWithoutBatchesInput
  }

  export type BatchUncheckedCreateWithoutTeachersAssignedInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: SpecialEventUncheckedCreateNestedManyWithoutBatchesInput
  }

  export type BatchCreateOrConnectWithoutTeachersAssignedInput = {
    where: BatchWhereUniqueInput
    create: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput>
  }

  export type HomeworkCreateWithoutTeacherInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: HomeworkSubmissionCreateNestedManyWithoutHomeworkInput
  }

  export type HomeworkUncheckedCreateWithoutTeacherInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutHomeworkInput
  }

  export type HomeworkCreateOrConnectWithoutTeacherInput = {
    where: HomeworkWhereUniqueInput
    create: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput>
  }

  export type HomeworkCreateManyTeacherInputEnvelope = {
    data: HomeworkCreateManyTeacherInput | HomeworkCreateManyTeacherInput[]
  }

  export type HomeworkSubmissionCreateWithoutStudentInput = {
    id?: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    homework: HomeworkCreateNestedOneWithoutSubmissionsInput
  }

  export type HomeworkSubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    homeworkId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionCreateOrConnectWithoutStudentInput = {
    where: HomeworkSubmissionWhereUniqueInput
    create: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type HomeworkSubmissionCreateManyStudentInputEnvelope = {
    data: HomeworkSubmissionCreateManyStudentInput | HomeworkSubmissionCreateManyStudentInput[]
  }

  export type DoubtUpsertWithWhereUniqueWithoutStudentInput = {
    where: DoubtWhereUniqueInput
    update: XOR<DoubtUpdateWithoutStudentInput, DoubtUncheckedUpdateWithoutStudentInput>
    create: XOR<DoubtCreateWithoutStudentInput, DoubtUncheckedCreateWithoutStudentInput>
  }

  export type DoubtUpdateWithWhereUniqueWithoutStudentInput = {
    where: DoubtWhereUniqueInput
    data: XOR<DoubtUpdateWithoutStudentInput, DoubtUncheckedUpdateWithoutStudentInput>
  }

  export type DoubtUpdateManyWithWhereWithoutStudentInput = {
    where: DoubtScalarWhereInput
    data: XOR<DoubtUpdateManyMutationInput, DoubtUncheckedUpdateManyWithoutStudentInput>
  }

  export type DoubtScalarWhereInput = {
    AND?: DoubtScalarWhereInput | DoubtScalarWhereInput[]
    OR?: DoubtScalarWhereInput[]
    NOT?: DoubtScalarWhereInput | DoubtScalarWhereInput[]
    id?: StringFilter<"Doubt"> | string
    studentId?: StringFilter<"Doubt"> | string
    subject?: StringFilter<"Doubt"> | string
    description?: StringFilter<"Doubt"> | string
    imageUrl?: StringNullableFilter<"Doubt"> | string | null
    priority?: StringFilter<"Doubt"> | string
    status?: EnumDoubtStatusFilter<"Doubt"> | $Enums.DoubtStatus
    createdAt?: DateTimeFilter<"Doubt"> | Date | string
    updatedAt?: DateTimeFilter<"Doubt"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutTeacherInput, AppointmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<AppointmentCreateWithoutTeacherInput, AppointmentUncheckedCreateWithoutTeacherInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutTeacherInput, AppointmentUncheckedUpdateWithoutTeacherInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutTeacherInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    doubtId?: StringFilter<"Appointment"> | string
    teacherId?: StringFilter<"Appointment"> | string
    scheduledAt?: DateTimeFilter<"Appointment"> | Date | string
    duration?: IntFilter<"Appointment"> | number
    notes?: StringNullableFilter<"Appointment"> | string | null
    meetingLink?: StringNullableFilter<"Appointment"> | string | null
    status?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type TestUpsertWithWhereUniqueWithoutAuthorInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutAuthorInput, TestUncheckedUpdateWithoutAuthorInput>
    create: XOR<TestCreateWithoutAuthorInput, TestUncheckedCreateWithoutAuthorInput>
  }

  export type TestUpdateWithWhereUniqueWithoutAuthorInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutAuthorInput, TestUncheckedUpdateWithoutAuthorInput>
  }

  export type TestUpdateManyWithWhereWithoutAuthorInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutAuthorInput>
  }

  export type TestScalarWhereInput = {
    AND?: TestScalarWhereInput | TestScalarWhereInput[]
    OR?: TestScalarWhereInput[]
    NOT?: TestScalarWhereInput | TestScalarWhereInput[]
    id?: StringFilter<"Test"> | string
    title?: StringFilter<"Test"> | string
    description?: StringNullableFilter<"Test"> | string | null
    classId?: StringNullableFilter<"Test"> | string | null
    authorId?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    totalMarks?: IntFilter<"Test"> | number
    passingMarks?: IntFilter<"Test"> | number
    instructions?: StringNullableFilter<"Test"> | string | null
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    scheduledAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    endsAt?: DateTimeNullableFilter<"Test"> | Date | string | null
    allowReview?: BoolFilter<"Test"> | boolean
    shuffleQuestions?: BoolFilter<"Test"> | boolean
    showResults?: BoolFilter<"Test"> | boolean
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updatedAt?: DateTimeFilter<"Test"> | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    testId?: StringFilter<"Submission"> | string
    studentId?: StringFilter<"Submission"> | string
    answers?: JsonFilter<"Submission">
    score?: IntFilter<"Submission"> | number
    totalMarks?: IntFilter<"Submission"> | number
    percentage?: FloatFilter<"Submission"> | number
    timeTaken?: IntFilter<"Submission"> | number
    isCompleted?: BoolFilter<"Submission"> | boolean
    startedAt?: DateTimeFilter<"Submission"> | Date | string
    submittedAt?: DateTimeNullableFilter<"Submission"> | Date | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type ClassStudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: ClassStudentWhereUniqueInput
    update: XOR<ClassStudentUpdateWithoutStudentInput, ClassStudentUncheckedUpdateWithoutStudentInput>
    create: XOR<ClassStudentCreateWithoutStudentInput, ClassStudentUncheckedCreateWithoutStudentInput>
  }

  export type ClassStudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: ClassStudentWhereUniqueInput
    data: XOR<ClassStudentUpdateWithoutStudentInput, ClassStudentUncheckedUpdateWithoutStudentInput>
  }

  export type ClassStudentUpdateManyWithWhereWithoutStudentInput = {
    where: ClassStudentScalarWhereInput
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type ClassStudentScalarWhereInput = {
    AND?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
    OR?: ClassStudentScalarWhereInput[]
    NOT?: ClassStudentScalarWhereInput | ClassStudentScalarWhereInput[]
    id?: StringFilter<"ClassStudent"> | string
    classId?: StringFilter<"ClassStudent"> | string
    studentId?: StringFilter<"ClassStudent"> | string
    joinedAt?: DateTimeFilter<"ClassStudent"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ClassScheduleUpsertWithWhereUniqueWithoutTeacherInput = {
    where: ClassScheduleWhereUniqueInput
    update: XOR<ClassScheduleUpdateWithoutTeacherInput, ClassScheduleUncheckedUpdateWithoutTeacherInput>
    create: XOR<ClassScheduleCreateWithoutTeacherInput, ClassScheduleUncheckedCreateWithoutTeacherInput>
  }

  export type ClassScheduleUpdateWithWhereUniqueWithoutTeacherInput = {
    where: ClassScheduleWhereUniqueInput
    data: XOR<ClassScheduleUpdateWithoutTeacherInput, ClassScheduleUncheckedUpdateWithoutTeacherInput>
  }

  export type ClassScheduleUpdateManyWithWhereWithoutTeacherInput = {
    where: ClassScheduleScalarWhereInput
    data: XOR<ClassScheduleUpdateManyMutationInput, ClassScheduleUncheckedUpdateManyWithoutTeacherInput>
  }

  export type ClassScheduleScalarWhereInput = {
    AND?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
    OR?: ClassScheduleScalarWhereInput[]
    NOT?: ClassScheduleScalarWhereInput | ClassScheduleScalarWhereInput[]
    id?: StringFilter<"ClassSchedule"> | string
    subject?: StringFilter<"ClassSchedule"> | string
    teacherId?: StringFilter<"ClassSchedule"> | string
    creatorId?: StringFilter<"ClassSchedule"> | string
    batchType?: EnumBatchTypeFilter<"ClassSchedule"> | $Enums.BatchType
    roomNumber?: StringFilter<"ClassSchedule"> | string
    date?: DateTimeFilter<"ClassSchedule"> | Date | string
    startTime?: StringFilter<"ClassSchedule"> | string
    endTime?: StringFilter<"ClassSchedule"> | string
    topic?: StringNullableFilter<"ClassSchedule"> | string | null
    description?: StringNullableFilter<"ClassSchedule"> | string | null
    isActive?: BoolFilter<"ClassSchedule"> | boolean
    createdAt?: DateTimeFilter<"ClassSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSchedule"> | Date | string
  }

  export type ClassScheduleUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ClassScheduleWhereUniqueInput
    update: XOR<ClassScheduleUpdateWithoutCreatorInput, ClassScheduleUncheckedUpdateWithoutCreatorInput>
    create: XOR<ClassScheduleCreateWithoutCreatorInput, ClassScheduleUncheckedCreateWithoutCreatorInput>
  }

  export type ClassScheduleUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ClassScheduleWhereUniqueInput
    data: XOR<ClassScheduleUpdateWithoutCreatorInput, ClassScheduleUncheckedUpdateWithoutCreatorInput>
  }

  export type ClassScheduleUpdateManyWithWhereWithoutCreatorInput = {
    where: ClassScheduleScalarWhereInput
    data: XOR<ClassScheduleUpdateManyMutationInput, ClassScheduleUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AttendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutStudentInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: StringFilter<"Attendance"> | string
    classScheduleId?: StringFilter<"Attendance"> | string
    studentId?: StringFilter<"Attendance"> | string
    teacherId?: StringFilter<"Attendance"> | string
    status?: StringFilter<"Attendance"> | string
    markedAt?: DateTimeFilter<"Attendance"> | Date | string
    notes?: StringNullableFilter<"Attendance"> | string | null
    createdAt?: DateTimeFilter<"Attendance"> | Date | string
    updatedAt?: DateTimeFilter<"Attendance"> | Date | string
  }

  export type AttendanceUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutTeacherInput, AttendanceUncheckedUpdateWithoutTeacherInput>
    create: XOR<AttendanceCreateWithoutTeacherInput, AttendanceUncheckedCreateWithoutTeacherInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutTeacherInput, AttendanceUncheckedUpdateWithoutTeacherInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutTeacherInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutTeacherInput>
  }

  export type EventParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: EventParticipantWhereUniqueInput
    update: XOR<EventParticipantUpdateWithoutUserInput, EventParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<EventParticipantCreateWithoutUserInput, EventParticipantUncheckedCreateWithoutUserInput>
  }

  export type EventParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: EventParticipantWhereUniqueInput
    data: XOR<EventParticipantUpdateWithoutUserInput, EventParticipantUncheckedUpdateWithoutUserInput>
  }

  export type EventParticipantUpdateManyWithWhereWithoutUserInput = {
    where: EventParticipantScalarWhereInput
    data: XOR<EventParticipantUpdateManyMutationInput, EventParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type EventParticipantScalarWhereInput = {
    AND?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
    OR?: EventParticipantScalarWhereInput[]
    NOT?: EventParticipantScalarWhereInput | EventParticipantScalarWhereInput[]
    id?: StringFilter<"EventParticipant"> | string
    eventId?: StringFilter<"EventParticipant"> | string
    userUid?: StringFilter<"EventParticipant"> | string
    status?: StringFilter<"EventParticipant"> | string
    respondedAt?: DateTimeNullableFilter<"EventParticipant"> | Date | string | null
    createdAt?: DateTimeFilter<"EventParticipant"> | Date | string
  }

  export type BatchUpsertWithWhereUniqueWithoutTeachersAssignedInput = {
    where: BatchWhereUniqueInput
    update: XOR<BatchUpdateWithoutTeachersAssignedInput, BatchUncheckedUpdateWithoutTeachersAssignedInput>
    create: XOR<BatchCreateWithoutTeachersAssignedInput, BatchUncheckedCreateWithoutTeachersAssignedInput>
  }

  export type BatchUpdateWithWhereUniqueWithoutTeachersAssignedInput = {
    where: BatchWhereUniqueInput
    data: XOR<BatchUpdateWithoutTeachersAssignedInput, BatchUncheckedUpdateWithoutTeachersAssignedInput>
  }

  export type BatchUpdateManyWithWhereWithoutTeachersAssignedInput = {
    where: BatchScalarWhereInput
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyWithoutTeachersAssignedInput>
  }

  export type BatchScalarWhereInput = {
    AND?: BatchScalarWhereInput | BatchScalarWhereInput[]
    OR?: BatchScalarWhereInput[]
    NOT?: BatchScalarWhereInput | BatchScalarWhereInput[]
    id?: StringFilter<"Batch"> | string
    type?: EnumBatchTypeFilter<"Batch"> | $Enums.BatchType
    name?: StringFilter<"Batch"> | string
    isActive?: BoolFilter<"Batch"> | boolean
    createdAt?: DateTimeFilter<"Batch"> | Date | string
    updatedAt?: DateTimeFilter<"Batch"> | Date | string
  }

  export type HomeworkUpsertWithWhereUniqueWithoutTeacherInput = {
    where: HomeworkWhereUniqueInput
    update: XOR<HomeworkUpdateWithoutTeacherInput, HomeworkUncheckedUpdateWithoutTeacherInput>
    create: XOR<HomeworkCreateWithoutTeacherInput, HomeworkUncheckedCreateWithoutTeacherInput>
  }

  export type HomeworkUpdateWithWhereUniqueWithoutTeacherInput = {
    where: HomeworkWhereUniqueInput
    data: XOR<HomeworkUpdateWithoutTeacherInput, HomeworkUncheckedUpdateWithoutTeacherInput>
  }

  export type HomeworkUpdateManyWithWhereWithoutTeacherInput = {
    where: HomeworkScalarWhereInput
    data: XOR<HomeworkUpdateManyMutationInput, HomeworkUncheckedUpdateManyWithoutTeacherInput>
  }

  export type HomeworkScalarWhereInput = {
    AND?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
    OR?: HomeworkScalarWhereInput[]
    NOT?: HomeworkScalarWhereInput | HomeworkScalarWhereInput[]
    id?: StringFilter<"Homework"> | string
    title?: StringFilter<"Homework"> | string
    description?: StringFilter<"Homework"> | string
    instructions?: StringNullableFilter<"Homework"> | string | null
    subject?: StringFilter<"Homework"> | string
    teacherId?: StringFilter<"Homework"> | string
    batchType?: EnumBatchTypeFilter<"Homework"> | $Enums.BatchType
    imageUrl?: StringNullableFilter<"Homework"> | string | null
    dueDate?: DateTimeFilter<"Homework"> | Date | string
    totalMarks?: IntFilter<"Homework"> | number
    status?: EnumHomeworkStatusFilter<"Homework"> | $Enums.HomeworkStatus
    isActive?: BoolFilter<"Homework"> | boolean
    createdAt?: DateTimeFilter<"Homework"> | Date | string
    updatedAt?: DateTimeFilter<"Homework"> | Date | string
  }

  export type HomeworkSubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: HomeworkSubmissionWhereUniqueInput
    update: XOR<HomeworkSubmissionUpdateWithoutStudentInput, HomeworkSubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<HomeworkSubmissionCreateWithoutStudentInput, HomeworkSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type HomeworkSubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: HomeworkSubmissionWhereUniqueInput
    data: XOR<HomeworkSubmissionUpdateWithoutStudentInput, HomeworkSubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type HomeworkSubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: HomeworkSubmissionScalarWhereInput
    data: XOR<HomeworkSubmissionUpdateManyMutationInput, HomeworkSubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type HomeworkSubmissionScalarWhereInput = {
    AND?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
    OR?: HomeworkSubmissionScalarWhereInput[]
    NOT?: HomeworkSubmissionScalarWhereInput | HomeworkSubmissionScalarWhereInput[]
    id?: StringFilter<"HomeworkSubmission"> | string
    homeworkId?: StringFilter<"HomeworkSubmission"> | string
    studentId?: StringFilter<"HomeworkSubmission"> | string
    submissionType?: EnumSubmissionTypeFilter<"HomeworkSubmission"> | $Enums.SubmissionType
    textContent?: StringNullableFilter<"HomeworkSubmission"> | string | null
    imageUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    documentUrl?: StringNullableFilter<"HomeworkSubmission"> | string | null
    unableReason?: StringNullableFilter<"HomeworkSubmission"> | string | null
    status?: EnumHomeworkStatusFilter<"HomeworkSubmission"> | $Enums.HomeworkStatus
    marksObtained?: IntNullableFilter<"HomeworkSubmission"> | number | null
    teacherRemarks?: StringNullableFilter<"HomeworkSubmission"> | string | null
    grade?: StringNullableFilter<"HomeworkSubmission"> | string | null
    submittedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"HomeworkSubmission"> | Date | string | null
    createdAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkSubmission"> | Date | string
  }

  export type ClassStudentCreateWithoutClassInput = {
    id?: string
    joinedAt?: Date | string
    student: UserCreateNestedOneWithoutClassesInput
  }

  export type ClassStudentUncheckedCreateWithoutClassInput = {
    id?: string
    studentId: string
    joinedAt?: Date | string
  }

  export type ClassStudentCreateOrConnectWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    create: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput>
  }

  export type ClassStudentCreateManyClassInputEnvelope = {
    data: ClassStudentCreateManyClassInput | ClassStudentCreateManyClassInput[]
  }

  export type TestCreateWithoutClassInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutTestsCreatedInput
    sections?: SectionCreateNestedManyWithoutTestInput
    submissions?: SubmissionCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateWithoutClassInput = {
    id?: string
    title: string
    description?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutTestInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutClassInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput>
  }

  export type TestCreateManyClassInputEnvelope = {
    data: TestCreateManyClassInput | TestCreateManyClassInput[]
  }

  export type ClassStudentUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    update: XOR<ClassStudentUpdateWithoutClassInput, ClassStudentUncheckedUpdateWithoutClassInput>
    create: XOR<ClassStudentCreateWithoutClassInput, ClassStudentUncheckedCreateWithoutClassInput>
  }

  export type ClassStudentUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassStudentWhereUniqueInput
    data: XOR<ClassStudentUpdateWithoutClassInput, ClassStudentUncheckedUpdateWithoutClassInput>
  }

  export type ClassStudentUpdateManyWithWhereWithoutClassInput = {
    where: ClassStudentScalarWhereInput
    data: XOR<ClassStudentUpdateManyMutationInput, ClassStudentUncheckedUpdateManyWithoutClassInput>
  }

  export type TestUpsertWithWhereUniqueWithoutClassInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutClassInput, TestUncheckedUpdateWithoutClassInput>
    create: XOR<TestCreateWithoutClassInput, TestUncheckedCreateWithoutClassInput>
  }

  export type TestUpdateWithWhereUniqueWithoutClassInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutClassInput, TestUncheckedUpdateWithoutClassInput>
  }

  export type TestUpdateManyWithWhereWithoutClassInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassCreateWithoutStudentsInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tests?: TestCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tests?: TestUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type UserCreateWithoutClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tests?: TestUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tests?: TestUncheckedUpdateManyWithoutClassNestedInput
  }

  export type UserUpsertWithoutClassesInput = {
    update: XOR<UserUpdateWithoutClassesInput, UserUncheckedUpdateWithoutClassesInput>
    create: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClassesInput, UserUncheckedUpdateWithoutClassesInput>
  }

  export type UserUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutDoubtsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutDoubtsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutDoubtsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoubtsInput, UserUncheckedCreateWithoutDoubtsInput>
  }

  export type AppointmentCreateWithoutDoubtInput = {
    id?: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutDoubtInput = {
    id?: string
    teacherId: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutDoubtInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
  }

  export type UserUpsertWithoutDoubtsInput = {
    update: XOR<UserUpdateWithoutDoubtsInput, UserUncheckedUpdateWithoutDoubtsInput>
    create: XOR<UserCreateWithoutDoubtsInput, UserUncheckedCreateWithoutDoubtsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoubtsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoubtsInput, UserUncheckedUpdateWithoutDoubtsInput>
  }

  export type UserUpdateWithoutDoubtsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutDoubtsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AppointmentUpsertWithoutDoubtInput = {
    update: XOR<AppointmentUpdateWithoutDoubtInput, AppointmentUncheckedUpdateWithoutDoubtInput>
    create: XOR<AppointmentCreateWithoutDoubtInput, AppointmentUncheckedCreateWithoutDoubtInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutDoubtInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutDoubtInput, AppointmentUncheckedUpdateWithoutDoubtInput>
  }

  export type AppointmentUpdateWithoutDoubtInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutDoubtInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoubtCreateWithoutAppointmentInput = {
    id?: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutDoubtsInput
  }

  export type DoubtUncheckedCreateWithoutAppointmentInput = {
    id?: string
    studentId: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoubtCreateOrConnectWithoutAppointmentInput = {
    where: DoubtWhereUniqueInput
    create: XOR<DoubtCreateWithoutAppointmentInput, DoubtUncheckedCreateWithoutAppointmentInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type DoubtUpsertWithoutAppointmentInput = {
    update: XOR<DoubtUpdateWithoutAppointmentInput, DoubtUncheckedUpdateWithoutAppointmentInput>
    create: XOR<DoubtCreateWithoutAppointmentInput, DoubtUncheckedCreateWithoutAppointmentInput>
    where?: DoubtWhereInput
  }

  export type DoubtUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: DoubtWhereInput
    data: XOR<DoubtUpdateWithoutAppointmentInput, DoubtUncheckedUpdateWithoutAppointmentInput>
  }

  export type DoubtUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutDoubtsNestedInput
  }

  export type DoubtUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassCreateWithoutTestsInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: ClassStudentCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutTestsInput = {
    id?: string
    name: string
    description?: string | null
    subject: string
    grade: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: ClassStudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTestsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTestsInput, ClassUncheckedCreateWithoutTestsInput>
  }

  export type UserCreateWithoutTestsCreatedInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutTestsCreatedInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutTestsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTestsCreatedInput, UserUncheckedCreateWithoutTestsCreatedInput>
  }

  export type SectionCreateWithoutTestInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    timeLimit?: number | null
    questions?: QuestionCreateNestedManyWithoutSectionInput
  }

  export type SectionUncheckedCreateWithoutTestInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    timeLimit?: number | null
    questions?: QuestionUncheckedCreateNestedManyWithoutSectionInput
  }

  export type SectionCreateOrConnectWithoutTestInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput>
  }

  export type SectionCreateManyTestInputEnvelope = {
    data: SectionCreateManyTestInput | SectionCreateManyTestInput[]
  }

  export type SubmissionCreateWithoutTestInput = {
    id?: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutTestInput = {
    id?: string
    studentId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutTestInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput>
  }

  export type SubmissionCreateManyTestInputEnvelope = {
    data: SubmissionCreateManyTestInput | SubmissionCreateManyTestInput[]
  }

  export type ClassUpsertWithoutTestsInput = {
    update: XOR<ClassUpdateWithoutTestsInput, ClassUncheckedUpdateWithoutTestsInput>
    create: XOR<ClassCreateWithoutTestsInput, ClassUncheckedCreateWithoutTestsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutTestsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutTestsInput, ClassUncheckedUpdateWithoutTestsInput>
  }

  export type ClassUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: ClassStudentUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: ClassStudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type UserUpsertWithoutTestsCreatedInput = {
    update: XOR<UserUpdateWithoutTestsCreatedInput, UserUncheckedUpdateWithoutTestsCreatedInput>
    create: XOR<UserCreateWithoutTestsCreatedInput, UserUncheckedCreateWithoutTestsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTestsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTestsCreatedInput, UserUncheckedUpdateWithoutTestsCreatedInput>
  }

  export type UserUpdateWithoutTestsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutTestsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SectionUpsertWithWhereUniqueWithoutTestInput = {
    where: SectionWhereUniqueInput
    update: XOR<SectionUpdateWithoutTestInput, SectionUncheckedUpdateWithoutTestInput>
    create: XOR<SectionCreateWithoutTestInput, SectionUncheckedCreateWithoutTestInput>
  }

  export type SectionUpdateWithWhereUniqueWithoutTestInput = {
    where: SectionWhereUniqueInput
    data: XOR<SectionUpdateWithoutTestInput, SectionUncheckedUpdateWithoutTestInput>
  }

  export type SectionUpdateManyWithWhereWithoutTestInput = {
    where: SectionScalarWhereInput
    data: XOR<SectionUpdateManyMutationInput, SectionUncheckedUpdateManyWithoutTestInput>
  }

  export type SectionScalarWhereInput = {
    AND?: SectionScalarWhereInput | SectionScalarWhereInput[]
    OR?: SectionScalarWhereInput[]
    NOT?: SectionScalarWhereInput | SectionScalarWhereInput[]
    id?: StringFilter<"Section"> | string
    title?: StringFilter<"Section"> | string
    description?: StringNullableFilter<"Section"> | string | null
    testId?: StringFilter<"Section"> | string
    order?: IntFilter<"Section"> | number
    timeLimit?: IntNullableFilter<"Section"> | number | null
  }

  export type SubmissionUpsertWithWhereUniqueWithoutTestInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutTestInput, SubmissionUncheckedUpdateWithoutTestInput>
    create: XOR<SubmissionCreateWithoutTestInput, SubmissionUncheckedCreateWithoutTestInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutTestInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutTestInput, SubmissionUncheckedUpdateWithoutTestInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutTestInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutTestInput>
  }

  export type TestCreateWithoutSectionsInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class?: ClassCreateNestedOneWithoutTestsInput
    author: UserCreateNestedOneWithoutTestsCreatedInput
    submissions?: SubmissionCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateWithoutSectionsInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutSectionsInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutSectionsInput, TestUncheckedCreateWithoutSectionsInput>
  }

  export type QuestionCreateWithoutSectionInput = {
    id?: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
  }

  export type QuestionUncheckedCreateWithoutSectionInput = {
    id?: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
  }

  export type QuestionCreateOrConnectWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput>
  }

  export type QuestionCreateManySectionInputEnvelope = {
    data: QuestionCreateManySectionInput | QuestionCreateManySectionInput[]
  }

  export type TestUpsertWithoutSectionsInput = {
    update: XOR<TestUpdateWithoutSectionsInput, TestUncheckedUpdateWithoutSectionsInput>
    create: XOR<TestCreateWithoutSectionsInput, TestUncheckedCreateWithoutSectionsInput>
    where?: TestWhereInput
  }

  export type TestUpdateToOneWithWhereWithoutSectionsInput = {
    where?: TestWhereInput
    data: XOR<TestUpdateWithoutSectionsInput, TestUncheckedUpdateWithoutSectionsInput>
  }

  export type TestUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutTestsNestedInput
    author?: UserUpdateOneRequiredWithoutTestsCreatedNestedInput
    submissions?: SubmissionUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type QuestionUpsertWithWhereUniqueWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSectionInput, QuestionUncheckedUpdateWithoutSectionInput>
    create: XOR<QuestionCreateWithoutSectionInput, QuestionUncheckedCreateWithoutSectionInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSectionInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSectionInput, QuestionUncheckedUpdateWithoutSectionInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSectionInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSectionInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    sectionId?: StringFilter<"Question"> | string
    type?: EnumQuestionTypeFilter<"Question"> | $Enums.QuestionType
    text?: StringFilter<"Question"> | string
    imageUrl?: StringNullableFilter<"Question"> | string | null
    options?: StringFilter<"Question"> | string
    correctAnswers?: StringFilter<"Question"> | string
    explanation?: StringNullableFilter<"Question"> | string | null
    marks?: IntFilter<"Question"> | number
    negativeMarks?: IntFilter<"Question"> | number
    difficulty?: StringFilter<"Question"> | string
    order?: IntFilter<"Question"> | number
    tags?: StringFilter<"Question"> | string
  }

  export type SectionCreateWithoutQuestionsInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    timeLimit?: number | null
    test: TestCreateNestedOneWithoutSectionsInput
  }

  export type SectionUncheckedCreateWithoutQuestionsInput = {
    id?: string
    title: string
    description?: string | null
    testId: string
    order: number
    timeLimit?: number | null
  }

  export type SectionCreateOrConnectWithoutQuestionsInput = {
    where: SectionWhereUniqueInput
    create: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
  }

  export type SectionUpsertWithoutQuestionsInput = {
    update: XOR<SectionUpdateWithoutQuestionsInput, SectionUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SectionCreateWithoutQuestionsInput, SectionUncheckedCreateWithoutQuestionsInput>
    where?: SectionWhereInput
  }

  export type SectionUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SectionWhereInput
    data: XOR<SectionUpdateWithoutQuestionsInput, SectionUncheckedUpdateWithoutQuestionsInput>
  }

  export type SectionUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    test?: TestUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type SectionUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    testId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TestCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    class?: ClassCreateNestedOneWithoutTestsInput
    author: UserCreateNestedOneWithoutTestsCreatedInput
    sections?: SectionCreateNestedManyWithoutTestInput
  }

  export type TestUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: SectionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutSubmissionsInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutSubmissionsInput, TestUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutSubmissionsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
  }

  export type TestUpsertWithoutSubmissionsInput = {
    update: XOR<TestUpdateWithoutSubmissionsInput, TestUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<TestCreateWithoutSubmissionsInput, TestUncheckedCreateWithoutSubmissionsInput>
    where?: TestWhereInput
  }

  export type TestUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: TestWhereInput
    data: XOR<TestUpdateWithoutSubmissionsInput, TestUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TestUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutTestsNestedInput
    author?: UserUpdateOneRequiredWithoutTestsCreatedNestedInput
    sections?: SectionUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type UserUpsertWithoutSubmissionsInput = {
    update: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutScheduledClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutScheduledClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutScheduledClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScheduledClassesInput, UserUncheckedCreateWithoutScheduledClassesInput>
  }

  export type UserCreateWithoutCreatedClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedClassesInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
  }

  export type AttendanceCreateWithoutClassScheduleInput = {
    id?: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutStudentAttendanceInput
    teacher: UserCreateNestedOneWithoutTeacherAttendanceInput
  }

  export type AttendanceUncheckedCreateWithoutClassScheduleInput = {
    id?: string
    studentId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateOrConnectWithoutClassScheduleInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput>
  }

  export type AttendanceCreateManyClassScheduleInputEnvelope = {
    data: AttendanceCreateManyClassScheduleInput | AttendanceCreateManyClassScheduleInput[]
  }

  export type UserUpsertWithoutScheduledClassesInput = {
    update: XOR<UserUpdateWithoutScheduledClassesInput, UserUncheckedUpdateWithoutScheduledClassesInput>
    create: XOR<UserCreateWithoutScheduledClassesInput, UserUncheckedCreateWithoutScheduledClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScheduledClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScheduledClassesInput, UserUncheckedUpdateWithoutScheduledClassesInput>
  }

  export type UserUpdateWithoutScheduledClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutScheduledClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserUpsertWithoutCreatedClassesInput = {
    update: XOR<UserUpdateWithoutCreatedClassesInput, UserUncheckedUpdateWithoutCreatedClassesInput>
    create: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedClassesInput, UserUncheckedUpdateWithoutCreatedClassesInput>
  }

  export type UserUpdateWithoutCreatedClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AttendanceUpsertWithWhereUniqueWithoutClassScheduleInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutClassScheduleInput, AttendanceUncheckedUpdateWithoutClassScheduleInput>
    create: XOR<AttendanceCreateWithoutClassScheduleInput, AttendanceUncheckedCreateWithoutClassScheduleInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutClassScheduleInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutClassScheduleInput, AttendanceUncheckedUpdateWithoutClassScheduleInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutClassScheduleInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutClassScheduleInput>
  }

  export type SpecialEventCreateWithoutBatchesInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: EventParticipantCreateNestedManyWithoutEventInput
  }

  export type SpecialEventUncheckedCreateWithoutBatchesInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: EventParticipantUncheckedCreateNestedManyWithoutEventInput
  }

  export type SpecialEventCreateOrConnectWithoutBatchesInput = {
    where: SpecialEventWhereUniqueInput
    create: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput>
  }

  export type UserCreateWithoutBatchesTeachingInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutBatchesTeachingInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutBatchesTeachingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput>
  }

  export type SpecialEventUpsertWithWhereUniqueWithoutBatchesInput = {
    where: SpecialEventWhereUniqueInput
    update: XOR<SpecialEventUpdateWithoutBatchesInput, SpecialEventUncheckedUpdateWithoutBatchesInput>
    create: XOR<SpecialEventCreateWithoutBatchesInput, SpecialEventUncheckedCreateWithoutBatchesInput>
  }

  export type SpecialEventUpdateWithWhereUniqueWithoutBatchesInput = {
    where: SpecialEventWhereUniqueInput
    data: XOR<SpecialEventUpdateWithoutBatchesInput, SpecialEventUncheckedUpdateWithoutBatchesInput>
  }

  export type SpecialEventUpdateManyWithWhereWithoutBatchesInput = {
    where: SpecialEventScalarWhereInput
    data: XOR<SpecialEventUpdateManyMutationInput, SpecialEventUncheckedUpdateManyWithoutBatchesInput>
  }

  export type SpecialEventScalarWhereInput = {
    AND?: SpecialEventScalarWhereInput | SpecialEventScalarWhereInput[]
    OR?: SpecialEventScalarWhereInput[]
    NOT?: SpecialEventScalarWhereInput | SpecialEventScalarWhereInput[]
    id?: StringFilter<"SpecialEvent"> | string
    title?: StringFilter<"SpecialEvent"> | string
    description?: StringNullableFilter<"SpecialEvent"> | string | null
    type?: EnumEventTypeFilter<"SpecialEvent"> | $Enums.EventType
    scheduledAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    duration?: IntFilter<"SpecialEvent"> | number
    location?: StringNullableFilter<"SpecialEvent"> | string | null
    status?: StringFilter<"SpecialEvent"> | string
    maxParticipants?: IntNullableFilter<"SpecialEvent"> | number | null
    isRecurring?: BoolFilter<"SpecialEvent"> | boolean
    recurringPattern?: StringNullableFilter<"SpecialEvent"> | string | null
    createdAt?: DateTimeFilter<"SpecialEvent"> | Date | string
    updatedAt?: DateTimeFilter<"SpecialEvent"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutBatchesTeachingInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBatchesTeachingInput, UserUncheckedUpdateWithoutBatchesTeachingInput>
    create: XOR<UserCreateWithoutBatchesTeachingInput, UserUncheckedCreateWithoutBatchesTeachingInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBatchesTeachingInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBatchesTeachingInput, UserUncheckedUpdateWithoutBatchesTeachingInput>
  }

  export type UserUpdateManyWithWhereWithoutBatchesTeachingInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBatchesTeachingInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    uid?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    batchType?: EnumBatchTypeNullableFilter<"User"> | $Enums.BatchType | null
    subjects?: StringNullableFilter<"User"> | string | null
    roomNumber?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type BatchCreateWithoutEventsInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teachersAssigned?: UserCreateNestedManyWithoutBatchesTeachingInput
  }

  export type BatchUncheckedCreateWithoutEventsInput = {
    id?: string
    type: $Enums.BatchType
    name: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teachersAssigned?: UserUncheckedCreateNestedManyWithoutBatchesTeachingInput
  }

  export type BatchCreateOrConnectWithoutEventsInput = {
    where: BatchWhereUniqueInput
    create: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput>
  }

  export type EventParticipantCreateWithoutEventInput = {
    id?: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEventParticipationsInput
  }

  export type EventParticipantUncheckedCreateWithoutEventInput = {
    id?: string
    userUid: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type EventParticipantCreateOrConnectWithoutEventInput = {
    where: EventParticipantWhereUniqueInput
    create: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput>
  }

  export type EventParticipantCreateManyEventInputEnvelope = {
    data: EventParticipantCreateManyEventInput | EventParticipantCreateManyEventInput[]
  }

  export type BatchUpsertWithWhereUniqueWithoutEventsInput = {
    where: BatchWhereUniqueInput
    update: XOR<BatchUpdateWithoutEventsInput, BatchUncheckedUpdateWithoutEventsInput>
    create: XOR<BatchCreateWithoutEventsInput, BatchUncheckedCreateWithoutEventsInput>
  }

  export type BatchUpdateWithWhereUniqueWithoutEventsInput = {
    where: BatchWhereUniqueInput
    data: XOR<BatchUpdateWithoutEventsInput, BatchUncheckedUpdateWithoutEventsInput>
  }

  export type BatchUpdateManyWithWhereWithoutEventsInput = {
    where: BatchScalarWhereInput
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyWithoutEventsInput>
  }

  export type EventParticipantUpsertWithWhereUniqueWithoutEventInput = {
    where: EventParticipantWhereUniqueInput
    update: XOR<EventParticipantUpdateWithoutEventInput, EventParticipantUncheckedUpdateWithoutEventInput>
    create: XOR<EventParticipantCreateWithoutEventInput, EventParticipantUncheckedCreateWithoutEventInput>
  }

  export type EventParticipantUpdateWithWhereUniqueWithoutEventInput = {
    where: EventParticipantWhereUniqueInput
    data: XOR<EventParticipantUpdateWithoutEventInput, EventParticipantUncheckedUpdateWithoutEventInput>
  }

  export type EventParticipantUpdateManyWithWhereWithoutEventInput = {
    where: EventParticipantScalarWhereInput
    data: XOR<EventParticipantUpdateManyMutationInput, EventParticipantUncheckedUpdateManyWithoutEventInput>
  }

  export type SpecialEventCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: BatchCreateNestedManyWithoutEventsInput
  }

  export type SpecialEventUncheckedCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.EventType
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    status?: string
    maxParticipants?: number | null
    isRecurring?: boolean
    recurringPattern?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: BatchUncheckedCreateNestedManyWithoutEventsInput
  }

  export type SpecialEventCreateOrConnectWithoutParticipantsInput = {
    where: SpecialEventWhereUniqueInput
    create: XOR<SpecialEventCreateWithoutParticipantsInput, SpecialEventUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutEventParticipationsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutEventParticipationsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutEventParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventParticipationsInput, UserUncheckedCreateWithoutEventParticipationsInput>
  }

  export type SpecialEventUpsertWithoutParticipantsInput = {
    update: XOR<SpecialEventUpdateWithoutParticipantsInput, SpecialEventUncheckedUpdateWithoutParticipantsInput>
    create: XOR<SpecialEventCreateWithoutParticipantsInput, SpecialEventUncheckedCreateWithoutParticipantsInput>
    where?: SpecialEventWhereInput
  }

  export type SpecialEventUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: SpecialEventWhereInput
    data: XOR<SpecialEventUpdateWithoutParticipantsInput, SpecialEventUncheckedUpdateWithoutParticipantsInput>
  }

  export type SpecialEventUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: BatchUpdateManyWithoutEventsNestedInput
  }

  export type SpecialEventUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: BatchUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type UserUpsertWithoutEventParticipationsInput = {
    update: XOR<UserUpdateWithoutEventParticipationsInput, UserUncheckedUpdateWithoutEventParticipationsInput>
    create: XOR<UserCreateWithoutEventParticipationsInput, UserUncheckedCreateWithoutEventParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventParticipationsInput, UserUncheckedUpdateWithoutEventParticipationsInput>
  }

  export type UserUpdateWithoutEventParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutEventParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassScheduleCreateWithoutAttendanceInput = {
    id?: string
    subject: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutScheduledClassesInput
    creator: UserCreateNestedOneWithoutCreatedClassesInput
  }

  export type ClassScheduleUncheckedCreateWithoutAttendanceInput = {
    id?: string
    subject: string
    teacherId: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassScheduleCreateOrConnectWithoutAttendanceInput = {
    where: ClassScheduleWhereUniqueInput
    create: XOR<ClassScheduleCreateWithoutAttendanceInput, ClassScheduleUncheckedCreateWithoutAttendanceInput>
  }

  export type UserCreateWithoutStudentAttendanceInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutStudentAttendanceInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutStudentAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentAttendanceInput, UserUncheckedCreateWithoutStudentAttendanceInput>
  }

  export type UserCreateWithoutTeacherAttendanceInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutTeacherAttendanceInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutTeacherAttendanceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherAttendanceInput, UserUncheckedCreateWithoutTeacherAttendanceInput>
  }

  export type ClassScheduleUpsertWithoutAttendanceInput = {
    update: XOR<ClassScheduleUpdateWithoutAttendanceInput, ClassScheduleUncheckedUpdateWithoutAttendanceInput>
    create: XOR<ClassScheduleCreateWithoutAttendanceInput, ClassScheduleUncheckedCreateWithoutAttendanceInput>
    where?: ClassScheduleWhereInput
  }

  export type ClassScheduleUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: ClassScheduleWhereInput
    data: XOR<ClassScheduleUpdateWithoutAttendanceInput, ClassScheduleUncheckedUpdateWithoutAttendanceInput>
  }

  export type ClassScheduleUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutScheduledClassesNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
  }

  export type ClassScheduleUncheckedUpdateWithoutAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutStudentAttendanceInput = {
    update: XOR<UserUpdateWithoutStudentAttendanceInput, UserUncheckedUpdateWithoutStudentAttendanceInput>
    create: XOR<UserCreateWithoutStudentAttendanceInput, UserUncheckedCreateWithoutStudentAttendanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentAttendanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentAttendanceInput, UserUncheckedUpdateWithoutStudentAttendanceInput>
  }

  export type UserUpdateWithoutStudentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserUpsertWithoutTeacherAttendanceInput = {
    update: XOR<UserUpdateWithoutTeacherAttendanceInput, UserUncheckedUpdateWithoutTeacherAttendanceInput>
    create: XOR<UserCreateWithoutTeacherAttendanceInput, UserUncheckedCreateWithoutTeacherAttendanceInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeacherAttendanceInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeacherAttendanceInput, UserUncheckedUpdateWithoutTeacherAttendanceInput>
  }

  export type UserUpdateWithoutTeacherAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherAttendanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutHomeworkAssignedInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkSubmissions?: HomeworkSubmissionCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutHomeworkAssignedInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutHomeworkAssignedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHomeworkAssignedInput, UserUncheckedCreateWithoutHomeworkAssignedInput>
  }

  export type HomeworkSubmissionCreateWithoutHomeworkInput = {
    id?: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutHomeworkSubmissionsInput
  }

  export type HomeworkSubmissionUncheckedCreateWithoutHomeworkInput = {
    id?: string
    studentId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionCreateOrConnectWithoutHomeworkInput = {
    where: HomeworkSubmissionWhereUniqueInput
    create: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput>
  }

  export type HomeworkSubmissionCreateManyHomeworkInputEnvelope = {
    data: HomeworkSubmissionCreateManyHomeworkInput | HomeworkSubmissionCreateManyHomeworkInput[]
  }

  export type UserUpsertWithoutHomeworkAssignedInput = {
    update: XOR<UserUpdateWithoutHomeworkAssignedInput, UserUncheckedUpdateWithoutHomeworkAssignedInput>
    create: XOR<UserCreateWithoutHomeworkAssignedInput, UserUncheckedCreateWithoutHomeworkAssignedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHomeworkAssignedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHomeworkAssignedInput, UserUncheckedUpdateWithoutHomeworkAssignedInput>
  }

  export type UserUpdateWithoutHomeworkAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutHomeworkAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type HomeworkSubmissionUpsertWithWhereUniqueWithoutHomeworkInput = {
    where: HomeworkSubmissionWhereUniqueInput
    update: XOR<HomeworkSubmissionUpdateWithoutHomeworkInput, HomeworkSubmissionUncheckedUpdateWithoutHomeworkInput>
    create: XOR<HomeworkSubmissionCreateWithoutHomeworkInput, HomeworkSubmissionUncheckedCreateWithoutHomeworkInput>
  }

  export type HomeworkSubmissionUpdateWithWhereUniqueWithoutHomeworkInput = {
    where: HomeworkSubmissionWhereUniqueInput
    data: XOR<HomeworkSubmissionUpdateWithoutHomeworkInput, HomeworkSubmissionUncheckedUpdateWithoutHomeworkInput>
  }

  export type HomeworkSubmissionUpdateManyWithWhereWithoutHomeworkInput = {
    where: HomeworkSubmissionScalarWhereInput
    data: XOR<HomeworkSubmissionUpdateManyMutationInput, HomeworkSubmissionUncheckedUpdateManyWithoutHomeworkInput>
  }

  export type HomeworkCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: UserCreateNestedOneWithoutHomeworkAssignedInput
  }

  export type HomeworkUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCreateOrConnectWithoutSubmissionsInput = {
    where: HomeworkWhereUniqueInput
    create: XOR<HomeworkCreateWithoutSubmissionsInput, HomeworkUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutHomeworkSubmissionsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtCreateNestedManyWithoutStudentInput
    appointments?: AppointmentCreateNestedManyWithoutTeacherInput
    testsCreated?: TestCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    classes?: ClassStudentCreateNestedManyWithoutStudentInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkCreateNestedManyWithoutTeacherInput
  }

  export type UserUncheckedCreateWithoutHomeworkSubmissionsInput = {
    id?: string
    uid: string
    password: string
    fullName: string
    role: $Enums.Role
    batchType?: $Enums.BatchType | null
    subjects?: string | null
    roomNumber?: string | null
    avatar?: string | null
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doubts?: DoubtUncheckedCreateNestedManyWithoutStudentInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTeacherInput
    testsCreated?: TestUncheckedCreateNestedManyWithoutAuthorInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    classes?: ClassStudentUncheckedCreateNestedManyWithoutStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    scheduledClasses?: ClassScheduleUncheckedCreateNestedManyWithoutTeacherInput
    createdClasses?: ClassScheduleUncheckedCreateNestedManyWithoutCreatorInput
    studentAttendance?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    teacherAttendance?: AttendanceUncheckedCreateNestedManyWithoutTeacherInput
    eventParticipations?: EventParticipantUncheckedCreateNestedManyWithoutUserInput
    batchesTeaching?: BatchUncheckedCreateNestedManyWithoutTeachersAssignedInput
    homeworkAssigned?: HomeworkUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type UserCreateOrConnectWithoutHomeworkSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHomeworkSubmissionsInput, UserUncheckedCreateWithoutHomeworkSubmissionsInput>
  }

  export type HomeworkUpsertWithoutSubmissionsInput = {
    update: XOR<HomeworkUpdateWithoutSubmissionsInput, HomeworkUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<HomeworkCreateWithoutSubmissionsInput, HomeworkUncheckedCreateWithoutSubmissionsInput>
    where?: HomeworkWhereInput
  }

  export type HomeworkUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: HomeworkWhereInput
    data: XOR<HomeworkUpdateWithoutSubmissionsInput, HomeworkUncheckedUpdateWithoutSubmissionsInput>
  }

  export type HomeworkUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutHomeworkAssignedNestedInput
  }

  export type HomeworkUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutHomeworkSubmissionsInput = {
    update: XOR<UserUpdateWithoutHomeworkSubmissionsInput, UserUncheckedUpdateWithoutHomeworkSubmissionsInput>
    create: XOR<UserCreateWithoutHomeworkSubmissionsInput, UserUncheckedCreateWithoutHomeworkSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHomeworkSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHomeworkSubmissionsInput, UserUncheckedUpdateWithoutHomeworkSubmissionsInput>
  }

  export type UserUpdateWithoutHomeworkSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
  }

  export type UserUncheckedUpdateWithoutHomeworkSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    batchesTeaching?: BatchUncheckedUpdateManyWithoutTeachersAssignedNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type DoubtCreateManyStudentInput = {
    id?: string
    subject: string
    description: string
    imageUrl?: string | null
    priority?: string
    status?: $Enums.DoubtStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyTeacherInput = {
    id?: string
    doubtId: string
    scheduledAt: Date | string
    duration?: number
    notes?: string | null
    meetingLink?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCreateManyAuthorInput = {
    id?: string
    title: string
    description?: string | null
    classId?: string | null
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateManyStudentInput = {
    id?: string
    testId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClassStudentCreateManyStudentInput = {
    id?: string
    classId: string
    joinedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: string
    isRead?: boolean
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type ClassScheduleCreateManyTeacherInput = {
    id?: string
    subject: string
    creatorId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassScheduleCreateManyCreatorInput = {
    id?: string
    subject: string
    teacherId: string
    batchType: $Enums.BatchType
    roomNumber: string
    date: Date | string
    startTime: string
    endTime: string
    topic?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateManyStudentInput = {
    id?: string
    classScheduleId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceCreateManyTeacherInput = {
    id?: string
    classScheduleId: string
    studentId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventParticipantCreateManyUserInput = {
    id?: string
    eventId: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type HomeworkCreateManyTeacherInput = {
    id?: string
    title: string
    description: string
    instructions?: string | null
    subject: string
    batchType: $Enums.BatchType
    imageUrl?: string | null
    dueDate: Date | string
    totalMarks?: number
    status?: $Enums.HomeworkStatus
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionCreateManyStudentInput = {
    id?: string
    homeworkId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoubtUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUpdateOneWithoutDoubtNestedInput
  }

  export type DoubtUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointment?: AppointmentUncheckedUpdateOneWithoutDoubtNestedInput
  }

  export type DoubtUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: StringFieldUpdateOperationsInput | string
    status?: EnumDoubtStatusFieldUpdateOperationsInput | $Enums.DoubtStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubt?: DoubtUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    doubtId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    doubtId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    meetingLink?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutTestsNestedInput
    sections?: SectionUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    classId?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: TestUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    testId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type ClassStudentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassScheduleUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
    attendance?: AttendanceUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: AttendanceUncheckedUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassScheduleUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: UserUpdateOneRequiredWithoutScheduledClassesNestedInput
    attendance?: AttendanceUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: AttendanceUncheckedUpdateManyWithoutClassScheduleNestedInput
  }

  export type ClassScheduleUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    roomNumber?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classSchedule?: ClassScheduleUpdateOneRequiredWithoutAttendanceNestedInput
    teacher?: UserUpdateOneRequiredWithoutTeacherAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classSchedule?: ClassScheduleUpdateOneRequiredWithoutAttendanceNestedInput
    student?: UserUpdateOneRequiredWithoutStudentAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    classScheduleId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: SpecialEventUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type EventParticipantUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BatchUpdateWithoutTeachersAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: SpecialEventUpdateManyWithoutBatchesNestedInput
  }

  export type BatchUncheckedUpdateWithoutTeachersAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: SpecialEventUncheckedUpdateManyWithoutBatchesNestedInput
  }

  export type BatchUncheckedUpdateManyWithoutTeachersAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: HomeworkSubmissionUpdateManyWithoutHomeworkNestedInput
  }

  export type HomeworkUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: HomeworkSubmissionUncheckedUpdateManyWithoutHomeworkNestedInput
  }

  export type HomeworkUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    subject?: StringFieldUpdateOperationsInput | string
    batchType?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalMarks?: IntFieldUpdateOperationsInput | number
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homework?: HomeworkUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type HomeworkSubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeworkId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    homeworkId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentCreateManyClassInput = {
    id?: string
    studentId: string
    joinedAt?: Date | string
  }

  export type TestCreateManyClassInput = {
    id?: string
    title: string
    description?: string | null
    authorId: string
    duration?: number
    totalMarks?: number
    passingMarks?: number
    instructions?: string | null
    status?: $Enums.TestStatus
    scheduledAt?: Date | string | null
    endsAt?: Date | string | null
    allowReview?: boolean
    shuffleQuestions?: boolean
    showResults?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassStudentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassStudentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassStudentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutTestsCreatedNestedInput
    sections?: SectionUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: SectionUncheckedUpdateManyWithoutTestNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    passingMarks?: IntFieldUpdateOperationsInput | number
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    scheduledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allowReview?: BoolFieldUpdateOperationsInput | boolean
    shuffleQuestions?: BoolFieldUpdateOperationsInput | boolean
    showResults?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SectionCreateManyTestInput = {
    id?: string
    title: string
    description?: string | null
    order: number
    timeLimit?: number | null
  }

  export type SubmissionCreateManyTestInput = {
    id?: string
    studentId: string
    answers: JsonNullValueInput | InputJsonValue
    score?: number
    totalMarks?: number
    percentage?: number
    timeTaken?: number
    isCompleted?: boolean
    startedAt?: Date | string
    submittedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SectionUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: QuestionUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: QuestionUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type SectionUncheckedUpdateManyWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    timeLimit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubmissionUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    answers?: JsonNullValueInput | InputJsonValue
    score?: IntFieldUpdateOperationsInput | number
    totalMarks?: IntFieldUpdateOperationsInput | number
    percentage?: FloatFieldUpdateOperationsInput | number
    timeTaken?: IntFieldUpdateOperationsInput | number
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManySectionInput = {
    id?: string
    type: $Enums.QuestionType
    text: string
    imageUrl?: string | null
    options: string
    correctAnswers: string
    explanation?: string | null
    marks: number
    negativeMarks?: number
    difficulty?: string
    order: number
    tags: string
  }

  export type QuestionUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    text?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    options?: StringFieldUpdateOperationsInput | string
    correctAnswers?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    marks?: IntFieldUpdateOperationsInput | number
    negativeMarks?: IntFieldUpdateOperationsInput | number
    difficulty?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    tags?: StringFieldUpdateOperationsInput | string
  }

  export type AttendanceCreateManyClassScheduleInput = {
    id?: string
    studentId: string
    teacherId: string
    status: string
    markedAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AttendanceUpdateWithoutClassScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutStudentAttendanceNestedInput
    teacher?: UserUpdateOneRequiredWithoutTeacherAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateWithoutClassScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceUncheckedUpdateManyWithoutClassScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    markedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SpecialEventUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: EventParticipantUpdateManyWithoutEventNestedInput
  }

  export type SpecialEventUncheckedUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: EventParticipantUncheckedUpdateManyWithoutEventNestedInput
  }

  export type SpecialEventUncheckedUpdateManyWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    maxParticipants?: NullableIntFieldUpdateOperationsInput | number | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    recurringPattern?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutBatchesTeachingInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUpdateManyWithoutUserNestedInput
    homeworkAssigned?: HomeworkUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutBatchesTeachingInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doubts?: DoubtUncheckedUpdateManyWithoutStudentNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTeacherNestedInput
    testsCreated?: TestUncheckedUpdateManyWithoutAuthorNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    classes?: ClassStudentUncheckedUpdateManyWithoutStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    scheduledClasses?: ClassScheduleUncheckedUpdateManyWithoutTeacherNestedInput
    createdClasses?: ClassScheduleUncheckedUpdateManyWithoutCreatorNestedInput
    studentAttendance?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    teacherAttendance?: AttendanceUncheckedUpdateManyWithoutTeacherNestedInput
    eventParticipations?: EventParticipantUncheckedUpdateManyWithoutUserNestedInput
    homeworkAssigned?: HomeworkUncheckedUpdateManyWithoutTeacherNestedInput
    homeworkSubmissions?: HomeworkSubmissionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBatchesTeachingInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    batchType?: NullableEnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType | null
    subjects?: NullableStringFieldUpdateOperationsInput | string | null
    roomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantCreateManyEventInput = {
    id?: string
    userUid: string
    status?: string
    respondedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type BatchUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachersAssigned?: UserUpdateManyWithoutBatchesTeachingNestedInput
  }

  export type BatchUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachersAssigned?: UserUncheckedUpdateManyWithoutBatchesTeachingNestedInput
  }

  export type BatchUncheckedUpdateManyWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumBatchTypeFieldUpdateOperationsInput | $Enums.BatchType
    name?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEventParticipationsNestedInput
  }

  export type EventParticipantUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventParticipantUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    userUid?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    respondedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionCreateManyHomeworkInput = {
    id?: string
    studentId: string
    submissionType: $Enums.SubmissionType
    textContent?: string | null
    imageUrl?: string | null
    documentUrl?: string | null
    unableReason?: string | null
    status?: $Enums.HomeworkStatus
    marksObtained?: number | null
    teacherRemarks?: string | null
    grade?: string | null
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkSubmissionUpdateWithoutHomeworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutHomeworkSubmissionsNestedInput
  }

  export type HomeworkSubmissionUncheckedUpdateWithoutHomeworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkSubmissionUncheckedUpdateManyWithoutHomeworkInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submissionType?: EnumSubmissionTypeFieldUpdateOperationsInput | $Enums.SubmissionType
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    unableReason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumHomeworkStatusFieldUpdateOperationsInput | $Enums.HomeworkStatus
    marksObtained?: NullableIntFieldUpdateOperationsInput | number | null
    teacherRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}