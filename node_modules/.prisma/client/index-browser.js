
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uid: 'uid',
  password: 'password',
  fullName: 'fullName',
  role: 'role',
  batchType: 'batchType',
  subjects: 'subjects',
  roomNumber: 'roomNumber',
  avatar: 'avatar',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  grade: 'grade',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassStudentScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  studentId: 'studentId',
  joinedAt: 'joinedAt'
};

exports.Prisma.DoubtScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subject: 'subject',
  description: 'description',
  imageUrl: 'imageUrl',
  priority: 'priority',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  doubtId: 'doubtId',
  teacherId: 'teacherId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  notes: 'notes',
  meetingLink: 'meetingLink',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  classId: 'classId',
  authorId: 'authorId',
  duration: 'duration',
  totalMarks: 'totalMarks',
  passingMarks: 'passingMarks',
  instructions: 'instructions',
  status: 'status',
  scheduledAt: 'scheduledAt',
  endsAt: 'endsAt',
  allowReview: 'allowReview',
  shuffleQuestions: 'shuffleQuestions',
  showResults: 'showResults',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  testId: 'testId',
  order: 'order',
  timeLimit: 'timeLimit'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  sectionId: 'sectionId',
  type: 'type',
  text: 'text',
  imageUrl: 'imageUrl',
  options: 'options',
  correctAnswers: 'correctAnswers',
  explanation: 'explanation',
  marks: 'marks',
  negativeMarks: 'negativeMarks',
  difficulty: 'difficulty',
  order: 'order',
  tags: 'tags'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  studentId: 'studentId',
  answers: 'answers',
  score: 'score',
  totalMarks: 'totalMarks',
  percentage: 'percentage',
  timeTaken: 'timeTaken',
  isCompleted: 'isCompleted',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ClassScheduleScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  teacherId: 'teacherId',
  creatorId: 'creatorId',
  batchType: 'batchType',
  roomNumber: 'roomNumber',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  topic: 'topic',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecialEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  location: 'location',
  status: 'status',
  maxParticipants: 'maxParticipants',
  isRecurring: 'isRecurring',
  recurringPattern: 'recurringPattern',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventParticipantScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userUid: 'userUid',
  status: 'status',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  classScheduleId: 'classScheduleId',
  studentId: 'studentId',
  teacherId: 'teacherId',
  status: 'status',
  markedAt: 'markedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SampleQuestionScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  class: 'class',
  type: 'type',
  text: 'text',
  imageUrl: 'imageUrl',
  options: 'options',
  correctAnswers: 'correctAnswers',
  explanation: 'explanation',
  difficulty: 'difficulty',
  tags: 'tags',
  createdAt: 'createdAt'
};

exports.Prisma.HomeworkScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  subject: 'subject',
  teacherId: 'teacherId',
  batchType: 'batchType',
  imageUrl: 'imageUrl',
  dueDate: 'dueDate',
  totalMarks: 'totalMarks',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HomeworkSubmissionScalarFieldEnum = {
  id: 'id',
  homeworkId: 'homeworkId',
  studentId: 'studentId',
  submissionType: 'submissionType',
  textContent: 'textContent',
  imageUrl: 'imageUrl',
  documentUrl: 'documentUrl',
  unableReason: 'unableReason',
  status: 'status',
  marksObtained: 'marksObtained',
  teacherRemarks: 'teacherRemarks',
  grade: 'grade',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Role = exports.$Enums.Role = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  HEAD_TEACHER: 'HEAD_TEACHER'
};

exports.BatchType = exports.$Enums.BatchType = {
  IN_CLASS_7: 'IN_CLASS_7',
  IN_CLASS_8: 'IN_CLASS_8',
  IN_CLASS_9: 'IN_CLASS_9',
  IN_CLASS_10: 'IN_CLASS_10',
  NEET_11: 'NEET_11',
  NEET_12: 'NEET_12',
  PCM_11: 'PCM_11',
  PCM_12: 'PCM_12'
};

exports.DoubtStatus = exports.$Enums.DoubtStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CANCELLED: 'CANCELLED'
};

exports.TestStatus = exports.$Enums.TestStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MCQ: 'MCQ',
  SHORT_ANSWER: 'SHORT_ANSWER',
  INTEGER: 'INTEGER'
};

exports.EventType = exports.$Enums.EventType = {
  PTM: 'PTM',
  DOUBT_CLASS: 'DOUBT_CLASS',
  SPECIAL_CLASS: 'SPECIAL_CLASS',
  WORKSHOP: 'WORKSHOP',
  EXAM: 'EXAM',
  ANNOUNCEMENT: 'ANNOUNCEMENT'
};

exports.HomeworkStatus = exports.$Enums.HomeworkStatus = {
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED: 'SUBMITTED',
  REVIEWED: 'REVIEWED',
  OVERDUE: 'OVERDUE'
};

exports.SubmissionType = exports.$Enums.SubmissionType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  UNABLE_TO_COMPLETE: 'UNABLE_TO_COMPLETE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Class: 'Class',
  ClassStudent: 'ClassStudent',
  Doubt: 'Doubt',
  Appointment: 'Appointment',
  Test: 'Test',
  Section: 'Section',
  Question: 'Question',
  Submission: 'Submission',
  Notification: 'Notification',
  ClassSchedule: 'ClassSchedule',
  Batch: 'Batch',
  SpecialEvent: 'SpecialEvent',
  EventParticipant: 'EventParticipant',
  Attendance: 'Attendance',
  SampleQuestion: 'SampleQuestion',
  Homework: 'Homework',
  HomeworkSubmission: 'HomeworkSubmission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
