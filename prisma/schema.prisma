generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  HEAD_TEACHER
}

enum BatchType {
  IN_CLASS_7
  IN_CLASS_8
  IN_CLASS_9
  IN_CLASS_10
  NEET_11
  NEET_12
  PCM_11
  PCM_12
}

enum DoubtStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum TestStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ACTIVE
  COMPLETED
  ARCHIVED
}

model User {
  id        String   @id @default(cuid())
  uid       String   @unique  // Unique ID for login (replaces email)
  password  String
  fullName  String
  role      Role
  batchType BatchType?
  subjects  String? // For teachers - subjects they teach (JSON string)
  roomNumber String?  // For teachers
  avatar    String?
  phone     String?
  address   String?
  dateOfBirth DateTime?
  isActive  Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  doubts    Doubt[]
  appointments Appointment[] @relation("AppointmentTeacher")
  testsCreated  Test[] @relation("TestAuthor")
  submissions Submission[]
  classes   ClassStudent[]
  notifications Notification[]
  scheduledClasses ClassSchedule[] @relation("ClassTeacher")
  createdClasses ClassSchedule[] @relation("ClassCreator")
  studentAttendance Attendance[] @relation("StudentAttendance")
  teacherAttendance Attendance[] @relation("TeacherAttendance")
  eventParticipations EventParticipant[]
  batchesTeaching Batch[] @relation("TeacherBatches")
  homeworkAssigned Homework[] @relation("HomeworkTeacher")
  homeworkSubmissions HomeworkSubmission[]
}

model Class {
  id        String   @id @default(cuid())
  name      String
  description String?
  subject   String
  grade     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  students  ClassStudent[]
  tests     Test[]
}

model ClassStudent {
  id        String   @id @default(cuid())
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  joinedAt  DateTime @default(now())
  
  @@unique([classId, studentId])
}

model Doubt {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  subject   String
  description String
  imageUrl  String?
  priority  String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  status    DoubtStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  appointment Appointment?
}

model Appointment {
  id        String   @id @default(cuid())
  doubt     Doubt    @relation(fields: [doubtId], references: [id])
  doubtId   String   @unique
  teacher   User     @relation("AppointmentTeacher", fields: [teacherId], references: [id])
  teacherId String
  scheduledAt DateTime
  duration  Int      @default(30) // minutes
  notes     String?
  meetingLink String?
  status    String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id        String   @id @default(cuid())
  title     String
  description String?
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  author    User     @relation("TestAuthor", fields: [authorId], references: [id])
  authorId  String
  duration  Int      @default(180) // minutes
  totalMarks Int     @default(0)
  passingMarks Int   @default(0)
  instructions String?
  status    TestStatus @default(DRAFT)
  scheduledAt DateTime?
  endsAt    DateTime?
  allowReview Boolean @default(true)
  shuffleQuestions Boolean @default(false)
  showResults Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sections  Section[]
  submissions Submission[]
}

model Section {
  id       String   @id @default(cuid())
  title    String
  description String?
  test     Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId   String
  order    Int
  timeLimit Int?    // section-specific time limit in minutes
  questions Question[]
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  INTEGER
}

model Question {
  id        String   @id @default(cuid())
  section   Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  type      QuestionType
  text      String
  imageUrl  String?
  options   String // JSON string for array of options
  correctAnswers String // JSON string for array of correct answers
  explanation String?
  marks     Int
  negativeMarks Int @default(0)
  difficulty String @default("MEDIUM") // EASY, MEDIUM, HARD
  order     Int
  tags      String // JSON string for array of tags
}

model Submission {
  id        String   @id @default(cuid())
  test      Test     @relation(fields: [testId], references: [id])
  testId    String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  answers   Json     // { questionId: answer, ... }
  score     Int      @default(0)
  totalMarks Int     @default(0)
  percentage Float   @default(0)
  timeTaken Int      @default(0) // minutes
  isCompleted Boolean @default(false)
  startedAt DateTime @default(now())
  submittedAt DateTime?
  createdAt DateTime @default(now())
  
  @@unique([testId, studentId])
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  type      String   // INFO, SUCCESS, WARNING, ERROR
  isRead    Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
}

model ClassSchedule {
  id          String   @id @default(cuid())
  subject     String
  teacher     User     @relation("ClassTeacher", fields: [teacherId], references: [id])
  teacherId   String
  creator     User     @relation("ClassCreator", fields: [creatorId], references: [id])
  creatorId   String
  batchType   BatchType
  roomNumber  String
  date        DateTime
  startTime   String   // "09:00"
  endTime     String   // "10:30"
  topic       String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  attendance  Attendance[]
}

enum EventType {
  PTM
  DOUBT_CLASS
  SPECIAL_CLASS
  WORKSHOP
  EXAM
  ANNOUNCEMENT
}

enum HomeworkStatus {
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  REVIEWED
  OVERDUE
}

enum SubmissionType {
  TEXT
  IMAGE
  DOCUMENT
  UNABLE_TO_COMPLETE
}

model Batch {
  id        String   @id @default(cuid())
  type      BatchType @unique
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  events    SpecialEvent[]
  teachersAssigned User[] @relation("TeacherBatches")
}

model SpecialEvent {
  id              String   @id @default(cuid())
  title           String
  description     String?
  type            EventType
  scheduledAt     DateTime
  duration        Int      @default(60) // minutes
  location        String?
  status          String   @default("SCHEDULED") // SCHEDULED, ONGOING, COMPLETED, CANCELLED
  maxParticipants Int?
  isRecurring     Boolean  @default(false)
  recurringPattern String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  batches         Batch[]
  participants    EventParticipant[]
}

model EventParticipant {
  id          String   @id @default(cuid())
  event       SpecialEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  user        User     @relation(fields: [userUid], references: [uid])
  userUid     String
  status      String   @default("INVITED") // INVITED, ATTENDING, NOT_ATTENDING, MAYBE
  respondedAt DateTime?
  createdAt   DateTime @default(now())
  
  @@unique([eventId, userUid])
}

model Attendance {
  id          String   @id @default(cuid())
  classSchedule ClassSchedule @relation(fields: [classScheduleId], references: [id])
  classScheduleId String
  student     User     @relation("StudentAttendance", fields: [studentId], references: [id])
  studentId   String
  teacher     User     @relation("TeacherAttendance", fields: [teacherId], references: [id])
  teacherId   String
  status      String   // PRESENT, ABSENT, LATE, EXCUSED
  markedAt    DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([classScheduleId, studentId])
}

model SampleQuestion {
  id          String   @id @default(cuid())
  subject     String
  class       String   // "7", "8", "9", "10", "11", "12"
  type        QuestionType
  text        String
  imageUrl    String?
  options     String   // JSON string
  correctAnswers String // JSON string
  explanation String?
  difficulty  String   @default("MEDIUM")
  tags        String   // JSON string
  createdAt   DateTime @default(now())
}

model Homework {
  id          String   @id @default(cuid())
  title       String
  description String
  instructions String?
  subject     String
  teacher     User     @relation("HomeworkTeacher", fields: [teacherId], references: [id])
  teacherId   String
  batchType   BatchType
  imageUrl    String? // Optional homework image/document
  dueDate     DateTime
  totalMarks  Int      @default(10)
  status      HomeworkStatus @default(ASSIGNED)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  submissions HomeworkSubmission[]
}

model HomeworkSubmission {
  id            String   @id @default(cuid())
  homework      Homework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  homeworkId    String
  student       User     @relation(fields: [studentId], references: [id])
  studentId     String
  submissionType SubmissionType
  textContent   String? // For text submissions
  imageUrl      String? // For image submissions
  documentUrl   String? // For document submissions
  unableReason  String? // When student can't complete homework
  status        HomeworkStatus @default(SUBMITTED)
  marksObtained Int?
  teacherRemarks String?
  grade         String? // A+, A, B+, B, C+, C, D, F
  submittedAt   DateTime @default(now())
  reviewedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([homeworkId, studentId])
}
